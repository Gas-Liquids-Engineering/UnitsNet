//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTime
{
    /// <summary>
    /// A number to Time Extensions
    /// </summary>
    public static class NumberToTimeExtensions
    {
        /// <inheritdoc cref="Time.FromCentiseconds(UnitsNet.QuantityValue)" />
        public static Time Centiseconds<T>(this T value) =>
            Time.FromCentiseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromFeetPerSecond(UnitsNet.QuantityValue)" />
        public static Time FeetPerSecond<T>(this T value) =>
            Time.FromFeetPerSecond(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromDeciseconds(UnitsNet.QuantityValue)" />
        public static Time Deciseconds<T>(this T value) =>
            Time.FromDeciseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromHours(UnitsNet.QuantityValue)" />
        public static Time Hours<T>(this T value) =>
            Time.FromHours(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromKiloseconds(UnitsNet.QuantityValue)" />
        public static Time Kiloseconds<T>(this T value) =>
            Time.FromKiloseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromMicroseconds(UnitsNet.QuantityValue)" />
        public static Time Microseconds<T>(this T value) =>
            Time.FromMicroseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromMilliseconds(UnitsNet.QuantityValue)" />
        public static Time Milliseconds<T>(this T value) =>
            Time.FromMilliseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromMinutes(UnitsNet.QuantityValue)" />
        public static Time Minutes<T>(this T value) =>
            Time.FromMinutes(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromNanoseconds(UnitsNet.QuantityValue)" />
        public static Time Nanoseconds<T>(this T value) =>
            Time.FromNanoseconds(Convert.ToDouble(value));

        /// <inheritdoc cref="Time.FromSeconds(UnitsNet.QuantityValue)" />
        public static Time Seconds<T>(this T value) =>
            Time.FromSeconds(Convert.ToDouble(value));

    }
}
