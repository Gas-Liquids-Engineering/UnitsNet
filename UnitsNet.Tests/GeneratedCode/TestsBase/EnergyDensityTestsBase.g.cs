//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of EnergyDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyDensityTestsBase : QuantityTestsBase
    {
        protected abstract double BtusPerCubicFeetInOneJoulesPerCubicMeter { get; }
        protected abstract double CaloriesPerCubicMeterInOneJoulesPerCubicMeter { get; }
        protected abstract double JoulesPerCubicMeterInOneJoulesPerCubicMeter { get; }
        protected abstract double KilocaloriesPerCubicMeterInOneJoulesPerCubicMeter { get; }
        protected abstract double KilojoulesPerCubicMeterInOneJoulesPerCubicMeter { get; }
        protected abstract double MegajoulesPerCubicMeterInOneJoulesPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtusPerCubicFeetTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerCubicMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnergyDensity((double)0.0, EnergyDensityUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new EnergyDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyDensityUnit.JoulesPerCubicMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnergyDensity(double.PositiveInfinity, EnergyDensityUnit.JoulesPerCubicMeter));
            Assert.Throws<ArgumentException>(() => new EnergyDensity(double.NegativeInfinity, EnergyDensityUnit.JoulesPerCubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnergyDensity(double.NaN, EnergyDensityUnit.JoulesPerCubicMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new EnergyDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new EnergyDensity(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (EnergyDensity) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void EnergyDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new EnergyDensity(1, EnergyDensityUnit.JoulesPerCubicMeter);

            QuantityInfo<EnergyDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(EnergyDensity.Zero, quantityInfo.Zero);
            Assert.Equal("EnergyDensity", quantityInfo.Name);
            Assert.Equal(QuantityType.EnergyDensity, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<EnergyDensityUnit>().Except(new[] {EnergyDensityUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JoulesPerCubicMeterToEnergyDensityUnits()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(BtusPerCubicFeetInOneJoulesPerCubicMeter, joulespercubicmeter.BtusPerCubicFeet, BtusPerCubicFeetTolerance);
            AssertEx.EqualTolerance(CaloriesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.CaloriesPerCubicMeter, CaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.KilocaloriesPerCubicMeter, KilocaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.KilojoulesPerCubicMeter, KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.MegajoulesPerCubicMeter, MegajoulesPerCubicMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = EnergyDensity.From(1, EnergyDensityUnit.BtusPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity00.BtusPerCubicFeet, BtusPerCubicFeetTolerance);
            Assert.Equal(EnergyDensityUnit.BtusPerCubicFoot, quantity00.Unit);

            var quantity01 = EnergyDensity.From(1, EnergyDensityUnit.CaloriesPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity01.CaloriesPerCubicMeter, CaloriesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.CaloriesPerCubicMeter, quantity01.Unit);

            var quantity02 = EnergyDensity.From(1, EnergyDensityUnit.JoulesPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity02.JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.JoulesPerCubicMeter, quantity02.Unit);

            var quantity03 = EnergyDensity.From(1, EnergyDensityUnit.KilocaloriesPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity03.KilocaloriesPerCubicMeter, KilocaloriesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.KilocaloriesPerCubicMeter, quantity03.Unit);

            var quantity04 = EnergyDensity.From(1, EnergyDensityUnit.KilojoulesPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity04.KilojoulesPerCubicMeter, KilojoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.KilojoulesPerCubicMeter, quantity04.Unit);

            var quantity05 = EnergyDensity.From(1, EnergyDensityUnit.MegajoulesPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity05.MegajoulesPerCubicMeter, MegajoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.MegajoulesPerCubicMeter, quantity05.Unit);

        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnergyDensity.FromJoulesPerCubicMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => EnergyDensity.FromJoulesPerCubicMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnergyDensity.FromJoulesPerCubicMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(BtusPerCubicFeetInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.BtusPerCubicFoot), BtusPerCubicFeetTolerance);
            AssertEx.EqualTolerance(CaloriesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.CaloriesPerCubicMeter), CaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.JoulesPerCubicMeter), JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.KilocaloriesPerCubicMeter), KilocaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.KilojoulesPerCubicMeter), KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulesPerCubicMeter, joulespercubicmeter.As(EnergyDensityUnit.MegajoulesPerCubicMeter), MegajoulesPerCubicMeterTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);

            var btuspercubicfootQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.BtusPerCubicFoot);
            AssertEx.EqualTolerance(BtusPerCubicFeetInOneJoulesPerCubicMeter, (double)btuspercubicfootQuantity.Value, BtusPerCubicFeetTolerance);
            Assert.Equal(EnergyDensityUnit.BtusPerCubicFoot, btuspercubicfootQuantity.Unit);

            var caloriespercubicmeterQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.CaloriesPerCubicMeter);
            AssertEx.EqualTolerance(CaloriesPerCubicMeterInOneJoulesPerCubicMeter, (double)caloriespercubicmeterQuantity.Value, CaloriesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.CaloriesPerCubicMeter, caloriespercubicmeterQuantity.Unit);

            var joulespercubicmeterQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.JoulesPerCubicMeter);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulesPerCubicMeter, (double)joulespercubicmeterQuantity.Value, JoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.JoulesPerCubicMeter, joulespercubicmeterQuantity.Unit);

            var kilocaloriespercubicmeterQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.KilocaloriesPerCubicMeter);
            AssertEx.EqualTolerance(KilocaloriesPerCubicMeterInOneJoulesPerCubicMeter, (double)kilocaloriespercubicmeterQuantity.Value, KilocaloriesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.KilocaloriesPerCubicMeter, kilocaloriespercubicmeterQuantity.Unit);

            var kilojoulespercubicmeterQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.KilojoulesPerCubicMeter);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulesPerCubicMeter, (double)kilojoulespercubicmeterQuantity.Value, KilojoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.KilojoulesPerCubicMeter, kilojoulespercubicmeterQuantity.Unit);

            var megajoulespercubicmeterQuantity = joulespercubicmeter.ToUnit(EnergyDensityUnit.MegajoulesPerCubicMeter);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulesPerCubicMeter, (double)megajoulespercubicmeterQuantity.Value, MegajoulesPerCubicMeterTolerance);
            Assert.Equal(EnergyDensityUnit.MegajoulesPerCubicMeter, megajoulespercubicmeterQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = EnergyDensity.FromJoulesPerCubicMeter(1).ToBaseUnit();
            Assert.Equal(EnergyDensity.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(1, EnergyDensity.FromBtusPerCubicFeet(joulespercubicmeter.BtusPerCubicFeet).JoulesPerCubicMeter, BtusPerCubicFeetTolerance);
            AssertEx.EqualTolerance(1, EnergyDensity.FromCaloriesPerCubicMeter(joulespercubicmeter.CaloriesPerCubicMeter).JoulesPerCubicMeter, CaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyDensity.FromJoulesPerCubicMeter(joulespercubicmeter.JoulesPerCubicMeter).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyDensity.FromKilocaloriesPerCubicMeter(joulespercubicmeter.KilocaloriesPerCubicMeter).JoulesPerCubicMeter, KilocaloriesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyDensity.FromKilojoulesPerCubicMeter(joulespercubicmeter.KilojoulesPerCubicMeter).JoulesPerCubicMeter, KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, EnergyDensity.FromMegajoulesPerCubicMeter(joulespercubicmeter.MegajoulesPerCubicMeter).JoulesPerCubicMeter, MegajoulesPerCubicMeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            EnergyDensity v = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (EnergyDensity.FromJoulesPerCubicMeter(3)-v).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (EnergyDensity.FromJoulesPerCubicMeter(10)/5).JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, EnergyDensity.FromJoulesPerCubicMeter(10)/EnergyDensity.FromJoulesPerCubicMeter(5), JoulesPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            EnergyDensity oneJoulesPerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            EnergyDensity twoJoulesPerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(2);

            Assert.True(oneJoulesPerCubicMeter < twoJoulesPerCubicMeter);
            Assert.True(oneJoulesPerCubicMeter <= twoJoulesPerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter > oneJoulesPerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter >= oneJoulesPerCubicMeter);

            Assert.False(oneJoulesPerCubicMeter > twoJoulesPerCubicMeter);
            Assert.False(oneJoulesPerCubicMeter >= twoJoulesPerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter < oneJoulesPerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter <= oneJoulesPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(0, joulespercubicmeter.CompareTo(joulespercubicmeter));
            Assert.True(joulespercubicmeter.CompareTo(EnergyDensity.Zero) > 0);
            Assert.True(EnergyDensity.Zero.CompareTo(joulespercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => joulespercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => joulespercubicmeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = EnergyDensity.FromJoulesPerCubicMeter(1);
            var b = EnergyDensity.FromJoulesPerCubicMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = EnergyDensity.FromJoulesPerCubicMeter(1);
            var b = EnergyDensity.FromJoulesPerCubicMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = EnergyDensity.FromJoulesPerCubicMeter(1);
            object b = EnergyDensity.FromJoulesPerCubicMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.True(v.Equals(EnergyDensity.FromJoulesPerCubicMeter(1), JoulesPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(EnergyDensity.Zero, JoulesPerCubicMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(EnergyDensity.FromJoulesPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulespercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            EnergyDensity joulespercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulespercubicmeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(EnergyDensityUnit.Undefined, EnergyDensity.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnergyDensityUnit)).Cast<EnergyDensityUnit>();
            foreach(var unit in units)
            {
                if(unit == EnergyDensityUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(EnergyDensity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 Btu/ft³", new EnergyDensity(1, EnergyDensityUnit.BtusPerCubicFoot).ToString());
                Assert.Equal("1 Cal/m³", new EnergyDensity(1, EnergyDensityUnit.CaloriesPerCubicMeter).ToString());
                Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulesPerCubicMeter).ToString());
                Assert.Equal("1 kCal/m³", new EnergyDensity(1, EnergyDensityUnit.KilocaloriesPerCubicMeter).ToString());
                Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulesPerCubicMeter).ToString());
                Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulesPerCubicMeter).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Btu/ft³", new EnergyDensity(1, EnergyDensityUnit.BtusPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 Cal/m³", new EnergyDensity(1, EnergyDensityUnit.CaloriesPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulesPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kCal/m³", new EnergyDensity(1, EnergyDensityUnit.KilocaloriesPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulesPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulesPerCubicMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s1"));
                Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s2"));
                Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s3"));
                Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulesPerCubicMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(EnergyDensity)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(EnergyDensityUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(QuantityType.EnergyDensity, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(EnergyDensity.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(EnergyDensity.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(new {EnergyDensity.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(value);
            Assert.Equal(EnergyDensity.FromJoulesPerCubicMeter(-value), -quantity);
        }
    }
}
