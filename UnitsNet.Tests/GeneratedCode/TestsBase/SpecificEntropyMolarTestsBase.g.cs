//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificEntropyMolar.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificEntropyMolarTestsBase : QuantityTestsBase
    {
        protected abstract double BtusPerPoundMoleFahrenheitInOneJoulePerMoleKelvin { get; }
        protected abstract double CaloriesPerMoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double JoulesPerKilomoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double JoulesPerMoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double KilojoulesPerKilomoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double KilojoulesPerMoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double MegajoulesPerKilomoleKelvinInOneJoulePerMoleKelvin { get; }
        protected abstract double MegajoulesPerMoleKelvinInOneJoulePerMoleKelvin { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtusPerPoundMoleFahrenheitTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerMoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerKilomoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerMoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerKilomoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerMoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerKilomoleKelvinTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerMoleKelvinTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEntropyMolar((double)0.0, SpecificEntropyMolarUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new SpecificEntropyMolar();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpecificEntropyMolarUnit.JoulePerMoleKelvin, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEntropyMolar(double.PositiveInfinity, SpecificEntropyMolarUnit.JoulePerMoleKelvin));
            Assert.Throws<ArgumentException>(() => new SpecificEntropyMolar(double.NegativeInfinity, SpecificEntropyMolarUnit.JoulePerMoleKelvin));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new SpecificEntropyMolar(double.NaN, SpecificEntropyMolarUnit.JoulePerMoleKelvin));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new SpecificEntropyMolar(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new SpecificEntropyMolar(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (SpecificEntropyMolar) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void SpecificEntropyMolar_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.JoulePerMoleKelvin);

            QuantityInfo<SpecificEntropyMolarUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(SpecificEntropyMolar.Zero, quantityInfo.Zero);
            Assert.Equal("SpecificEntropyMolar", quantityInfo.Name);
            Assert.Equal(QuantityType.SpecificEntropyMolar, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<SpecificEntropyMolarUnit>().Except(new[] {SpecificEntropyMolarUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JoulePerMoleKelvinToSpecificEntropyMolarUnits()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            AssertEx.EqualTolerance(BtusPerPoundMoleFahrenheitInOneJoulePerMoleKelvin, joulepermolekelvin.BtusPerPoundMoleFahrenheit, BtusPerPoundMoleFahrenheitTolerance);
            AssertEx.EqualTolerance(CaloriesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.CaloriesPerMoleKelvin, CaloriesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(JoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.JoulesPerKilomoleKelvin, JoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(JoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.KilojoulesPerKilomoleKelvin, KilojoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(KilojoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.KilojoulesPerMoleKelvin, KilojoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.MegajoulesPerKilomoleKelvin, MegajoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(MegajoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.MegajoulesPerMoleKelvin, MegajoulesPerMoleKelvinTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit);
            AssertEx.EqualTolerance(1, quantity00.BtusPerPoundMoleFahrenheit, BtusPerPoundMoleFahrenheitTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit, quantity00.Unit);

            var quantity01 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.CaloriePerMoleKelvin);
            AssertEx.EqualTolerance(1, quantity01.CaloriesPerMoleKelvin, CaloriesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.CaloriePerMoleKelvin, quantity01.Unit);

            var quantity02 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.JoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(1, quantity02.JoulesPerKilomoleKelvin, JoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.JoulePerKilomoleKelvin, quantity02.Unit);

            var quantity03 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.JoulePerMoleKelvin);
            AssertEx.EqualTolerance(1, quantity03.JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.JoulePerMoleKelvin, quantity03.Unit);

            var quantity04 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(1, quantity04.KilojoulesPerKilomoleKelvin, KilojoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin, quantity04.Unit);

            var quantity05 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.KilojoulePerMoleKelvin);
            AssertEx.EqualTolerance(1, quantity05.KilojoulesPerMoleKelvin, KilojoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.KilojoulePerMoleKelvin, quantity05.Unit);

            var quantity06 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(1, quantity06.MegajoulesPerKilomoleKelvin, MegajoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin, quantity06.Unit);

            var quantity07 = SpecificEntropyMolar.From(1, SpecificEntropyMolarUnit.MegajoulePerMoleKelvin);
            AssertEx.EqualTolerance(1, quantity07.MegajoulesPerMoleKelvin, MegajoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.MegajoulePerMoleKelvin, quantity07.Unit);

        }

        [Fact]
        public void FromJoulesPerMoleKelvin_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEntropyMolar.FromJoulesPerMoleKelvin(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => SpecificEntropyMolar.FromJoulesPerMoleKelvin(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerMoleKelvin_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => SpecificEntropyMolar.FromJoulesPerMoleKelvin(double.NaN));
        }

        [Fact]
        public void As()
        {
            var joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            AssertEx.EqualTolerance(BtusPerPoundMoleFahrenheitInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit), BtusPerPoundMoleFahrenheitTolerance);
            AssertEx.EqualTolerance(CaloriesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.CaloriePerMoleKelvin), CaloriesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(JoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.JoulePerKilomoleKelvin), JoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(JoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.JoulePerMoleKelvin), JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin), KilojoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(KilojoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.KilojoulePerMoleKelvin), KilojoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin), MegajoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(MegajoulesPerMoleKelvinInOneJoulePerMoleKelvin, joulepermolekelvin.As(SpecificEntropyMolarUnit.MegajoulePerMoleKelvin), MegajoulesPerMoleKelvinTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new SpecificEntropyMolar(value: 1, unit: SpecificEntropyMolar.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);

            var btuperpoundmolefahrenheitQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit);
            AssertEx.EqualTolerance(BtusPerPoundMoleFahrenheitInOneJoulePerMoleKelvin, (double)btuperpoundmolefahrenheitQuantity.Value, BtusPerPoundMoleFahrenheitTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit, btuperpoundmolefahrenheitQuantity.Unit);

            var caloriepermolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.CaloriePerMoleKelvin);
            AssertEx.EqualTolerance(CaloriesPerMoleKelvinInOneJoulePerMoleKelvin, (double)caloriepermolekelvinQuantity.Value, CaloriesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.CaloriePerMoleKelvin, caloriepermolekelvinQuantity.Unit);

            var jouleperkilomolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.JoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(JoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, (double)jouleperkilomolekelvinQuantity.Value, JoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.JoulePerKilomoleKelvin, jouleperkilomolekelvinQuantity.Unit);

            var joulepermolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.JoulePerMoleKelvin);
            AssertEx.EqualTolerance(JoulesPerMoleKelvinInOneJoulePerMoleKelvin, (double)joulepermolekelvinQuantity.Value, JoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.JoulePerMoleKelvin, joulepermolekelvinQuantity.Unit);

            var kilojouleperkilomolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(KilojoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, (double)kilojouleperkilomolekelvinQuantity.Value, KilojoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin, kilojouleperkilomolekelvinQuantity.Unit);

            var kilojoulepermolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.KilojoulePerMoleKelvin);
            AssertEx.EqualTolerance(KilojoulesPerMoleKelvinInOneJoulePerMoleKelvin, (double)kilojoulepermolekelvinQuantity.Value, KilojoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.KilojoulePerMoleKelvin, kilojoulepermolekelvinQuantity.Unit);

            var megajouleperkilomolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin);
            AssertEx.EqualTolerance(MegajoulesPerKilomoleKelvinInOneJoulePerMoleKelvin, (double)megajouleperkilomolekelvinQuantity.Value, MegajoulesPerKilomoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin, megajouleperkilomolekelvinQuantity.Unit);

            var megajoulepermolekelvinQuantity = joulepermolekelvin.ToUnit(SpecificEntropyMolarUnit.MegajoulePerMoleKelvin);
            AssertEx.EqualTolerance(MegajoulesPerMoleKelvinInOneJoulePerMoleKelvin, (double)megajoulepermolekelvinQuantity.Value, MegajoulesPerMoleKelvinTolerance);
            Assert.Equal(SpecificEntropyMolarUnit.MegajoulePerMoleKelvin, megajoulepermolekelvinQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1).ToBaseUnit();
            Assert.Equal(SpecificEntropyMolar.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromBtusPerPoundMoleFahrenheit(joulepermolekelvin.BtusPerPoundMoleFahrenheit).JoulesPerMoleKelvin, BtusPerPoundMoleFahrenheitTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromCaloriesPerMoleKelvin(joulepermolekelvin.CaloriesPerMoleKelvin).JoulesPerMoleKelvin, CaloriesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromJoulesPerKilomoleKelvin(joulepermolekelvin.JoulesPerKilomoleKelvin).JoulesPerMoleKelvin, JoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromJoulesPerMoleKelvin(joulepermolekelvin.JoulesPerMoleKelvin).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromKilojoulesPerKilomoleKelvin(joulepermolekelvin.KilojoulesPerKilomoleKelvin).JoulesPerMoleKelvin, KilojoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromKilojoulesPerMoleKelvin(joulepermolekelvin.KilojoulesPerMoleKelvin).JoulesPerMoleKelvin, KilojoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromMegajoulesPerKilomoleKelvin(joulepermolekelvin.MegajoulesPerKilomoleKelvin).JoulesPerMoleKelvin, MegajoulesPerKilomoleKelvinTolerance);
            AssertEx.EqualTolerance(1, SpecificEntropyMolar.FromMegajoulesPerMoleKelvin(joulepermolekelvin.MegajoulesPerMoleKelvin).JoulesPerMoleKelvin, MegajoulesPerMoleKelvinTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificEntropyMolar v = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(2, (SpecificEntropyMolar.FromJoulesPerMoleKelvin(3)-v).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(2, (SpecificEntropyMolar.FromJoulesPerMoleKelvin(10)/5).JoulesPerMoleKelvin, JoulesPerMoleKelvinTolerance);
            AssertEx.EqualTolerance(2, SpecificEntropyMolar.FromJoulesPerMoleKelvin(10)/SpecificEntropyMolar.FromJoulesPerMoleKelvin(5), JoulesPerMoleKelvinTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificEntropyMolar oneJoulePerMoleKelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            SpecificEntropyMolar twoJoulesPerMoleKelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(2);

            Assert.True(oneJoulePerMoleKelvin < twoJoulesPerMoleKelvin);
            Assert.True(oneJoulePerMoleKelvin <= twoJoulesPerMoleKelvin);
            Assert.True(twoJoulesPerMoleKelvin > oneJoulePerMoleKelvin);
            Assert.True(twoJoulesPerMoleKelvin >= oneJoulePerMoleKelvin);

            Assert.False(oneJoulePerMoleKelvin > twoJoulesPerMoleKelvin);
            Assert.False(oneJoulePerMoleKelvin >= twoJoulesPerMoleKelvin);
            Assert.False(twoJoulesPerMoleKelvin < oneJoulePerMoleKelvin);
            Assert.False(twoJoulesPerMoleKelvin <= oneJoulePerMoleKelvin);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.Equal(0, joulepermolekelvin.CompareTo(joulepermolekelvin));
            Assert.True(joulepermolekelvin.CompareTo(SpecificEntropyMolar.Zero) > 0);
            Assert.True(SpecificEntropyMolar.Zero.CompareTo(joulepermolekelvin) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.Throws<ArgumentException>(() => joulepermolekelvin.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.Throws<ArgumentNullException>(() => joulepermolekelvin.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            var b = SpecificEntropyMolar.FromJoulesPerMoleKelvin(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            var b = SpecificEntropyMolar.FromJoulesPerMoleKelvin(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            object b = SpecificEntropyMolar.FromJoulesPerMoleKelvin(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.True(v.Equals(SpecificEntropyMolar.FromJoulesPerMoleKelvin(1), JoulesPerMoleKelvinTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(SpecificEntropyMolar.Zero, JoulesPerMoleKelvinTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(SpecificEntropyMolar.FromJoulesPerMoleKelvin(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.False(joulepermolekelvin.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificEntropyMolar joulepermolekelvin = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1);
            Assert.False(joulepermolekelvin.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(SpecificEntropyMolarUnit.Undefined, SpecificEntropyMolar.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(SpecificEntropyMolarUnit)).Cast<SpecificEntropyMolarUnit>();
            foreach(var unit in units)
            {
                if(unit == SpecificEntropyMolarUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificEntropyMolar.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 Btu/lb-mol.°F", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit).ToString());
                Assert.Equal("1 cal/mol-K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.CaloriePerMoleKelvin).ToString());
                Assert.Equal("1 J/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.JoulePerKilomoleKelvin).ToString());
                Assert.Equal("1 J/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString());
                Assert.Equal("1 kJ/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin).ToString());
                Assert.Equal("1 kJ/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.KilojoulePerMoleKelvin).ToString());
                Assert.Equal("1 MJ/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin).ToString());
                Assert.Equal("1 MJ/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.MegajoulePerMoleKelvin).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Btu/lb-mol.°F", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.BtuPerPoundMoleFahrenheit).ToString(swedishCulture));
            Assert.Equal("1 cal/mol-K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.CaloriePerMoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 J/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.JoulePerKilomoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 J/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 kJ/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 kJ/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.KilojoulePerMoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 MJ/kmol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin).ToString(swedishCulture));
            Assert.Equal("1 MJ/mol.K", new SpecificEntropyMolar(1, SpecificEntropyMolarUnit.MegajoulePerMoleKelvin).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s1"));
                Assert.Equal("0.12 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s2"));
                Assert.Equal("0.123 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s3"));
                Assert.Equal("0.1235 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s1", culture));
            Assert.Equal("0.12 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s2", culture));
            Assert.Equal("0.123 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s3", culture));
            Assert.Equal("0.1235 J/mol.K", new SpecificEntropyMolar(0.123456, SpecificEntropyMolarUnit.JoulePerMoleKelvin).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(SpecificEntropyMolar)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(SpecificEntropyMolarUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(QuantityType.SpecificEntropyMolar, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(SpecificEntropyMolar.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(SpecificEntropyMolar.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(1.0);
            Assert.Equal(new {SpecificEntropyMolar.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = SpecificEntropyMolar.FromJoulesPerMoleKelvin(value);
            Assert.Equal(SpecificEntropyMolar.FromJoulesPerMoleKelvin(-value), -quantity);
        }
    }
}
