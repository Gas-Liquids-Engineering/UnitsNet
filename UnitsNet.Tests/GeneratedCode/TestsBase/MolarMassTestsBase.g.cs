//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarMass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarMassTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double CentigramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double DecagramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double DecagramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double DecigramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double DecigramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double GramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double GramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double GramsPerPoundMoleInOneKilogramPerMole { get; }
        protected abstract double HectogramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double HectogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double KilogramsPerPoundMoleInOneKilogramPerMole { get; }
        protected abstract double KilopoundsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double KilopoundsPerMoleInOneKilogramPerMole { get; }
        protected abstract double KilopoundsPerPoundMoleInOneKilogramPerMole { get; }
        protected abstract double MicrogramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double MicrogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double MilligramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double MilligramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double NanogramsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double NanogramsPerMoleInOneKilogramPerMole { get; }
        protected abstract double PoundsPerKilomoleInOneKilogramPerMole { get; }
        protected abstract double PoundsPerMoleInOneKilogramPerMole { get; }
        protected abstract double PoundsPerPoundMoleInOneKilogramPerMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double GramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double GramsPerPoundMoleTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerPoundMoleTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerPoundMoleTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerKilomoleTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMoleTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerPoundMoleTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarMass((double)0.0, MolarMassUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarMass();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarMassUnit.KilogramPerMole, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarMass(double.PositiveInfinity, MolarMassUnit.KilogramPerMole));
            Assert.Throws<ArgumentException>(() => new MolarMass(double.NegativeInfinity, MolarMassUnit.KilogramPerMole));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarMass(double.NaN, MolarMassUnit.KilogramPerMole));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarMass(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MolarMass(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MolarMass) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MolarMass_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarMass(1, MolarMassUnit.KilogramPerMole);

            QuantityInfo<MolarMassUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarMass.Zero, quantityInfo.Zero);
            Assert.Equal("MolarMass", quantityInfo.Name);
            Assert.Equal(QuantityType.MolarMass, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<MolarMassUnit>().Except(new[] {MolarMassUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void KilogramPerMoleToMolarMassUnits()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(CentigramsPerKilomoleInOneKilogramPerMole, kilogrampermole.CentigramsPerKilomole, CentigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(CentigramsPerMoleInOneKilogramPerMole, kilogrampermole.CentigramsPerMole, CentigramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerKilomoleInOneKilogramPerMole, kilogrampermole.DecagramsPerKilomole, DecagramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerMoleInOneKilogramPerMole, kilogrampermole.DecagramsPerMole, DecagramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerKilomoleInOneKilogramPerMole, kilogrampermole.DecigramsPerKilomole, DecigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerMoleInOneKilogramPerMole, kilogrampermole.DecigramsPerMole, DecigramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerKilomoleInOneKilogramPerMole, kilogrampermole.GramsPerKilomole, GramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(GramsPerMoleInOneKilogramPerMole, kilogrampermole.GramsPerMole, GramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerPoundMoleInOneKilogramPerMole, kilogrampermole.GramsPerPoundMole, GramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.HectogramsPerKilomole, HectogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerMoleInOneKilogramPerMole, kilogrampermole.HectogramsPerMole, HectogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.KilogramsPerKilomole, KilogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerMoleInOneKilogramPerMole, kilogrampermole.KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerPoundMoleInOneKilogramPerMole, kilogrampermole.KilogramsPerPoundMole, KilogramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerKilomoleInOneKilogramPerMole, kilogrampermole.KilopoundsPerKilomole, KilopoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMoleInOneKilogramPerMole, kilogrampermole.KilopoundsPerMole, KilopoundsPerMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerPoundMoleInOneKilogramPerMole, kilogrampermole.KilopoundsPerPoundMole, KilopoundsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.MicrogramsPerKilomole, MicrogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMoleInOneKilogramPerMole, kilogrampermole.MicrogramsPerMole, MicrogramsPerMoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerKilomoleInOneKilogramPerMole, kilogrampermole.MilligramsPerKilomole, MilligramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerMoleInOneKilogramPerMole, kilogrampermole.MilligramsPerMole, MilligramsPerMoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.NanogramsPerKilomole, NanogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerMoleInOneKilogramPerMole, kilogrampermole.NanogramsPerMole, NanogramsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerKilomoleInOneKilogramPerMole, kilogrampermole.PoundsPerKilomole, PoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(PoundsPerMoleInOneKilogramPerMole, kilogrampermole.PoundsPerMole, PoundsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerPoundMoleInOneKilogramPerMole, kilogrampermole.PoundsPerPoundMole, PoundsPerPoundMoleTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarMass.From(1, MolarMassUnit.CentigramPerKilomole);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerKilomole, CentigramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.CentigramPerKilomole, quantity00.Unit);

            var quantity01 = MolarMass.From(1, MolarMassUnit.CentigramPerMole);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerMole, CentigramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.CentigramPerMole, quantity01.Unit);

            var quantity02 = MolarMass.From(1, MolarMassUnit.DecagramPerKilomole);
            AssertEx.EqualTolerance(1, quantity02.DecagramsPerKilomole, DecagramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.DecagramPerKilomole, quantity02.Unit);

            var quantity03 = MolarMass.From(1, MolarMassUnit.DecagramPerMole);
            AssertEx.EqualTolerance(1, quantity03.DecagramsPerMole, DecagramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.DecagramPerMole, quantity03.Unit);

            var quantity04 = MolarMass.From(1, MolarMassUnit.DecigramPerKilomole);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerKilomole, DecigramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.DecigramPerKilomole, quantity04.Unit);

            var quantity05 = MolarMass.From(1, MolarMassUnit.DecigramPerMole);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerMole, DecigramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.DecigramPerMole, quantity05.Unit);

            var quantity06 = MolarMass.From(1, MolarMassUnit.GramPerKilomole);
            AssertEx.EqualTolerance(1, quantity06.GramsPerKilomole, GramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerKilomole, quantity06.Unit);

            var quantity07 = MolarMass.From(1, MolarMassUnit.GramPerMole);
            AssertEx.EqualTolerance(1, quantity07.GramsPerMole, GramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerMole, quantity07.Unit);

            var quantity08 = MolarMass.From(1, MolarMassUnit.GramPerPoundMole);
            AssertEx.EqualTolerance(1, quantity08.GramsPerPoundMole, GramsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerPoundMole, quantity08.Unit);

            var quantity09 = MolarMass.From(1, MolarMassUnit.HectogramPerKilomole);
            AssertEx.EqualTolerance(1, quantity09.HectogramsPerKilomole, HectogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.HectogramPerKilomole, quantity09.Unit);

            var quantity10 = MolarMass.From(1, MolarMassUnit.HectogramPerMole);
            AssertEx.EqualTolerance(1, quantity10.HectogramsPerMole, HectogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.HectogramPerMole, quantity10.Unit);

            var quantity11 = MolarMass.From(1, MolarMassUnit.KilogramPerKilomole);
            AssertEx.EqualTolerance(1, quantity11.KilogramsPerKilomole, KilogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerKilomole, quantity11.Unit);

            var quantity12 = MolarMass.From(1, MolarMassUnit.KilogramPerMole);
            AssertEx.EqualTolerance(1, quantity12.KilogramsPerMole, KilogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerMole, quantity12.Unit);

            var quantity13 = MolarMass.From(1, MolarMassUnit.KilogramPerPoundMole);
            AssertEx.EqualTolerance(1, quantity13.KilogramsPerPoundMole, KilogramsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerPoundMole, quantity13.Unit);

            var quantity14 = MolarMass.From(1, MolarMassUnit.KilopoundPerKilomole);
            AssertEx.EqualTolerance(1, quantity14.KilopoundsPerKilomole, KilopoundsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerKilomole, quantity14.Unit);

            var quantity15 = MolarMass.From(1, MolarMassUnit.KilopoundPerMole);
            AssertEx.EqualTolerance(1, quantity15.KilopoundsPerMole, KilopoundsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerMole, quantity15.Unit);

            var quantity16 = MolarMass.From(1, MolarMassUnit.KilopoundPerPoundMole);
            AssertEx.EqualTolerance(1, quantity16.KilopoundsPerPoundMole, KilopoundsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerPoundMole, quantity16.Unit);

            var quantity17 = MolarMass.From(1, MolarMassUnit.MicrogramPerKilomole);
            AssertEx.EqualTolerance(1, quantity17.MicrogramsPerKilomole, MicrogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.MicrogramPerKilomole, quantity17.Unit);

            var quantity18 = MolarMass.From(1, MolarMassUnit.MicrogramPerMole);
            AssertEx.EqualTolerance(1, quantity18.MicrogramsPerMole, MicrogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.MicrogramPerMole, quantity18.Unit);

            var quantity19 = MolarMass.From(1, MolarMassUnit.MilligramPerKilomole);
            AssertEx.EqualTolerance(1, quantity19.MilligramsPerKilomole, MilligramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.MilligramPerKilomole, quantity19.Unit);

            var quantity20 = MolarMass.From(1, MolarMassUnit.MilligramPerMole);
            AssertEx.EqualTolerance(1, quantity20.MilligramsPerMole, MilligramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.MilligramPerMole, quantity20.Unit);

            var quantity21 = MolarMass.From(1, MolarMassUnit.NanogramPerKilomole);
            AssertEx.EqualTolerance(1, quantity21.NanogramsPerKilomole, NanogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.NanogramPerKilomole, quantity21.Unit);

            var quantity22 = MolarMass.From(1, MolarMassUnit.NanogramPerMole);
            AssertEx.EqualTolerance(1, quantity22.NanogramsPerMole, NanogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.NanogramPerMole, quantity22.Unit);

            var quantity23 = MolarMass.From(1, MolarMassUnit.PoundPerKilomole);
            AssertEx.EqualTolerance(1, quantity23.PoundsPerKilomole, PoundsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerKilomole, quantity23.Unit);

            var quantity24 = MolarMass.From(1, MolarMassUnit.PoundPerMole);
            AssertEx.EqualTolerance(1, quantity24.PoundsPerMole, PoundsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerMole, quantity24.Unit);

            var quantity25 = MolarMass.From(1, MolarMassUnit.PoundPerPoundMole);
            AssertEx.EqualTolerance(1, quantity25.PoundsPerPoundMole, PoundsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerPoundMole, quantity25.Unit);

        }

        [Fact]
        public void FromKilogramsPerMole_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarMass.FromKilogramsPerMole(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MolarMass.FromKilogramsPerMole(double.NegativeInfinity));
        }

        [Fact]
        public void FromKilogramsPerMole_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarMass.FromKilogramsPerMole(double.NaN));
        }

        [Fact]
        public void As()
        {
            var kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(CentigramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.CentigramPerKilomole), CentigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(CentigramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.CentigramPerMole), CentigramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecagramPerKilomole), DecagramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(DecagramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecagramPerMole), DecagramsPerMoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecigramPerKilomole), DecigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(DecigramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.DecigramPerMole), DecigramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.GramPerKilomole), GramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(GramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.GramPerMole), GramsPerMoleTolerance);
            AssertEx.EqualTolerance(GramsPerPoundMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.GramPerPoundMole), GramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.HectogramPerKilomole), HectogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(HectogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.HectogramPerMole), HectogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerKilomole), KilogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerMole), KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(KilogramsPerPoundMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilogramPerPoundMole), KilogramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilopoundPerKilomole), KilopoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilopoundPerMole), KilopoundsPerMoleTolerance);
            AssertEx.EqualTolerance(KilopoundsPerPoundMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.KilopoundPerPoundMole), KilopoundsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MicrogramPerKilomole), MicrogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MicrogramPerMole), MicrogramsPerMoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MilligramPerKilomole), MilligramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(MilligramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.MilligramPerMole), MilligramsPerMoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.NanogramPerKilomole), NanogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(NanogramsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.NanogramPerMole), NanogramsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerKilomoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.PoundPerKilomole), PoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(PoundsPerMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.PoundPerMole), PoundsPerMoleTolerance);
            AssertEx.EqualTolerance(PoundsPerPoundMoleInOneKilogramPerMole, kilogrampermole.As(MolarMassUnit.PoundPerPoundMole), PoundsPerPoundMoleTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarMass(value: 1, unit: MolarMass.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var kilogrampermole = MolarMass.FromKilogramsPerMole(1);

            var centigramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.CentigramPerKilomole);
            AssertEx.EqualTolerance(CentigramsPerKilomoleInOneKilogramPerMole, (double)centigramperkilomoleQuantity.Value, CentigramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.CentigramPerKilomole, centigramperkilomoleQuantity.Unit);

            var centigrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.CentigramPerMole);
            AssertEx.EqualTolerance(CentigramsPerMoleInOneKilogramPerMole, (double)centigrampermoleQuantity.Value, CentigramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.CentigramPerMole, centigrampermoleQuantity.Unit);

            var decagramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.DecagramPerKilomole);
            AssertEx.EqualTolerance(DecagramsPerKilomoleInOneKilogramPerMole, (double)decagramperkilomoleQuantity.Value, DecagramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.DecagramPerKilomole, decagramperkilomoleQuantity.Unit);

            var decagrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.DecagramPerMole);
            AssertEx.EqualTolerance(DecagramsPerMoleInOneKilogramPerMole, (double)decagrampermoleQuantity.Value, DecagramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.DecagramPerMole, decagrampermoleQuantity.Unit);

            var decigramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.DecigramPerKilomole);
            AssertEx.EqualTolerance(DecigramsPerKilomoleInOneKilogramPerMole, (double)decigramperkilomoleQuantity.Value, DecigramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.DecigramPerKilomole, decigramperkilomoleQuantity.Unit);

            var decigrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.DecigramPerMole);
            AssertEx.EqualTolerance(DecigramsPerMoleInOneKilogramPerMole, (double)decigrampermoleQuantity.Value, DecigramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.DecigramPerMole, decigrampermoleQuantity.Unit);

            var gramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.GramPerKilomole);
            AssertEx.EqualTolerance(GramsPerKilomoleInOneKilogramPerMole, (double)gramperkilomoleQuantity.Value, GramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerKilomole, gramperkilomoleQuantity.Unit);

            var grampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.GramPerMole);
            AssertEx.EqualTolerance(GramsPerMoleInOneKilogramPerMole, (double)grampermoleQuantity.Value, GramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerMole, grampermoleQuantity.Unit);

            var gramperpoundmoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.GramPerPoundMole);
            AssertEx.EqualTolerance(GramsPerPoundMoleInOneKilogramPerMole, (double)gramperpoundmoleQuantity.Value, GramsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.GramPerPoundMole, gramperpoundmoleQuantity.Unit);

            var hectogramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.HectogramPerKilomole);
            AssertEx.EqualTolerance(HectogramsPerKilomoleInOneKilogramPerMole, (double)hectogramperkilomoleQuantity.Value, HectogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.HectogramPerKilomole, hectogramperkilomoleQuantity.Unit);

            var hectogrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.HectogramPerMole);
            AssertEx.EqualTolerance(HectogramsPerMoleInOneKilogramPerMole, (double)hectogrampermoleQuantity.Value, HectogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.HectogramPerMole, hectogrampermoleQuantity.Unit);

            var kilogramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilogramPerKilomole);
            AssertEx.EqualTolerance(KilogramsPerKilomoleInOneKilogramPerMole, (double)kilogramperkilomoleQuantity.Value, KilogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerKilomole, kilogramperkilomoleQuantity.Unit);

            var kilogrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilogramPerMole);
            AssertEx.EqualTolerance(KilogramsPerMoleInOneKilogramPerMole, (double)kilogrampermoleQuantity.Value, KilogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerMole, kilogrampermoleQuantity.Unit);

            var kilogramperpoundmoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilogramPerPoundMole);
            AssertEx.EqualTolerance(KilogramsPerPoundMoleInOneKilogramPerMole, (double)kilogramperpoundmoleQuantity.Value, KilogramsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.KilogramPerPoundMole, kilogramperpoundmoleQuantity.Unit);

            var kilopoundperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilopoundPerKilomole);
            AssertEx.EqualTolerance(KilopoundsPerKilomoleInOneKilogramPerMole, (double)kilopoundperkilomoleQuantity.Value, KilopoundsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerKilomole, kilopoundperkilomoleQuantity.Unit);

            var kilopoundpermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilopoundPerMole);
            AssertEx.EqualTolerance(KilopoundsPerMoleInOneKilogramPerMole, (double)kilopoundpermoleQuantity.Value, KilopoundsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerMole, kilopoundpermoleQuantity.Unit);

            var kilopoundperpoundmoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.KilopoundPerPoundMole);
            AssertEx.EqualTolerance(KilopoundsPerPoundMoleInOneKilogramPerMole, (double)kilopoundperpoundmoleQuantity.Value, KilopoundsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.KilopoundPerPoundMole, kilopoundperpoundmoleQuantity.Unit);

            var microgramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.MicrogramPerKilomole);
            AssertEx.EqualTolerance(MicrogramsPerKilomoleInOneKilogramPerMole, (double)microgramperkilomoleQuantity.Value, MicrogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.MicrogramPerKilomole, microgramperkilomoleQuantity.Unit);

            var microgrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.MicrogramPerMole);
            AssertEx.EqualTolerance(MicrogramsPerMoleInOneKilogramPerMole, (double)microgrampermoleQuantity.Value, MicrogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.MicrogramPerMole, microgrampermoleQuantity.Unit);

            var milligramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.MilligramPerKilomole);
            AssertEx.EqualTolerance(MilligramsPerKilomoleInOneKilogramPerMole, (double)milligramperkilomoleQuantity.Value, MilligramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.MilligramPerKilomole, milligramperkilomoleQuantity.Unit);

            var milligrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.MilligramPerMole);
            AssertEx.EqualTolerance(MilligramsPerMoleInOneKilogramPerMole, (double)milligrampermoleQuantity.Value, MilligramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.MilligramPerMole, milligrampermoleQuantity.Unit);

            var nanogramperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.NanogramPerKilomole);
            AssertEx.EqualTolerance(NanogramsPerKilomoleInOneKilogramPerMole, (double)nanogramperkilomoleQuantity.Value, NanogramsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.NanogramPerKilomole, nanogramperkilomoleQuantity.Unit);

            var nanogrampermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.NanogramPerMole);
            AssertEx.EqualTolerance(NanogramsPerMoleInOneKilogramPerMole, (double)nanogrampermoleQuantity.Value, NanogramsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.NanogramPerMole, nanogrampermoleQuantity.Unit);

            var poundperkilomoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.PoundPerKilomole);
            AssertEx.EqualTolerance(PoundsPerKilomoleInOneKilogramPerMole, (double)poundperkilomoleQuantity.Value, PoundsPerKilomoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerKilomole, poundperkilomoleQuantity.Unit);

            var poundpermoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.PoundPerMole);
            AssertEx.EqualTolerance(PoundsPerMoleInOneKilogramPerMole, (double)poundpermoleQuantity.Value, PoundsPerMoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerMole, poundpermoleQuantity.Unit);

            var poundperpoundmoleQuantity = kilogrampermole.ToUnit(MolarMassUnit.PoundPerPoundMole);
            AssertEx.EqualTolerance(PoundsPerPoundMoleInOneKilogramPerMole, (double)poundperpoundmoleQuantity.Value, PoundsPerPoundMoleTolerance);
            Assert.Equal(MolarMassUnit.PoundPerPoundMole, poundperpoundmoleQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = MolarMass.FromKilogramsPerMole(1).ToBaseUnit();
            Assert.Equal(MolarMass.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(1, MolarMass.FromCentigramsPerKilomole(kilogrampermole.CentigramsPerKilomole).KilogramsPerMole, CentigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromCentigramsPerMole(kilogrampermole.CentigramsPerMole).KilogramsPerMole, CentigramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecagramsPerKilomole(kilogrampermole.DecagramsPerKilomole).KilogramsPerMole, DecagramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecagramsPerMole(kilogrampermole.DecagramsPerMole).KilogramsPerMole, DecagramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecigramsPerKilomole(kilogrampermole.DecigramsPerKilomole).KilogramsPerMole, DecigramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromDecigramsPerMole(kilogrampermole.DecigramsPerMole).KilogramsPerMole, DecigramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromGramsPerKilomole(kilogrampermole.GramsPerKilomole).KilogramsPerMole, GramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromGramsPerMole(kilogrampermole.GramsPerMole).KilogramsPerMole, GramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromGramsPerPoundMole(kilogrampermole.GramsPerPoundMole).KilogramsPerMole, GramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromHectogramsPerKilomole(kilogrampermole.HectogramsPerKilomole).KilogramsPerMole, HectogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromHectogramsPerMole(kilogrampermole.HectogramsPerMole).KilogramsPerMole, HectogramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilogramsPerKilomole(kilogrampermole.KilogramsPerKilomole).KilogramsPerMole, KilogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilogramsPerMole(kilogrampermole.KilogramsPerMole).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilogramsPerPoundMole(kilogrampermole.KilogramsPerPoundMole).KilogramsPerMole, KilogramsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilopoundsPerKilomole(kilogrampermole.KilopoundsPerKilomole).KilogramsPerMole, KilopoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilopoundsPerMole(kilogrampermole.KilopoundsPerMole).KilogramsPerMole, KilopoundsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromKilopoundsPerPoundMole(kilogrampermole.KilopoundsPerPoundMole).KilogramsPerMole, KilopoundsPerPoundMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMicrogramsPerKilomole(kilogrampermole.MicrogramsPerKilomole).KilogramsPerMole, MicrogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMicrogramsPerMole(kilogrampermole.MicrogramsPerMole).KilogramsPerMole, MicrogramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMilligramsPerKilomole(kilogrampermole.MilligramsPerKilomole).KilogramsPerMole, MilligramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromMilligramsPerMole(kilogrampermole.MilligramsPerMole).KilogramsPerMole, MilligramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromNanogramsPerKilomole(kilogrampermole.NanogramsPerKilomole).KilogramsPerMole, NanogramsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromNanogramsPerMole(kilogrampermole.NanogramsPerMole).KilogramsPerMole, NanogramsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromPoundsPerKilomole(kilogrampermole.PoundsPerKilomole).KilogramsPerMole, PoundsPerKilomoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromPoundsPerMole(kilogrampermole.PoundsPerMole).KilogramsPerMole, PoundsPerMoleTolerance);
            AssertEx.EqualTolerance(1, MolarMass.FromPoundsPerPoundMole(kilogrampermole.PoundsPerPoundMole).KilogramsPerMole, PoundsPerPoundMoleTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarMass v = MolarMass.FromKilogramsPerMole(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(2, (MolarMass.FromKilogramsPerMole(3)-v).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(2, (MolarMass.FromKilogramsPerMole(10)/5).KilogramsPerMole, KilogramsPerMoleTolerance);
            AssertEx.EqualTolerance(2, MolarMass.FromKilogramsPerMole(10)/MolarMass.FromKilogramsPerMole(5), KilogramsPerMoleTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarMass oneKilogramPerMole = MolarMass.FromKilogramsPerMole(1);
            MolarMass twoKilogramsPerMole = MolarMass.FromKilogramsPerMole(2);

            Assert.True(oneKilogramPerMole < twoKilogramsPerMole);
            Assert.True(oneKilogramPerMole <= twoKilogramsPerMole);
            Assert.True(twoKilogramsPerMole > oneKilogramPerMole);
            Assert.True(twoKilogramsPerMole >= oneKilogramPerMole);

            Assert.False(oneKilogramPerMole > twoKilogramsPerMole);
            Assert.False(oneKilogramPerMole >= twoKilogramsPerMole);
            Assert.False(twoKilogramsPerMole < oneKilogramPerMole);
            Assert.False(twoKilogramsPerMole <= oneKilogramPerMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Equal(0, kilogrampermole.CompareTo(kilogrampermole));
            Assert.True(kilogrampermole.CompareTo(MolarMass.Zero) > 0);
            Assert.True(MolarMass.Zero.CompareTo(kilogrampermole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Throws<ArgumentException>(() => kilogrampermole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampermole.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MolarMass.FromKilogramsPerMole(1);
            var b = MolarMass.FromKilogramsPerMole(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = MolarMass.FromKilogramsPerMole(1);
            var b = MolarMass.FromKilogramsPerMole(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = MolarMass.FromKilogramsPerMole(1);
            object b = MolarMass.FromKilogramsPerMole(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MolarMass.FromKilogramsPerMole(1);
            Assert.True(v.Equals(MolarMass.FromKilogramsPerMole(1), KilogramsPerMoleTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MolarMass.Zero, KilogramsPerMoleTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarMass.FromKilogramsPerMole(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarMass.FromKilogramsPerMole(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.False(kilogrampermole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarMass kilogrampermole = MolarMass.FromKilogramsPerMole(1);
            Assert.False(kilogrampermole.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MolarMassUnit.Undefined, MolarMass.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarMassUnit)).Cast<MolarMassUnit>();
            foreach(var unit in units)
            {
                if(unit == MolarMassUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarMass.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cg/kgmol", new MolarMass(1, MolarMassUnit.CentigramPerKilomole).ToString());
                Assert.Equal("1 cg/gmol", new MolarMass(1, MolarMassUnit.CentigramPerMole).ToString());
                Assert.Equal("1 dag/kgmol", new MolarMass(1, MolarMassUnit.DecagramPerKilomole).ToString());
                Assert.Equal("1 dag/gmol", new MolarMass(1, MolarMassUnit.DecagramPerMole).ToString());
                Assert.Equal("1 dg/kgmol", new MolarMass(1, MolarMassUnit.DecigramPerKilomole).ToString());
                Assert.Equal("1 dg/gmol", new MolarMass(1, MolarMassUnit.DecigramPerMole).ToString());
                Assert.Equal("1 g/kgmol", new MolarMass(1, MolarMassUnit.GramPerKilomole).ToString());
                Assert.Equal("1 g/gmol", new MolarMass(1, MolarMassUnit.GramPerMole).ToString());
                Assert.Equal("1 g/lbmol", new MolarMass(1, MolarMassUnit.GramPerPoundMole).ToString());
                Assert.Equal("1 hg/kgmol", new MolarMass(1, MolarMassUnit.HectogramPerKilomole).ToString());
                Assert.Equal("1 hg/gmol", new MolarMass(1, MolarMassUnit.HectogramPerMole).ToString());
                Assert.Equal("1 kg/kgmol", new MolarMass(1, MolarMassUnit.KilogramPerKilomole).ToString());
                Assert.Equal("1 kg/gmol", new MolarMass(1, MolarMassUnit.KilogramPerMole).ToString());
                Assert.Equal("1 kg/lbmol", new MolarMass(1, MolarMassUnit.KilogramPerPoundMole).ToString());
                Assert.Equal("1 klb/kgmol", new MolarMass(1, MolarMassUnit.KilopoundPerKilomole).ToString());
                Assert.Equal("1 klb/gmol", new MolarMass(1, MolarMassUnit.KilopoundPerMole).ToString());
                Assert.Equal("1 klb/lbmol", new MolarMass(1, MolarMassUnit.KilopoundPerPoundMole).ToString());
                Assert.Equal("1 µg/kgmol", new MolarMass(1, MolarMassUnit.MicrogramPerKilomole).ToString());
                Assert.Equal("1 µg/gmol", new MolarMass(1, MolarMassUnit.MicrogramPerMole).ToString());
                Assert.Equal("1 mg/kgmol", new MolarMass(1, MolarMassUnit.MilligramPerKilomole).ToString());
                Assert.Equal("1 mg/gmol", new MolarMass(1, MolarMassUnit.MilligramPerMole).ToString());
                Assert.Equal("1 ng/kgmol", new MolarMass(1, MolarMassUnit.NanogramPerKilomole).ToString());
                Assert.Equal("1 ng/gmol", new MolarMass(1, MolarMassUnit.NanogramPerMole).ToString());
                Assert.Equal("1 lb/kgmol", new MolarMass(1, MolarMassUnit.PoundPerKilomole).ToString());
                Assert.Equal("1 lb/gmol", new MolarMass(1, MolarMassUnit.PoundPerMole).ToString());
                Assert.Equal("1 lb/lbmol", new MolarMass(1, MolarMassUnit.PoundPerPoundMole).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/kgmol", new MolarMass(1, MolarMassUnit.CentigramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 cg/gmol", new MolarMass(1, MolarMassUnit.CentigramPerMole).ToString(swedishCulture));
            Assert.Equal("1 dag/kgmol", new MolarMass(1, MolarMassUnit.DecagramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 dag/gmol", new MolarMass(1, MolarMassUnit.DecagramPerMole).ToString(swedishCulture));
            Assert.Equal("1 dg/kgmol", new MolarMass(1, MolarMassUnit.DecigramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 dg/gmol", new MolarMass(1, MolarMassUnit.DecigramPerMole).ToString(swedishCulture));
            Assert.Equal("1 g/kgmol", new MolarMass(1, MolarMassUnit.GramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 g/gmol", new MolarMass(1, MolarMassUnit.GramPerMole).ToString(swedishCulture));
            Assert.Equal("1 g/lbmol", new MolarMass(1, MolarMassUnit.GramPerPoundMole).ToString(swedishCulture));
            Assert.Equal("1 hg/kgmol", new MolarMass(1, MolarMassUnit.HectogramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 hg/gmol", new MolarMass(1, MolarMassUnit.HectogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 kg/kgmol", new MolarMass(1, MolarMassUnit.KilogramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 kg/gmol", new MolarMass(1, MolarMassUnit.KilogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 kg/lbmol", new MolarMass(1, MolarMassUnit.KilogramPerPoundMole).ToString(swedishCulture));
            Assert.Equal("1 klb/kgmol", new MolarMass(1, MolarMassUnit.KilopoundPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 klb/gmol", new MolarMass(1, MolarMassUnit.KilopoundPerMole).ToString(swedishCulture));
            Assert.Equal("1 klb/lbmol", new MolarMass(1, MolarMassUnit.KilopoundPerPoundMole).ToString(swedishCulture));
            Assert.Equal("1 µg/kgmol", new MolarMass(1, MolarMassUnit.MicrogramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 µg/gmol", new MolarMass(1, MolarMassUnit.MicrogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 mg/kgmol", new MolarMass(1, MolarMassUnit.MilligramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 mg/gmol", new MolarMass(1, MolarMassUnit.MilligramPerMole).ToString(swedishCulture));
            Assert.Equal("1 ng/kgmol", new MolarMass(1, MolarMassUnit.NanogramPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 ng/gmol", new MolarMass(1, MolarMassUnit.NanogramPerMole).ToString(swedishCulture));
            Assert.Equal("1 lb/kgmol", new MolarMass(1, MolarMassUnit.PoundPerKilomole).ToString(swedishCulture));
            Assert.Equal("1 lb/gmol", new MolarMass(1, MolarMassUnit.PoundPerMole).ToString(swedishCulture));
            Assert.Equal("1 lb/lbmol", new MolarMass(1, MolarMassUnit.PoundPerPoundMole).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s1"));
                Assert.Equal("0.12 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s2"));
                Assert.Equal("0.123 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s3"));
                Assert.Equal("0.1235 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s1", culture));
            Assert.Equal("0.12 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s2", culture));
            Assert.Equal("0.123 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s3", culture));
            Assert.Equal("0.1235 kg/gmol", new MolarMass(0.123456, MolarMassUnit.KilogramPerMole).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MolarMass)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarMassUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(QuantityType.MolarMass, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(MolarMass.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(MolarMass.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarMass.FromKilogramsPerMole(1.0);
            Assert.Equal(new {MolarMass.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarMass.FromKilogramsPerMole(value);
            Assert.Equal(MolarMass.FromKilogramsPerMole(-value), -quantity);
        }
    }
}
