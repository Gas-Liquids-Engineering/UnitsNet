//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of EnthalpyMass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnthalpyMassTestsBase : QuantityTestsBase
    {
        protected abstract double BtusPerPoundInOneJoulePerKilogram { get; }
        protected abstract double CaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double JoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double KilojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegajoulesPerKilogramInOneJoulePerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtusPerPoundTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerKilogramTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnthalpyMass((double)0.0, EnthalpyMassUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new EnthalpyMass();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnthalpyMassUnit.JoulePerKilogram, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnthalpyMass(double.PositiveInfinity, EnthalpyMassUnit.JoulePerKilogram));
            Assert.Throws<ArgumentException>(() => new EnthalpyMass(double.NegativeInfinity, EnthalpyMassUnit.JoulePerKilogram));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new EnthalpyMass(double.NaN, EnthalpyMassUnit.JoulePerKilogram));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new EnthalpyMass(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new EnthalpyMass(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (EnthalpyMass) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void EnthalpyMass_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new EnthalpyMass(1, EnthalpyMassUnit.JoulePerKilogram);

            QuantityInfo<EnthalpyMassUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(EnthalpyMass.Zero, quantityInfo.Zero);
            Assert.Equal("EnthalpyMass", quantityInfo.Name);
            Assert.Equal(QuantityType.EnthalpyMass, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<EnthalpyMassUnit>().Except(new[] {EnthalpyMassUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void JoulePerKilogramToEnthalpyMassUnits()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtusPerPoundInOneJoulePerKilogram, jouleperkilogram.BtusPerPound, BtusPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.CaloriesPerGram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = EnthalpyMass.From(1, EnthalpyMassUnit.BtuPerPound);
            AssertEx.EqualTolerance(1, quantity00.BtusPerPound, BtusPerPoundTolerance);
            Assert.Equal(EnthalpyMassUnit.BtuPerPound, quantity00.Unit);

            var quantity01 = EnthalpyMass.From(1, EnthalpyMassUnit.CaloriePerGram);
            AssertEx.EqualTolerance(1, quantity01.CaloriesPerGram, CaloriesPerGramTolerance);
            Assert.Equal(EnthalpyMassUnit.CaloriePerGram, quantity01.Unit);

            var quantity02 = EnthalpyMass.From(1, EnthalpyMassUnit.JoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity02.JoulesPerKilogram, JoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.JoulePerKilogram, quantity02.Unit);

            var quantity03 = EnthalpyMass.From(1, EnthalpyMassUnit.KilocaloriePerGram);
            AssertEx.EqualTolerance(1, quantity03.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            Assert.Equal(EnthalpyMassUnit.KilocaloriePerGram, quantity03.Unit);

            var quantity04 = EnthalpyMass.From(1, EnthalpyMassUnit.KilojoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity04.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.KilojoulePerKilogram, quantity04.Unit);

            var quantity05 = EnthalpyMass.From(1, EnthalpyMassUnit.MegajoulePerKilogram);
            AssertEx.EqualTolerance(1, quantity05.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.MegajoulePerKilogram, quantity05.Unit);

        }

        [Fact]
        public void FromJoulesPerKilogram_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnthalpyMass.FromJoulesPerKilogram(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => EnthalpyMass.FromJoulesPerKilogram(double.NegativeInfinity));
        }

        [Fact]
        public void FromJoulesPerKilogram_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => EnthalpyMass.FromJoulesPerKilogram(double.NaN));
        }

        [Fact]
        public void As()
        {
            var jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtusPerPoundInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.BtuPerPound), BtusPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.CaloriePerGram), CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.JoulePerKilogram), JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.KilocaloriePerGram), KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.KilojoulePerKilogram), KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(EnthalpyMassUnit.MegajoulePerKilogram), MegajoulesPerKilogramTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new EnthalpyMass(value: 1, unit: EnthalpyMass.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);

            var btuperpoundQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.BtuPerPound);
            AssertEx.EqualTolerance(BtusPerPoundInOneJoulePerKilogram, (double)btuperpoundQuantity.Value, BtusPerPoundTolerance);
            Assert.Equal(EnthalpyMassUnit.BtuPerPound, btuperpoundQuantity.Unit);

            var caloriepergramQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.CaloriePerGram);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, (double)caloriepergramQuantity.Value, CaloriesPerGramTolerance);
            Assert.Equal(EnthalpyMassUnit.CaloriePerGram, caloriepergramQuantity.Unit);

            var jouleperkilogramQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.JoulePerKilogram);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, (double)jouleperkilogramQuantity.Value, JoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.JoulePerKilogram, jouleperkilogramQuantity.Unit);

            var kilocaloriepergramQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.KilocaloriePerGram);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, (double)kilocaloriepergramQuantity.Value, KilocaloriesPerGramTolerance);
            Assert.Equal(EnthalpyMassUnit.KilocaloriePerGram, kilocaloriepergramQuantity.Unit);

            var kilojouleperkilogramQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.KilojoulePerKilogram);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, (double)kilojouleperkilogramQuantity.Value, KilojoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.KilojoulePerKilogram, kilojouleperkilogramQuantity.Unit);

            var megajouleperkilogramQuantity = jouleperkilogram.ToUnit(EnthalpyMassUnit.MegajoulePerKilogram);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, (double)megajouleperkilogramQuantity.Value, MegajoulesPerKilogramTolerance);
            Assert.Equal(EnthalpyMassUnit.MegajoulePerKilogram, megajouleperkilogramQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = EnthalpyMass.FromJoulesPerKilogram(1).ToBaseUnit();
            Assert.Equal(EnthalpyMass.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromBtusPerPound(jouleperkilogram.BtusPerPound).JoulesPerKilogram, BtusPerPoundTolerance);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromCaloriesPerGram(jouleperkilogram.CaloriesPerGram).JoulesPerKilogram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromJoulesPerKilogram(jouleperkilogram.JoulesPerKilogram).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromKilocaloriesPerGram(jouleperkilogram.KilocaloriesPerGram).JoulesPerKilogram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromKilojoulesPerKilogram(jouleperkilogram.KilojoulesPerKilogram).JoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, EnthalpyMass.FromMegajoulesPerKilogram(jouleperkilogram.MegajoulesPerKilogram).JoulesPerKilogram, MegajoulesPerKilogramTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            EnthalpyMass v = EnthalpyMass.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (EnthalpyMass.FromJoulesPerKilogram(3)-v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (EnthalpyMass.FromJoulesPerKilogram(10)/5).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, EnthalpyMass.FromJoulesPerKilogram(10)/EnthalpyMass.FromJoulesPerKilogram(5), JoulesPerKilogramTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            EnthalpyMass oneJoulePerKilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            EnthalpyMass twoJoulesPerKilogram = EnthalpyMass.FromJoulesPerKilogram(2);

            Assert.True(oneJoulePerKilogram < twoJoulesPerKilogram);
            Assert.True(oneJoulePerKilogram <= twoJoulesPerKilogram);
            Assert.True(twoJoulesPerKilogram > oneJoulePerKilogram);
            Assert.True(twoJoulesPerKilogram >= oneJoulePerKilogram);

            Assert.False(oneJoulePerKilogram > twoJoulesPerKilogram);
            Assert.False(oneJoulePerKilogram >= twoJoulesPerKilogram);
            Assert.False(twoJoulesPerKilogram < oneJoulePerKilogram);
            Assert.False(twoJoulesPerKilogram <= oneJoulePerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.Equal(0, jouleperkilogram.CompareTo(jouleperkilogram));
            Assert.True(jouleperkilogram.CompareTo(EnthalpyMass.Zero) > 0);
            Assert.True(EnthalpyMass.Zero.CompareTo(jouleperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentException>(() => jouleperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => jouleperkilogram.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = EnthalpyMass.FromJoulesPerKilogram(1);
            var b = EnthalpyMass.FromJoulesPerKilogram(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = EnthalpyMass.FromJoulesPerKilogram(1);
            var b = EnthalpyMass.FromJoulesPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = EnthalpyMass.FromJoulesPerKilogram(1);
            object b = EnthalpyMass.FromJoulesPerKilogram(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.True(v.Equals(EnthalpyMass.FromJoulesPerKilogram(1), JoulesPerKilogramTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(EnthalpyMass.Zero, JoulesPerKilogramTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(EnthalpyMass.FromJoulesPerKilogram(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            EnthalpyMass jouleperkilogram = EnthalpyMass.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(EnthalpyMassUnit.Undefined, EnthalpyMass.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(EnthalpyMassUnit)).Cast<EnthalpyMassUnit>();
            foreach(var unit in units)
            {
                if(unit == EnthalpyMassUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(EnthalpyMass.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 btu/lb", new EnthalpyMass(1, EnthalpyMassUnit.BtuPerPound).ToString());
                Assert.Equal("1 cal/g", new EnthalpyMass(1, EnthalpyMassUnit.CaloriePerGram).ToString());
                Assert.Equal("1 J/kg", new EnthalpyMass(1, EnthalpyMassUnit.JoulePerKilogram).ToString());
                Assert.Equal("1 kcal/g", new EnthalpyMass(1, EnthalpyMassUnit.KilocaloriePerGram).ToString());
                Assert.Equal("1 kJ/kg", new EnthalpyMass(1, EnthalpyMassUnit.KilojoulePerKilogram).ToString());
                Assert.Equal("1 MJ/kg", new EnthalpyMass(1, EnthalpyMassUnit.MegajoulePerKilogram).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 btu/lb", new EnthalpyMass(1, EnthalpyMassUnit.BtuPerPound).ToString(swedishCulture));
            Assert.Equal("1 cal/g", new EnthalpyMass(1, EnthalpyMassUnit.CaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 J/kg", new EnthalpyMass(1, EnthalpyMassUnit.JoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kcal/g", new EnthalpyMass(1, EnthalpyMassUnit.KilocaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 kJ/kg", new EnthalpyMass(1, EnthalpyMassUnit.KilojoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MJ/kg", new EnthalpyMass(1, EnthalpyMassUnit.MegajoulePerKilogram).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s1"));
                Assert.Equal("0.12 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s2"));
                Assert.Equal("0.123 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s3"));
                Assert.Equal("0.1235 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s1", culture));
            Assert.Equal("0.12 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s2", culture));
            Assert.Equal("0.123 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s3", culture));
            Assert.Equal("0.1235 J/kg", new EnthalpyMass(0.123456, EnthalpyMassUnit.JoulePerKilogram).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(EnthalpyMass)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(EnthalpyMassUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(QuantityType.EnthalpyMass, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(EnthalpyMass.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(EnthalpyMass.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(1.0);
            Assert.Equal(new {EnthalpyMass.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = EnthalpyMass.FromJoulesPerKilogram(value);
            Assert.Equal(EnthalpyMass.FromJoulesPerKilogram(-value), -quantity);
        }
    }
}
