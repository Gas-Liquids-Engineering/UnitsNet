//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Time.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class TimeTestsBase : QuantityTestsBase
    {
        protected abstract double CentisecondsInOneSecond { get; }
        protected abstract double FeetPerSecondInOneSecond { get; }
        protected abstract double DecisecondsInOneSecond { get; }
        protected abstract double HoursInOneSecond { get; }
        protected abstract double KilosecondsInOneSecond { get; }
        protected abstract double MicrosecondsInOneSecond { get; }
        protected abstract double MillisecondsInOneSecond { get; }
        protected abstract double MinutesInOneSecond { get; }
        protected abstract double NanosecondsInOneSecond { get; }
        protected abstract double SecondsInOneSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentisecondsTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecisecondsTolerance { get { return 1e-5; } }
        protected virtual double HoursTolerance { get { return 1e-5; } }
        protected virtual double KilosecondsTolerance { get { return 1e-5; } }
        protected virtual double MicrosecondsTolerance { get { return 1e-5; } }
        protected virtual double MillisecondsTolerance { get { return 1e-5; } }
        protected virtual double MinutesTolerance { get { return 1e-5; } }
        protected virtual double NanosecondsTolerance { get { return 1e-5; } }
        protected virtual double SecondsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Time((double)0.0, TimeUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Time();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(TimeUnit.Second, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Time(double.PositiveInfinity, TimeUnit.Second));
            Assert.Throws<ArgumentException>(() => new Time(double.NegativeInfinity, TimeUnit.Second));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new Time(double.NaN, TimeUnit.Second));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Time(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new Time(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (Time) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void Time_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Time(1, TimeUnit.Second);

            QuantityInfo<TimeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Time.Zero, quantityInfo.Zero);
            Assert.Equal("Time", quantityInfo.Name);
            Assert.Equal(QuantityType.Time, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<TimeUnit>().Except(new[] {TimeUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void SecondToTimeUnits()
        {
            Time second = Time.FromSeconds(1);
            AssertEx.EqualTolerance(CentisecondsInOneSecond, second.Centiseconds, CentisecondsTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneSecond, second.FeetPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(DecisecondsInOneSecond, second.Deciseconds, DecisecondsTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.Hours, HoursTolerance);
            AssertEx.EqualTolerance(KilosecondsInOneSecond, second.Kiloseconds, KilosecondsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.Microseconds, MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.Milliseconds, MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.Minutes, MinutesTolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.Nanoseconds, NanosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.Seconds, SecondsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Time.From(1, TimeUnit.Centisecond);
            AssertEx.EqualTolerance(1, quantity00.Centiseconds, CentisecondsTolerance);
            Assert.Equal(TimeUnit.Centisecond, quantity00.Unit);

            var quantity01 = Time.From(1, TimeUnit.Day);
            AssertEx.EqualTolerance(1, quantity01.FeetPerSecond, FeetPerSecondTolerance);
            Assert.Equal(TimeUnit.Day, quantity01.Unit);

            var quantity02 = Time.From(1, TimeUnit.Decisecond);
            AssertEx.EqualTolerance(1, quantity02.Deciseconds, DecisecondsTolerance);
            Assert.Equal(TimeUnit.Decisecond, quantity02.Unit);

            var quantity03 = Time.From(1, TimeUnit.Hour);
            AssertEx.EqualTolerance(1, quantity03.Hours, HoursTolerance);
            Assert.Equal(TimeUnit.Hour, quantity03.Unit);

            var quantity04 = Time.From(1, TimeUnit.Kilosecond);
            AssertEx.EqualTolerance(1, quantity04.Kiloseconds, KilosecondsTolerance);
            Assert.Equal(TimeUnit.Kilosecond, quantity04.Unit);

            var quantity05 = Time.From(1, TimeUnit.Microsecond);
            AssertEx.EqualTolerance(1, quantity05.Microseconds, MicrosecondsTolerance);
            Assert.Equal(TimeUnit.Microsecond, quantity05.Unit);

            var quantity06 = Time.From(1, TimeUnit.Millisecond);
            AssertEx.EqualTolerance(1, quantity06.Milliseconds, MillisecondsTolerance);
            Assert.Equal(TimeUnit.Millisecond, quantity06.Unit);

            var quantity07 = Time.From(1, TimeUnit.Minute);
            AssertEx.EqualTolerance(1, quantity07.Minutes, MinutesTolerance);
            Assert.Equal(TimeUnit.Minute, quantity07.Unit);

            var quantity08 = Time.From(1, TimeUnit.Nanosecond);
            AssertEx.EqualTolerance(1, quantity08.Nanoseconds, NanosecondsTolerance);
            Assert.Equal(TimeUnit.Nanosecond, quantity08.Unit);

            var quantity09 = Time.From(1, TimeUnit.Second);
            AssertEx.EqualTolerance(1, quantity09.Seconds, SecondsTolerance);
            Assert.Equal(TimeUnit.Second, quantity09.Unit);

        }

        [Fact]
        public void FromSeconds_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Time.FromSeconds(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => Time.FromSeconds(double.NegativeInfinity));
        }

        [Fact]
        public void FromSeconds_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => Time.FromSeconds(double.NaN));
        }

        [Fact]
        public void As()
        {
            var second = Time.FromSeconds(1);
            AssertEx.EqualTolerance(CentisecondsInOneSecond, second.As(TimeUnit.Centisecond), CentisecondsTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneSecond, second.As(TimeUnit.Day), FeetPerSecondTolerance);
            AssertEx.EqualTolerance(DecisecondsInOneSecond, second.As(TimeUnit.Decisecond), DecisecondsTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.As(TimeUnit.Hour), HoursTolerance);
            AssertEx.EqualTolerance(KilosecondsInOneSecond, second.As(TimeUnit.Kilosecond), KilosecondsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.As(TimeUnit.Microsecond), MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.As(TimeUnit.Millisecond), MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.As(TimeUnit.Minute), MinutesTolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.As(TimeUnit.Nanosecond), NanosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.As(TimeUnit.Second), SecondsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Time(value: 1, unit: Time.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var second = Time.FromSeconds(1);

            var centisecondQuantity = second.ToUnit(TimeUnit.Centisecond);
            AssertEx.EqualTolerance(CentisecondsInOneSecond, (double)centisecondQuantity.Value, CentisecondsTolerance);
            Assert.Equal(TimeUnit.Centisecond, centisecondQuantity.Unit);

            var dayQuantity = second.ToUnit(TimeUnit.Day);
            AssertEx.EqualTolerance(FeetPerSecondInOneSecond, (double)dayQuantity.Value, FeetPerSecondTolerance);
            Assert.Equal(TimeUnit.Day, dayQuantity.Unit);

            var decisecondQuantity = second.ToUnit(TimeUnit.Decisecond);
            AssertEx.EqualTolerance(DecisecondsInOneSecond, (double)decisecondQuantity.Value, DecisecondsTolerance);
            Assert.Equal(TimeUnit.Decisecond, decisecondQuantity.Unit);

            var hourQuantity = second.ToUnit(TimeUnit.Hour);
            AssertEx.EqualTolerance(HoursInOneSecond, (double)hourQuantity.Value, HoursTolerance);
            Assert.Equal(TimeUnit.Hour, hourQuantity.Unit);

            var kilosecondQuantity = second.ToUnit(TimeUnit.Kilosecond);
            AssertEx.EqualTolerance(KilosecondsInOneSecond, (double)kilosecondQuantity.Value, KilosecondsTolerance);
            Assert.Equal(TimeUnit.Kilosecond, kilosecondQuantity.Unit);

            var microsecondQuantity = second.ToUnit(TimeUnit.Microsecond);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, (double)microsecondQuantity.Value, MicrosecondsTolerance);
            Assert.Equal(TimeUnit.Microsecond, microsecondQuantity.Unit);

            var millisecondQuantity = second.ToUnit(TimeUnit.Millisecond);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, (double)millisecondQuantity.Value, MillisecondsTolerance);
            Assert.Equal(TimeUnit.Millisecond, millisecondQuantity.Unit);

            var minuteQuantity = second.ToUnit(TimeUnit.Minute);
            AssertEx.EqualTolerance(MinutesInOneSecond, (double)minuteQuantity.Value, MinutesTolerance);
            Assert.Equal(TimeUnit.Minute, minuteQuantity.Unit);

            var nanosecondQuantity = second.ToUnit(TimeUnit.Nanosecond);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, (double)nanosecondQuantity.Value, NanosecondsTolerance);
            Assert.Equal(TimeUnit.Nanosecond, nanosecondQuantity.Unit);

            var secondQuantity = second.ToUnit(TimeUnit.Second);
            AssertEx.EqualTolerance(SecondsInOneSecond, (double)secondQuantity.Value, SecondsTolerance);
            Assert.Equal(TimeUnit.Second, secondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = Time.FromSeconds(1).ToBaseUnit();
            Assert.Equal(Time.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Time second = Time.FromSeconds(1);
            AssertEx.EqualTolerance(1, Time.FromCentiseconds(second.Centiseconds).Seconds, CentisecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromFeetPerSecond(second.FeetPerSecond).Seconds, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Time.FromDeciseconds(second.Deciseconds).Seconds, DecisecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromHours(second.Hours).Seconds, HoursTolerance);
            AssertEx.EqualTolerance(1, Time.FromKiloseconds(second.Kiloseconds).Seconds, KilosecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromMicroseconds(second.Microseconds).Seconds, MicrosecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromMilliseconds(second.Milliseconds).Seconds, MillisecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromMinutes(second.Minutes).Seconds, MinutesTolerance);
            AssertEx.EqualTolerance(1, Time.FromNanoseconds(second.Nanoseconds).Seconds, NanosecondsTolerance);
            AssertEx.EqualTolerance(1, Time.FromSeconds(second.Seconds).Seconds, SecondsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Time v = Time.FromSeconds(1);
            AssertEx.EqualTolerance(-1, -v.Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (Time.FromSeconds(3)-v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (Time.FromSeconds(10)/5).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, Time.FromSeconds(10)/Time.FromSeconds(5), SecondsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Time oneSecond = Time.FromSeconds(1);
            Time twoSeconds = Time.FromSeconds(2);

            Assert.True(oneSecond < twoSeconds);
            Assert.True(oneSecond <= twoSeconds);
            Assert.True(twoSeconds > oneSecond);
            Assert.True(twoSeconds >= oneSecond);

            Assert.False(oneSecond > twoSeconds);
            Assert.False(oneSecond >= twoSeconds);
            Assert.False(twoSeconds < oneSecond);
            Assert.False(twoSeconds <= oneSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Time second = Time.FromSeconds(1);
            Assert.Equal(0, second.CompareTo(second));
            Assert.True(second.CompareTo(Time.Zero) > 0);
            Assert.True(Time.Zero.CompareTo(second) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Time second = Time.FromSeconds(1);
            Assert.Throws<ArgumentException>(() => second.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Time second = Time.FromSeconds(1);
            Assert.Throws<ArgumentNullException>(() => second.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = Time.FromSeconds(1);
            var b = Time.FromSeconds(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = Time.FromSeconds(1);
            var b = Time.FromSeconds(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = Time.FromSeconds(1);
            object b = Time.FromSeconds(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Time.FromSeconds(1);
            Assert.True(v.Equals(Time.FromSeconds(1), SecondsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Time.Zero, SecondsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Time.FromSeconds(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Time.FromSeconds(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Time second = Time.FromSeconds(1);
            Assert.False(second.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Time second = Time.FromSeconds(1);
            Assert.False(second.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(TimeUnit.Undefined, Time.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(TimeUnit)).Cast<TimeUnit>();
            foreach(var unit in units)
            {
                if(unit == TimeUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Time.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cs", new Time(1, TimeUnit.Centisecond).ToString());
                Assert.Equal("1 d", new Time(1, TimeUnit.Day).ToString());
                Assert.Equal("1 ds", new Time(1, TimeUnit.Decisecond).ToString());
                Assert.Equal("1 h", new Time(1, TimeUnit.Hour).ToString());
                Assert.Equal("1 ks", new Time(1, TimeUnit.Kilosecond).ToString());
                Assert.Equal("1 µs", new Time(1, TimeUnit.Microsecond).ToString());
                Assert.Equal("1 ms", new Time(1, TimeUnit.Millisecond).ToString());
                Assert.Equal("1 min", new Time(1, TimeUnit.Minute).ToString());
                Assert.Equal("1 ns", new Time(1, TimeUnit.Nanosecond).ToString());
                Assert.Equal("1 s", new Time(1, TimeUnit.Second).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cs", new Time(1, TimeUnit.Centisecond).ToString(swedishCulture));
            Assert.Equal("1 d", new Time(1, TimeUnit.Day).ToString(swedishCulture));
            Assert.Equal("1 ds", new Time(1, TimeUnit.Decisecond).ToString(swedishCulture));
            Assert.Equal("1 h", new Time(1, TimeUnit.Hour).ToString(swedishCulture));
            Assert.Equal("1 ks", new Time(1, TimeUnit.Kilosecond).ToString(swedishCulture));
            Assert.Equal("1 µs", new Time(1, TimeUnit.Microsecond).ToString(swedishCulture));
            Assert.Equal("1 ms", new Time(1, TimeUnit.Millisecond).ToString(swedishCulture));
            Assert.Equal("1 min", new Time(1, TimeUnit.Minute).ToString(swedishCulture));
            Assert.Equal("1 ns", new Time(1, TimeUnit.Nanosecond).ToString(swedishCulture));
            Assert.Equal("1 s", new Time(1, TimeUnit.Second).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 s", new Time(0.123456, TimeUnit.Second).ToString("s1"));
                Assert.Equal("0.12 s", new Time(0.123456, TimeUnit.Second).ToString("s2"));
                Assert.Equal("0.123 s", new Time(0.123456, TimeUnit.Second).ToString("s3"));
                Assert.Equal("0.1235 s", new Time(0.123456, TimeUnit.Second).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 s", new Time(0.123456, TimeUnit.Second).ToString("s1", culture));
            Assert.Equal("0.12 s", new Time(0.123456, TimeUnit.Second).ToString("s2", culture));
            Assert.Equal("0.123 s", new Time(0.123456, TimeUnit.Second).ToString("s3", culture));
            Assert.Equal("0.1235 s", new Time(0.123456, TimeUnit.Second).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Time)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(TimeUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(QuantityType.Time, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(Time.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(Time.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Time.FromSeconds(1.0);
            Assert.Equal(new {Time.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Time.FromSeconds(value);
            Assert.Equal(Time.FromSeconds(-value), -quantity);
        }
    }
}
