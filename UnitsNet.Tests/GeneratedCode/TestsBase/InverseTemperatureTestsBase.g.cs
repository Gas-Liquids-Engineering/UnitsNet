//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of InverseTemperature.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class InverseTemperatureTestsBase : QuantityTestsBase
    {
        protected abstract double InverseDegreesCelsiusInOneInverseKelvin { get; }
        protected abstract double InverseDegreesFahrenheitInOneInverseKelvin { get; }
        protected abstract double InverseDegreesRankineInOneInverseKelvin { get; }
        protected abstract double InverseKelvinsInOneInverseKelvin { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double InverseDegreesCelsiusTolerance { get { return 1e-5; } }
        protected virtual double InverseDegreesFahrenheitTolerance { get { return 1e-5; } }
        protected virtual double InverseDegreesRankineTolerance { get { return 1e-5; } }
        protected virtual double InverseKelvinsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseTemperature((double)0.0, InverseTemperatureUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new InverseTemperature();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(InverseTemperatureUnit.InverseKelvin, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseTemperature(double.PositiveInfinity, InverseTemperatureUnit.InverseKelvin));
            Assert.Throws<ArgumentException>(() => new InverseTemperature(double.NegativeInfinity, InverseTemperatureUnit.InverseKelvin));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseTemperature(double.NaN, InverseTemperatureUnit.InverseKelvin));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new InverseTemperature(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new InverseTemperature(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (InverseTemperature) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void InverseTemperature_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new InverseTemperature(1, InverseTemperatureUnit.InverseKelvin);

            QuantityInfo<InverseTemperatureUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(InverseTemperature.Zero, quantityInfo.Zero);
            Assert.Equal("InverseTemperature", quantityInfo.Name);
            Assert.Equal(QuantityType.InverseTemperature, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<InverseTemperatureUnit>().Except(new[] {InverseTemperatureUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void InverseKelvinToInverseTemperatureUnits()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            AssertEx.EqualTolerance(InverseDegreesCelsiusInOneInverseKelvin, inversekelvin.InverseDegreesCelsius, InverseDegreesCelsiusTolerance);
            AssertEx.EqualTolerance(InverseDegreesFahrenheitInOneInverseKelvin, inversekelvin.InverseDegreesFahrenheit, InverseDegreesFahrenheitTolerance);
            AssertEx.EqualTolerance(InverseDegreesRankineInOneInverseKelvin, inversekelvin.InverseDegreesRankine, InverseDegreesRankineTolerance);
            AssertEx.EqualTolerance(InverseKelvinsInOneInverseKelvin, inversekelvin.InverseKelvins, InverseKelvinsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = InverseTemperature.From(1, InverseTemperatureUnit.InverseDegreeCelsius);
            AssertEx.EqualTolerance(1, quantity00.InverseDegreesCelsius, InverseDegreesCelsiusTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeCelsius, quantity00.Unit);

            var quantity01 = InverseTemperature.From(1, InverseTemperatureUnit.InverseDegreeFahrenheit);
            AssertEx.EqualTolerance(1, quantity01.InverseDegreesFahrenheit, InverseDegreesFahrenheitTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeFahrenheit, quantity01.Unit);

            var quantity02 = InverseTemperature.From(1, InverseTemperatureUnit.InverseDegreeRankine);
            AssertEx.EqualTolerance(1, quantity02.InverseDegreesRankine, InverseDegreesRankineTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeRankine, quantity02.Unit);

            var quantity03 = InverseTemperature.From(1, InverseTemperatureUnit.InverseKelvin);
            AssertEx.EqualTolerance(1, quantity03.InverseKelvins, InverseKelvinsTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseKelvin, quantity03.Unit);

        }

        [Fact]
        public void FromInverseKelvins_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseTemperature.FromInverseKelvins(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => InverseTemperature.FromInverseKelvins(double.NegativeInfinity));
        }

        [Fact]
        public void FromInverseKelvins_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseTemperature.FromInverseKelvins(double.NaN));
        }

        [Fact]
        public void As()
        {
            var inversekelvin = InverseTemperature.FromInverseKelvins(1);
            AssertEx.EqualTolerance(InverseDegreesCelsiusInOneInverseKelvin, inversekelvin.As(InverseTemperatureUnit.InverseDegreeCelsius), InverseDegreesCelsiusTolerance);
            AssertEx.EqualTolerance(InverseDegreesFahrenheitInOneInverseKelvin, inversekelvin.As(InverseTemperatureUnit.InverseDegreeFahrenheit), InverseDegreesFahrenheitTolerance);
            AssertEx.EqualTolerance(InverseDegreesRankineInOneInverseKelvin, inversekelvin.As(InverseTemperatureUnit.InverseDegreeRankine), InverseDegreesRankineTolerance);
            AssertEx.EqualTolerance(InverseKelvinsInOneInverseKelvin, inversekelvin.As(InverseTemperatureUnit.InverseKelvin), InverseKelvinsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new InverseTemperature(value: 1, unit: InverseTemperature.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var inversekelvin = InverseTemperature.FromInverseKelvins(1);

            var inversedegreecelsiusQuantity = inversekelvin.ToUnit(InverseTemperatureUnit.InverseDegreeCelsius);
            AssertEx.EqualTolerance(InverseDegreesCelsiusInOneInverseKelvin, (double)inversedegreecelsiusQuantity.Value, InverseDegreesCelsiusTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeCelsius, inversedegreecelsiusQuantity.Unit);

            var inversedegreefahrenheitQuantity = inversekelvin.ToUnit(InverseTemperatureUnit.InverseDegreeFahrenheit);
            AssertEx.EqualTolerance(InverseDegreesFahrenheitInOneInverseKelvin, (double)inversedegreefahrenheitQuantity.Value, InverseDegreesFahrenheitTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeFahrenheit, inversedegreefahrenheitQuantity.Unit);

            var inversedegreerankineQuantity = inversekelvin.ToUnit(InverseTemperatureUnit.InverseDegreeRankine);
            AssertEx.EqualTolerance(InverseDegreesRankineInOneInverseKelvin, (double)inversedegreerankineQuantity.Value, InverseDegreesRankineTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseDegreeRankine, inversedegreerankineQuantity.Unit);

            var inversekelvinQuantity = inversekelvin.ToUnit(InverseTemperatureUnit.InverseKelvin);
            AssertEx.EqualTolerance(InverseKelvinsInOneInverseKelvin, (double)inversekelvinQuantity.Value, InverseKelvinsTolerance);
            Assert.Equal(InverseTemperatureUnit.InverseKelvin, inversekelvinQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = InverseTemperature.FromInverseKelvins(1).ToBaseUnit();
            Assert.Equal(InverseTemperature.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            AssertEx.EqualTolerance(1, InverseTemperature.FromInverseDegreesCelsius(inversekelvin.InverseDegreesCelsius).InverseKelvins, InverseDegreesCelsiusTolerance);
            AssertEx.EqualTolerance(1, InverseTemperature.FromInverseDegreesFahrenheit(inversekelvin.InverseDegreesFahrenheit).InverseKelvins, InverseDegreesFahrenheitTolerance);
            AssertEx.EqualTolerance(1, InverseTemperature.FromInverseDegreesRankine(inversekelvin.InverseDegreesRankine).InverseKelvins, InverseDegreesRankineTolerance);
            AssertEx.EqualTolerance(1, InverseTemperature.FromInverseKelvins(inversekelvin.InverseKelvins).InverseKelvins, InverseKelvinsTolerance);
        }


        [Fact]
        public void ComparisonOperators()
        {
            InverseTemperature oneInverseKelvin = InverseTemperature.FromInverseKelvins(1);
            InverseTemperature twoInverseKelvins = InverseTemperature.FromInverseKelvins(2);

            Assert.True(oneInverseKelvin < twoInverseKelvins);
            Assert.True(oneInverseKelvin <= twoInverseKelvins);
            Assert.True(twoInverseKelvins > oneInverseKelvin);
            Assert.True(twoInverseKelvins >= oneInverseKelvin);

            Assert.False(oneInverseKelvin > twoInverseKelvins);
            Assert.False(oneInverseKelvin >= twoInverseKelvins);
            Assert.False(twoInverseKelvins < oneInverseKelvin);
            Assert.False(twoInverseKelvins <= oneInverseKelvin);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            Assert.Equal(0, inversekelvin.CompareTo(inversekelvin));
            Assert.True(inversekelvin.CompareTo(InverseTemperature.Zero) > 0);
            Assert.True(InverseTemperature.Zero.CompareTo(inversekelvin) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            Assert.Throws<ArgumentException>(() => inversekelvin.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            Assert.Throws<ArgumentNullException>(() => inversekelvin.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = InverseTemperature.FromInverseKelvins(1);
            var b = InverseTemperature.FromInverseKelvins(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = InverseTemperature.FromInverseKelvins(1);
            var b = InverseTemperature.FromInverseKelvins(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = InverseTemperature.FromInverseKelvins(1);
            object b = InverseTemperature.FromInverseKelvins(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = InverseTemperature.FromInverseKelvins(1);
            Assert.True(v.Equals(InverseTemperature.FromInverseKelvins(1), InverseKelvinsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(InverseTemperature.Zero, InverseKelvinsTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = InverseTemperature.FromInverseKelvins(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(InverseTemperature.FromInverseKelvins(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            Assert.False(inversekelvin.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            InverseTemperature inversekelvin = InverseTemperature.FromInverseKelvins(1);
            Assert.False(inversekelvin.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(InverseTemperatureUnit.Undefined, InverseTemperature.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(InverseTemperatureUnit)).Cast<InverseTemperatureUnit>();
            foreach(var unit in units)
            {
                if(unit == InverseTemperatureUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(InverseTemperature.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 1/°C", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeCelsius).ToString());
                Assert.Equal("1 1/°F", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeFahrenheit).ToString());
                Assert.Equal("1 1/°R", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeRankine).ToString());
                Assert.Equal("1 1/K", new InverseTemperature(1, InverseTemperatureUnit.InverseKelvin).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 1/°C", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeCelsius).ToString(swedishCulture));
            Assert.Equal("1 1/°F", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeFahrenheit).ToString(swedishCulture));
            Assert.Equal("1 1/°R", new InverseTemperature(1, InverseTemperatureUnit.InverseDegreeRankine).ToString(swedishCulture));
            Assert.Equal("1 1/K", new InverseTemperature(1, InverseTemperatureUnit.InverseKelvin).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s1"));
                Assert.Equal("0.12 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s2"));
                Assert.Equal("0.123 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s3"));
                Assert.Equal("0.1235 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s1", culture));
            Assert.Equal("0.12 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s2", culture));
            Assert.Equal("0.123 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s3", culture));
            Assert.Equal("0.1235 1/K", new InverseTemperature(0.123456, InverseTemperatureUnit.InverseKelvin).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(InverseTemperature)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(InverseTemperatureUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(QuantityType.InverseTemperature, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(InverseTemperature.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(InverseTemperature.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = InverseTemperature.FromInverseKelvins(1.0);
            Assert.Equal(new {InverseTemperature.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

    }
}
