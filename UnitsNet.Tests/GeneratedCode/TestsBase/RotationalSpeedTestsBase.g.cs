//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalSpeed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalSpeedTestsBase : QuantityTestsBase
    {
        protected abstract double CentiradiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double CentiradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DeciradiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double DeciradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DegreesPerHourInOneRadianPerSecond { get; }
        protected abstract double DegreesPerMinuteInOneRadianPerSecond { get; }
        protected abstract double DegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicrodegreesPerHourInOneRadianPerSecond { get; }
        protected abstract double MicrodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicroradiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double MicroradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double MillidegreesPerHourInOneRadianPerSecond { get; }
        protected abstract double MillidegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MilliradiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double MilliradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanodegreesPerHourInOneRadianPerSecond { get; }
        protected abstract double NanodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanoradiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double NanoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RadiansPerMinuteInOneRadianPerSecond { get; }
        protected abstract double RadiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerHourInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerMinuteInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerSecondInOneRadianPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentiradiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentiradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerHourTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesPerHourTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerHourTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed((double)0.0, RotationalSpeedUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RotationalSpeed();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.PositiveInfinity, RotationalSpeedUnit.RadianPerSecond));
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.NegativeInfinity, RotationalSpeedUnit.RadianPerSecond));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(double.NaN, RotationalSpeedUnit.RadianPerSecond));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RotationalSpeed(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new RotationalSpeed(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (RotationalSpeed) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void RotationalSpeed_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond);

            QuantityInfo<RotationalSpeedUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(RotationalSpeed.Zero, quantityInfo.Zero);
            Assert.Equal("RotationalSpeed", quantityInfo.Name);
            Assert.Equal(QuantityType.RotationalSpeed, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<RotationalSpeedUnit>().Except(new[] {RotationalSpeedUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void RadianPerSecondToRotationalSpeedUnits()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentiradiansPerMinuteInOneRadianPerSecond, radianpersecond.CentiradiansPerMinute, CentiradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.CentiradiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerMinuteInOneRadianPerSecond, radianpersecond.DeciradiansPerMinute, DeciradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.DeciradiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerHourInOneRadianPerSecond, radianpersecond.DegreesPerHour, DegreesPerHourTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.DegreesPerMinute, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.DegreesPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerHourInOneRadianPerSecond, radianpersecond.MicrodegreesPerHour, MicrodegreesPerHourTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.MicrodegreesPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerMinuteInOneRadianPerSecond, radianpersecond.MicroradiansPerMinute, MicroradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.MicroradiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerHourInOneRadianPerSecond, radianpersecond.MillidegreesPerHour, MillidegreesPerHourTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.MillidegreesPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerMinuteInOneRadianPerSecond, radianpersecond.MilliradiansPerMinute, MilliradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.MilliradiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerHourInOneRadianPerSecond, radianpersecond.NanodegreesPerHour, NanodegreesPerHourTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.NanodegreesPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerMinuteInOneRadianPerSecond, radianpersecond.NanoradiansPerMinute, NanoradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.NanoradiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerMinuteInOneRadianPerSecond, radianpersecond.RadiansPerMinute, RadiansPerMinuteTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerHourInOneRadianPerSecond, radianpersecond.RevolutionsPerHour, RevolutionsPerHourTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.RevolutionsPerMinute, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.RevolutionsPerSecond, RevolutionsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RotationalSpeed.From(1, RotationalSpeedUnit.CentiradianPerMinute);
            AssertEx.EqualTolerance(1, quantity00.CentiradiansPerMinute, CentiradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerMinute, quantity00.Unit);

            var quantity01 = RotationalSpeed.From(1, RotationalSpeedUnit.CentiradianPerSecond);
            AssertEx.EqualTolerance(1, quantity01.CentiradiansPerSecond, CentiradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerSecond, quantity01.Unit);

            var quantity02 = RotationalSpeed.From(1, RotationalSpeedUnit.DeciradianPerMinute);
            AssertEx.EqualTolerance(1, quantity02.DeciradiansPerMinute, DeciradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerMinute, quantity02.Unit);

            var quantity03 = RotationalSpeed.From(1, RotationalSpeedUnit.DeciradianPerSecond);
            AssertEx.EqualTolerance(1, quantity03.DeciradiansPerSecond, DeciradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerSecond, quantity03.Unit);

            var quantity04 = RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerHour);
            AssertEx.EqualTolerance(1, quantity04.DegreesPerHour, DegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerHour, quantity04.Unit);

            var quantity05 = RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerMinute);
            AssertEx.EqualTolerance(1, quantity05.DegreesPerMinute, DegreesPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerMinute, quantity05.Unit);

            var quantity06 = RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerSecond);
            AssertEx.EqualTolerance(1, quantity06.DegreesPerSecond, DegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerSecond, quantity06.Unit);

            var quantity07 = RotationalSpeed.From(1, RotationalSpeedUnit.MicrodegreePerHour);
            AssertEx.EqualTolerance(1, quantity07.MicrodegreesPerHour, MicrodegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerHour, quantity07.Unit);

            var quantity08 = RotationalSpeed.From(1, RotationalSpeedUnit.MicrodegreePerSecond);
            AssertEx.EqualTolerance(1, quantity08.MicrodegreesPerSecond, MicrodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerSecond, quantity08.Unit);

            var quantity09 = RotationalSpeed.From(1, RotationalSpeedUnit.MicroradianPerMinute);
            AssertEx.EqualTolerance(1, quantity09.MicroradiansPerMinute, MicroradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerMinute, quantity09.Unit);

            var quantity10 = RotationalSpeed.From(1, RotationalSpeedUnit.MicroradianPerSecond);
            AssertEx.EqualTolerance(1, quantity10.MicroradiansPerSecond, MicroradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerSecond, quantity10.Unit);

            var quantity11 = RotationalSpeed.From(1, RotationalSpeedUnit.MillidegreePerHour);
            AssertEx.EqualTolerance(1, quantity11.MillidegreesPerHour, MillidegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerHour, quantity11.Unit);

            var quantity12 = RotationalSpeed.From(1, RotationalSpeedUnit.MillidegreePerSecond);
            AssertEx.EqualTolerance(1, quantity12.MillidegreesPerSecond, MillidegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerSecond, quantity12.Unit);

            var quantity13 = RotationalSpeed.From(1, RotationalSpeedUnit.MilliradianPerMinute);
            AssertEx.EqualTolerance(1, quantity13.MilliradiansPerMinute, MilliradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerMinute, quantity13.Unit);

            var quantity14 = RotationalSpeed.From(1, RotationalSpeedUnit.MilliradianPerSecond);
            AssertEx.EqualTolerance(1, quantity14.MilliradiansPerSecond, MilliradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerSecond, quantity14.Unit);

            var quantity15 = RotationalSpeed.From(1, RotationalSpeedUnit.NanodegreePerHour);
            AssertEx.EqualTolerance(1, quantity15.NanodegreesPerHour, NanodegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerHour, quantity15.Unit);

            var quantity16 = RotationalSpeed.From(1, RotationalSpeedUnit.NanodegreePerSecond);
            AssertEx.EqualTolerance(1, quantity16.NanodegreesPerSecond, NanodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerSecond, quantity16.Unit);

            var quantity17 = RotationalSpeed.From(1, RotationalSpeedUnit.NanoradianPerMinute);
            AssertEx.EqualTolerance(1, quantity17.NanoradiansPerMinute, NanoradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerMinute, quantity17.Unit);

            var quantity18 = RotationalSpeed.From(1, RotationalSpeedUnit.NanoradianPerSecond);
            AssertEx.EqualTolerance(1, quantity18.NanoradiansPerSecond, NanoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerSecond, quantity18.Unit);

            var quantity19 = RotationalSpeed.From(1, RotationalSpeedUnit.RadianPerMinute);
            AssertEx.EqualTolerance(1, quantity19.RadiansPerMinute, RadiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.RadianPerMinute, quantity19.Unit);

            var quantity20 = RotationalSpeed.From(1, RotationalSpeedUnit.RadianPerSecond);
            AssertEx.EqualTolerance(1, quantity20.RadiansPerSecond, RadiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, quantity20.Unit);

            var quantity21 = RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerHour);
            AssertEx.EqualTolerance(1, quantity21.RevolutionsPerHour, RevolutionsPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerHour, quantity21.Unit);

            var quantity22 = RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerMinute);
            AssertEx.EqualTolerance(1, quantity22.RevolutionsPerMinute, RevolutionsPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerMinute, quantity22.Unit);

            var quantity23 = RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerSecond);
            AssertEx.EqualTolerance(1, quantity23.RevolutionsPerSecond, RevolutionsPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerSecond, quantity23.Unit);

        }

        [Fact]
        public void FromRadiansPerSecond_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.NegativeInfinity));
        }

        [Fact]
        public void FromRadiansPerSecond_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => RotationalSpeed.FromRadiansPerSecond(double.NaN));
        }

        [Fact]
        public void As()
        {
            var radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentiradiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.CentiradianPerMinute), CentiradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.CentiradianPerSecond), CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DeciradianPerMinute), DeciradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DeciradianPerSecond), DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerHourInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerHour), DegreesPerHourTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerMinute), DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerSecond), DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerHourInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicrodegreePerHour), MicrodegreesPerHourTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicrodegreePerSecond), MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicroradianPerMinute), MicroradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicroradianPerSecond), MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerHourInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MillidegreePerHour), MillidegreesPerHourTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MillidegreePerSecond), MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MilliradianPerMinute), MilliradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MilliradianPerSecond), MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerHourInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanodegreePerHour), NanodegreesPerHourTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanodegreePerSecond), NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanoradianPerMinute), NanoradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanoradianPerSecond), NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RadianPerMinute), RadiansPerMinuteTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerHourInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerHour), RevolutionsPerHourTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerMinute), RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerSecond), RevolutionsPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);

            var centiradianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.CentiradianPerMinute);
            AssertEx.EqualTolerance(CentiradiansPerMinuteInOneRadianPerSecond, (double)centiradianperminuteQuantity.Value, CentiradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerMinute, centiradianperminuteQuantity.Unit);

            var centiradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.CentiradianPerSecond);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, (double)centiradianpersecondQuantity.Value, CentiradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerSecond, centiradianpersecondQuantity.Unit);

            var deciradianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DeciradianPerMinute);
            AssertEx.EqualTolerance(DeciradiansPerMinuteInOneRadianPerSecond, (double)deciradianperminuteQuantity.Value, DeciradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerMinute, deciradianperminuteQuantity.Unit);

            var deciradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DeciradianPerSecond);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, (double)deciradianpersecondQuantity.Value, DeciradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerSecond, deciradianpersecondQuantity.Unit);

            var degreeperhourQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DegreePerHour);
            AssertEx.EqualTolerance(DegreesPerHourInOneRadianPerSecond, (double)degreeperhourQuantity.Value, DegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerHour, degreeperhourQuantity.Unit);

            var degreeperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DegreePerMinute);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, (double)degreeperminuteQuantity.Value, DegreesPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerMinute, degreeperminuteQuantity.Unit);

            var degreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.DegreePerSecond);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, (double)degreepersecondQuantity.Value, DegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.DegreePerSecond, degreepersecondQuantity.Unit);

            var microdegreeperhourQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicrodegreePerHour);
            AssertEx.EqualTolerance(MicrodegreesPerHourInOneRadianPerSecond, (double)microdegreeperhourQuantity.Value, MicrodegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerHour, microdegreeperhourQuantity.Unit);

            var microdegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicrodegreePerSecond);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, (double)microdegreepersecondQuantity.Value, MicrodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerSecond, microdegreepersecondQuantity.Unit);

            var microradianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicroradianPerMinute);
            AssertEx.EqualTolerance(MicroradiansPerMinuteInOneRadianPerSecond, (double)microradianperminuteQuantity.Value, MicroradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerMinute, microradianperminuteQuantity.Unit);

            var microradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MicroradianPerSecond);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, (double)microradianpersecondQuantity.Value, MicroradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerSecond, microradianpersecondQuantity.Unit);

            var millidegreeperhourQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MillidegreePerHour);
            AssertEx.EqualTolerance(MillidegreesPerHourInOneRadianPerSecond, (double)millidegreeperhourQuantity.Value, MillidegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerHour, millidegreeperhourQuantity.Unit);

            var millidegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MillidegreePerSecond);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, (double)millidegreepersecondQuantity.Value, MillidegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerSecond, millidegreepersecondQuantity.Unit);

            var milliradianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MilliradianPerMinute);
            AssertEx.EqualTolerance(MilliradiansPerMinuteInOneRadianPerSecond, (double)milliradianperminuteQuantity.Value, MilliradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerMinute, milliradianperminuteQuantity.Unit);

            var milliradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.MilliradianPerSecond);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, (double)milliradianpersecondQuantity.Value, MilliradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerSecond, milliradianpersecondQuantity.Unit);

            var nanodegreeperhourQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanodegreePerHour);
            AssertEx.EqualTolerance(NanodegreesPerHourInOneRadianPerSecond, (double)nanodegreeperhourQuantity.Value, NanodegreesPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerHour, nanodegreeperhourQuantity.Unit);

            var nanodegreepersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanodegreePerSecond);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, (double)nanodegreepersecondQuantity.Value, NanodegreesPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerSecond, nanodegreepersecondQuantity.Unit);

            var nanoradianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanoradianPerMinute);
            AssertEx.EqualTolerance(NanoradiansPerMinuteInOneRadianPerSecond, (double)nanoradianperminuteQuantity.Value, NanoradiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerMinute, nanoradianperminuteQuantity.Unit);

            var nanoradianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.NanoradianPerSecond);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, (double)nanoradianpersecondQuantity.Value, NanoradiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerSecond, nanoradianpersecondQuantity.Unit);

            var radianperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RadianPerMinute);
            AssertEx.EqualTolerance(RadiansPerMinuteInOneRadianPerSecond, (double)radianperminuteQuantity.Value, RadiansPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.RadianPerMinute, radianperminuteQuantity.Unit);

            var radianpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RadianPerSecond);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, (double)radianpersecondQuantity.Value, RadiansPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, radianpersecondQuantity.Unit);

            var revolutionperhourQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RevolutionPerHour);
            AssertEx.EqualTolerance(RevolutionsPerHourInOneRadianPerSecond, (double)revolutionperhourQuantity.Value, RevolutionsPerHourTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerHour, revolutionperhourQuantity.Unit);

            var revolutionperminuteQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RevolutionPerMinute);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, (double)revolutionperminuteQuantity.Value, RevolutionsPerMinuteTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerMinute, revolutionperminuteQuantity.Unit);

            var revolutionpersecondQuantity = radianpersecond.ToUnit(RotationalSpeedUnit.RevolutionPerSecond);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, (double)revolutionpersecondQuantity.Value, RevolutionsPerSecondTolerance);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerSecond, revolutionpersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = RotationalSpeed.FromRadiansPerSecond(1).ToBaseUnit();
            Assert.Equal(RotationalSpeed.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromCentiradiansPerMinute(radianpersecond.CentiradiansPerMinute).RadiansPerSecond, CentiradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromCentiradiansPerSecond(radianpersecond.CentiradiansPerSecond).RadiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDeciradiansPerMinute(radianpersecond.DeciradiansPerMinute).RadiansPerSecond, DeciradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDeciradiansPerSecond(radianpersecond.DeciradiansPerSecond).RadiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDegreesPerHour(radianpersecond.DegreesPerHour).RadiansPerSecond, DegreesPerHourTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDegreesPerMinute(radianpersecond.DegreesPerMinute).RadiansPerSecond, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromDegreesPerSecond(radianpersecond.DegreesPerSecond).RadiansPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicrodegreesPerHour(radianpersecond.MicrodegreesPerHour).RadiansPerSecond, MicrodegreesPerHourTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicrodegreesPerSecond(radianpersecond.MicrodegreesPerSecond).RadiansPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicroradiansPerMinute(radianpersecond.MicroradiansPerMinute).RadiansPerSecond, MicroradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMicroradiansPerSecond(radianpersecond.MicroradiansPerSecond).RadiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMillidegreesPerHour(radianpersecond.MillidegreesPerHour).RadiansPerSecond, MillidegreesPerHourTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMillidegreesPerSecond(radianpersecond.MillidegreesPerSecond).RadiansPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMilliradiansPerMinute(radianpersecond.MilliradiansPerMinute).RadiansPerSecond, MilliradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromMilliradiansPerSecond(radianpersecond.MilliradiansPerSecond).RadiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanodegreesPerHour(radianpersecond.NanodegreesPerHour).RadiansPerSecond, NanodegreesPerHourTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanodegreesPerSecond(radianpersecond.NanodegreesPerSecond).RadiansPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanoradiansPerMinute(radianpersecond.NanoradiansPerMinute).RadiansPerSecond, NanoradiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromNanoradiansPerSecond(radianpersecond.NanoradiansPerSecond).RadiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRadiansPerMinute(radianpersecond.RadiansPerMinute).RadiansPerSecond, RadiansPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRadiansPerSecond(radianpersecond.RadiansPerSecond).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRevolutionsPerHour(radianpersecond.RevolutionsPerHour).RadiansPerSecond, RevolutionsPerHourTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRevolutionsPerMinute(radianpersecond.RevolutionsPerMinute).RadiansPerSecond, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, RotationalSpeed.FromRevolutionsPerSecond(radianpersecond.RevolutionsPerSecond).RadiansPerSecond, RevolutionsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalSpeed v = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RotationalSpeed.FromRadiansPerSecond(3)-v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RotationalSpeed.FromRadiansPerSecond(10)/5).RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(2, RotationalSpeed.FromRadiansPerSecond(10)/RotationalSpeed.FromRadiansPerSecond(5), RadiansPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalSpeed oneRadianPerSecond = RotationalSpeed.FromRadiansPerSecond(1);
            RotationalSpeed twoRadiansPerSecond = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(oneRadianPerSecond < twoRadiansPerSecond);
            Assert.True(oneRadianPerSecond <= twoRadiansPerSecond);
            Assert.True(twoRadiansPerSecond > oneRadianPerSecond);
            Assert.True(twoRadiansPerSecond >= oneRadianPerSecond);

            Assert.False(oneRadianPerSecond > twoRadiansPerSecond);
            Assert.False(oneRadianPerSecond >= twoRadiansPerSecond);
            Assert.False(twoRadiansPerSecond < oneRadianPerSecond);
            Assert.False(twoRadiansPerSecond <= oneRadianPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Equal(0, radianpersecond.CompareTo(radianpersecond));
            Assert.True(radianpersecond.CompareTo(RotationalSpeed.Zero) > 0);
            Assert.True(RotationalSpeed.Zero.CompareTo(radianpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentException>(() => radianpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => radianpersecond.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = RotationalSpeed.FromRadiansPerSecond(1);
            var b = RotationalSpeed.FromRadiansPerSecond(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = RotationalSpeed.FromRadiansPerSecond(1);
            var b = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = RotationalSpeed.FromRadiansPerSecond(1);
            object b = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.True(v.Equals(RotationalSpeed.FromRadiansPerSecond(1), RadiansPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RotationalSpeed.Zero, RadiansPerSecondTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(RotationalSpeed.FromRadiansPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(RotationalSpeedUnit.Undefined, RotationalSpeed.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(RotationalSpeedUnit)).Cast<RotationalSpeedUnit>();
            foreach(var unit in units)
            {
                if(unit == RotationalSpeedUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalSpeed.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 crad/min", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerMinute).ToString());
                Assert.Equal("1 crad/s", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerSecond).ToString());
                Assert.Equal("1 drad/min", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerMinute).ToString());
                Assert.Equal("1 drad/s", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerSecond).ToString());
                Assert.Equal("1 °/h", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerHour).ToString());
                Assert.Equal("1 °/min", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerMinute).ToString());
                Assert.Equal("1 °/s", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerSecond).ToString());
                Assert.Equal("1 µ°/h", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerHour).ToString());
                Assert.Equal("1 µ°/s", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerSecond).ToString());
                Assert.Equal("1 µrad/min", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerMinute).ToString());
                Assert.Equal("1 µrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerSecond).ToString());
                Assert.Equal("1 m°/h", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerHour).ToString());
                Assert.Equal("1 m°/s", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerSecond).ToString());
                Assert.Equal("1 mrad/min", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerMinute).ToString());
                Assert.Equal("1 mrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerSecond).ToString());
                Assert.Equal("1 n°/h", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerHour).ToString());
                Assert.Equal("1 n°/s", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerSecond).ToString());
                Assert.Equal("1 nrad/min", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerMinute).ToString());
                Assert.Equal("1 nrad/s", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerSecond).ToString());
                Assert.Equal("1 rad/min", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerMinute).ToString());
                Assert.Equal("1 rad/s", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond).ToString());
                Assert.Equal("1 r/h", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerHour).ToString());
                Assert.Equal("1 rpm", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerMinute).ToString());
                Assert.Equal("1 r/s", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 crad/min", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 crad/s", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 drad/min", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 drad/s", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 °/h", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerHour).ToString(swedishCulture));
            Assert.Equal("1 °/min", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerMinute).ToString(swedishCulture));
            Assert.Equal("1 °/s", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 µ°/h", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerHour).ToString(swedishCulture));
            Assert.Equal("1 µ°/s", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 µrad/min", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 µrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 m°/h", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerHour).ToString(swedishCulture));
            Assert.Equal("1 m°/s", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 mrad/min", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 n°/h", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerHour).ToString(swedishCulture));
            Assert.Equal("1 n°/s", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 nrad/min", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 nrad/s", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 rad/min", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerMinute).ToString(swedishCulture));
            Assert.Equal("1 rad/s", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 r/h", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerHour).ToString(swedishCulture));
            Assert.Equal("1 rpm", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerMinute).ToString(swedishCulture));
            Assert.Equal("1 r/s", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s1"));
                Assert.Equal("0.12 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s2"));
                Assert.Equal("0.123 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s3"));
                Assert.Equal("0.1235 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(RotationalSpeed)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(RotationalSpeedUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(QuantityType.RotationalSpeed, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(RotationalSpeed.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(RotationalSpeed.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(new {RotationalSpeed.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(value);
            Assert.Equal(RotationalSpeed.FromRadiansPerSecond(-value), -quantity);
        }
    }
}
