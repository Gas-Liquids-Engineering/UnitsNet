//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarFlowTestsBase : QuantityTestsBase
    {
        protected abstract double GramMolesPerHourInOneGramMolePerHour { get; }
        protected abstract double GramMolesPerMinuteInOneGramMolePerHour { get; }
        protected abstract double GramMolesPerSecondInOneGramMolePerHour { get; }
        protected abstract double KilogramMolesPerHourInOneGramMolePerHour { get; }
        protected abstract double KilogramMolesPerMinuteInOneGramMolePerHour { get; }
        protected abstract double KilogramMolesPerSecondInOneGramMolePerHour { get; }
        protected abstract double PoundMolesPerHourInOneGramMolePerHour { get; }
        protected abstract double PoundMolesPerMinuteInOneGramMolePerHour { get; }
        protected abstract double PoundMolesPerSecondInOneGramMolePerHour { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramMolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double GramMolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GramMolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilogramMolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilogramMolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilogramMolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow((double)0.0, MolarFlowUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarFlowUnit.GramMolePerHour, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.PositiveInfinity, MolarFlowUnit.GramMolePerHour));
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.NegativeInfinity, MolarFlowUnit.GramMolePerHour));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new MolarFlow(double.NaN, MolarFlowUnit.GramMolePerHour));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarFlow(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new MolarFlow(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (MolarFlow) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void MolarFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarFlow(1, MolarFlowUnit.GramMolePerHour);

            QuantityInfo<MolarFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarFlow.Zero, quantityInfo.Zero);
            Assert.Equal("MolarFlow", quantityInfo.Name);
            Assert.Equal(QuantityType.MolarFlow, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<MolarFlowUnit>().Except(new[] {MolarFlowUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void GramMolePerHourToMolarFlowUnits()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            AssertEx.EqualTolerance(GramMolesPerHourInOneGramMolePerHour, grammoleperhour.GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(GramMolesPerMinuteInOneGramMolePerHour, grammoleperhour.GramMolesPerMinute, GramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(GramMolesPerSecondInOneGramMolePerHour, grammoleperhour.GramMolesPerSecond, GramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerHourInOneGramMolePerHour, grammoleperhour.KilogramMolesPerHour, KilogramMolesPerHourTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerMinuteInOneGramMolePerHour, grammoleperhour.KilogramMolesPerMinute, KilogramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerSecondInOneGramMolePerHour, grammoleperhour.KilogramMolesPerSecond, KilogramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(PoundMolesPerHourInOneGramMolePerHour, grammoleperhour.PoundMolesPerHour, PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(PoundMolesPerMinuteInOneGramMolePerHour, grammoleperhour.PoundMolesPerMinute, PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundMolesPerSecondInOneGramMolePerHour, grammoleperhour.PoundMolesPerSecond, PoundMolesPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarFlow.From(1, MolarFlowUnit.GramMolePerHour);
            AssertEx.EqualTolerance(1, quantity00.GramMolesPerHour, GramMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerHour, quantity00.Unit);

            var quantity01 = MolarFlow.From(1, MolarFlowUnit.GramMolePerMinute);
            AssertEx.EqualTolerance(1, quantity01.GramMolesPerMinute, GramMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerMinute, quantity01.Unit);

            var quantity02 = MolarFlow.From(1, MolarFlowUnit.GramMolePerSecond);
            AssertEx.EqualTolerance(1, quantity02.GramMolesPerSecond, GramMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerSecond, quantity02.Unit);

            var quantity03 = MolarFlow.From(1, MolarFlowUnit.KilogramMolePerHour);
            AssertEx.EqualTolerance(1, quantity03.KilogramMolesPerHour, KilogramMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerHour, quantity03.Unit);

            var quantity04 = MolarFlow.From(1, MolarFlowUnit.KilogramMolePerMinute);
            AssertEx.EqualTolerance(1, quantity04.KilogramMolesPerMinute, KilogramMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerMinute, quantity04.Unit);

            var quantity05 = MolarFlow.From(1, MolarFlowUnit.KilogramMolePerSecond);
            AssertEx.EqualTolerance(1, quantity05.KilogramMolesPerSecond, KilogramMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerSecond, quantity05.Unit);

            var quantity06 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerHour);
            AssertEx.EqualTolerance(1, quantity06.PoundMolesPerHour, PoundMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerHour, quantity06.Unit);

            var quantity07 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerMinute);
            AssertEx.EqualTolerance(1, quantity07.PoundMolesPerMinute, PoundMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerMinute, quantity07.Unit);

            var quantity08 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerSecond);
            AssertEx.EqualTolerance(1, quantity08.PoundMolesPerSecond, PoundMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerSecond, quantity08.Unit);

        }

        [Fact]
        public void FromGramMolesPerHour_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarFlow.FromGramMolesPerHour(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => MolarFlow.FromGramMolesPerHour(double.NegativeInfinity));
        }

        [Fact]
        public void FromGramMolesPerHour_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => MolarFlow.FromGramMolesPerHour(double.NaN));
        }

        [Fact]
        public void As()
        {
            var grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            AssertEx.EqualTolerance(GramMolesPerHourInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.GramMolePerHour), GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(GramMolesPerMinuteInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.GramMolePerMinute), GramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(GramMolesPerSecondInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.GramMolePerSecond), GramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerHourInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.KilogramMolePerHour), KilogramMolesPerHourTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerMinuteInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.KilogramMolePerMinute), KilogramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramMolesPerSecondInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.KilogramMolePerSecond), KilogramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(PoundMolesPerHourInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.PoundMolePerHour), PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(PoundMolesPerMinuteInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.PoundMolePerMinute), PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundMolesPerSecondInOneGramMolePerHour, grammoleperhour.As(MolarFlowUnit.PoundMolePerSecond), PoundMolesPerSecondTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var grammoleperhour = MolarFlow.FromGramMolesPerHour(1);

            var grammoleperhourQuantity = grammoleperhour.ToUnit(MolarFlowUnit.GramMolePerHour);
            AssertEx.EqualTolerance(GramMolesPerHourInOneGramMolePerHour, (double)grammoleperhourQuantity.Value, GramMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerHour, grammoleperhourQuantity.Unit);

            var grammoleperminuteQuantity = grammoleperhour.ToUnit(MolarFlowUnit.GramMolePerMinute);
            AssertEx.EqualTolerance(GramMolesPerMinuteInOneGramMolePerHour, (double)grammoleperminuteQuantity.Value, GramMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerMinute, grammoleperminuteQuantity.Unit);

            var grammolepersecondQuantity = grammoleperhour.ToUnit(MolarFlowUnit.GramMolePerSecond);
            AssertEx.EqualTolerance(GramMolesPerSecondInOneGramMolePerHour, (double)grammolepersecondQuantity.Value, GramMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.GramMolePerSecond, grammolepersecondQuantity.Unit);

            var kilogrammoleperhourQuantity = grammoleperhour.ToUnit(MolarFlowUnit.KilogramMolePerHour);
            AssertEx.EqualTolerance(KilogramMolesPerHourInOneGramMolePerHour, (double)kilogrammoleperhourQuantity.Value, KilogramMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerHour, kilogrammoleperhourQuantity.Unit);

            var kilogrammoleperminuteQuantity = grammoleperhour.ToUnit(MolarFlowUnit.KilogramMolePerMinute);
            AssertEx.EqualTolerance(KilogramMolesPerMinuteInOneGramMolePerHour, (double)kilogrammoleperminuteQuantity.Value, KilogramMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerMinute, kilogrammoleperminuteQuantity.Unit);

            var kilogrammolepersecondQuantity = grammoleperhour.ToUnit(MolarFlowUnit.KilogramMolePerSecond);
            AssertEx.EqualTolerance(KilogramMolesPerSecondInOneGramMolePerHour, (double)kilogrammolepersecondQuantity.Value, KilogramMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.KilogramMolePerSecond, kilogrammolepersecondQuantity.Unit);

            var poundmoleperhourQuantity = grammoleperhour.ToUnit(MolarFlowUnit.PoundMolePerHour);
            AssertEx.EqualTolerance(PoundMolesPerHourInOneGramMolePerHour, (double)poundmoleperhourQuantity.Value, PoundMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerHour, poundmoleperhourQuantity.Unit);

            var poundmoleperminuteQuantity = grammoleperhour.ToUnit(MolarFlowUnit.PoundMolePerMinute);
            AssertEx.EqualTolerance(PoundMolesPerMinuteInOneGramMolePerHour, (double)poundmoleperminuteQuantity.Value, PoundMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerMinute, poundmoleperminuteQuantity.Unit);

            var poundmolepersecondQuantity = grammoleperhour.ToUnit(MolarFlowUnit.PoundMolePerSecond);
            AssertEx.EqualTolerance(PoundMolesPerSecondInOneGramMolePerHour, (double)poundmolepersecondQuantity.Value, PoundMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerSecond, poundmolepersecondQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = MolarFlow.FromGramMolesPerHour(1).ToBaseUnit();
            Assert.Equal(MolarFlow.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            AssertEx.EqualTolerance(1, MolarFlow.FromGramMolesPerHour(grammoleperhour.GramMolesPerHour).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromGramMolesPerMinute(grammoleperhour.GramMolesPerMinute).GramMolesPerHour, GramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromGramMolesPerSecond(grammoleperhour.GramMolesPerSecond).GramMolesPerHour, GramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilogramMolesPerHour(grammoleperhour.KilogramMolesPerHour).GramMolesPerHour, KilogramMolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilogramMolesPerMinute(grammoleperhour.KilogramMolesPerMinute).GramMolesPerHour, KilogramMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilogramMolesPerSecond(grammoleperhour.KilogramMolesPerSecond).GramMolesPerHour, KilogramMolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerHour(grammoleperhour.PoundMolesPerHour).GramMolesPerHour, PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerMinute(grammoleperhour.PoundMolesPerMinute).GramMolesPerHour, PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerSecond(grammoleperhour.PoundMolesPerSecond).GramMolesPerHour, PoundMolesPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarFlow v = MolarFlow.FromGramMolesPerHour(1);
            AssertEx.EqualTolerance(-1, -v.GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromGramMolesPerHour(3)-v).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(2, (v + v).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(10, (v*10).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(10, (10*v).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromGramMolesPerHour(10)/5).GramMolesPerHour, GramMolesPerHourTolerance);
            AssertEx.EqualTolerance(2, MolarFlow.FromGramMolesPerHour(10)/MolarFlow.FromGramMolesPerHour(5), GramMolesPerHourTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarFlow oneGramMolePerHour = MolarFlow.FromGramMolesPerHour(1);
            MolarFlow twoGramMolesPerHour = MolarFlow.FromGramMolesPerHour(2);

            Assert.True(oneGramMolePerHour < twoGramMolesPerHour);
            Assert.True(oneGramMolePerHour <= twoGramMolesPerHour);
            Assert.True(twoGramMolesPerHour > oneGramMolePerHour);
            Assert.True(twoGramMolesPerHour >= oneGramMolePerHour);

            Assert.False(oneGramMolePerHour > twoGramMolesPerHour);
            Assert.False(oneGramMolePerHour >= twoGramMolesPerHour);
            Assert.False(twoGramMolesPerHour < oneGramMolePerHour);
            Assert.False(twoGramMolesPerHour <= oneGramMolePerHour);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            Assert.Equal(0, grammoleperhour.CompareTo(grammoleperhour));
            Assert.True(grammoleperhour.CompareTo(MolarFlow.Zero) > 0);
            Assert.True(MolarFlow.Zero.CompareTo(grammoleperhour) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            Assert.Throws<ArgumentException>(() => grammoleperhour.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            Assert.Throws<ArgumentNullException>(() => grammoleperhour.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = MolarFlow.FromGramMolesPerHour(1);
            var b = MolarFlow.FromGramMolesPerHour(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = MolarFlow.FromGramMolesPerHour(1);
            var b = MolarFlow.FromGramMolesPerHour(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = MolarFlow.FromGramMolesPerHour(1);
            object b = MolarFlow.FromGramMolesPerHour(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MolarFlow.FromGramMolesPerHour(1);
            Assert.True(v.Equals(MolarFlow.FromGramMolesPerHour(1), GramMolesPerHourTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MolarFlow.Zero, GramMolesPerHourTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarFlow.FromGramMolesPerHour(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarFlow.FromGramMolesPerHour(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            Assert.False(grammoleperhour.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarFlow grammoleperhour = MolarFlow.FromGramMolesPerHour(1);
            Assert.False(grammoleperhour.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(MolarFlowUnit.Undefined, MolarFlow.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MolarFlowUnit)).Cast<MolarFlowUnit>();
            foreach(var unit in units)
            {
                if(unit == MolarFlowUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 g-mol/h", new MolarFlow(1, MolarFlowUnit.GramMolePerHour).ToString());
                Assert.Equal("1 g-mol/min", new MolarFlow(1, MolarFlowUnit.GramMolePerMinute).ToString());
                Assert.Equal("1 g-mol/s", new MolarFlow(1, MolarFlowUnit.GramMolePerSecond).ToString());
                Assert.Equal("1 kg-mol/h", new MolarFlow(1, MolarFlowUnit.KilogramMolePerHour).ToString());
                Assert.Equal("1 kg-mol/min", new MolarFlow(1, MolarFlowUnit.KilogramMolePerMinute).ToString());
                Assert.Equal("1 kg-mol/s", new MolarFlow(1, MolarFlowUnit.KilogramMolePerSecond).ToString());
                Assert.Equal("1 lb-mol/h", new MolarFlow(1, MolarFlowUnit.PoundMolePerHour).ToString());
                Assert.Equal("1 lb-mol/min", new MolarFlow(1, MolarFlowUnit.PoundMolePerMinute).ToString());
                Assert.Equal("1 lb-mol/s", new MolarFlow(1, MolarFlowUnit.PoundMolePerSecond).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 g-mol/h", new MolarFlow(1, MolarFlowUnit.GramMolePerHour).ToString(swedishCulture));
            Assert.Equal("1 g-mol/min", new MolarFlow(1, MolarFlowUnit.GramMolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 g-mol/s", new MolarFlow(1, MolarFlowUnit.GramMolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 kg-mol/h", new MolarFlow(1, MolarFlowUnit.KilogramMolePerHour).ToString(swedishCulture));
            Assert.Equal("1 kg-mol/min", new MolarFlow(1, MolarFlowUnit.KilogramMolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 kg-mol/s", new MolarFlow(1, MolarFlowUnit.KilogramMolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 lb-mol/h", new MolarFlow(1, MolarFlowUnit.PoundMolePerHour).ToString(swedishCulture));
            Assert.Equal("1 lb-mol/min", new MolarFlow(1, MolarFlowUnit.PoundMolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 lb-mol/s", new MolarFlow(1, MolarFlowUnit.PoundMolePerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s1"));
                Assert.Equal("0.12 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s2"));
                Assert.Equal("0.123 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s3"));
                Assert.Equal("0.1235 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s1", culture));
            Assert.Equal("0.12 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s2", culture));
            Assert.Equal("0.123 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s3", culture));
            Assert.Equal("0.1235 g-mol/h", new MolarFlow(0.123456, MolarFlowUnit.GramMolePerHour).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(MolarFlow)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(MolarFlowUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(QuantityType.MolarFlow, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(MolarFlow.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(MolarFlow.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarFlow.FromGramMolesPerHour(1.0);
            Assert.Equal(new {MolarFlow.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarFlow.FromGramMolesPerHour(value);
            Assert.Equal(MolarFlow.FromGramMolesPerHour(-value), -quantity);
        }
    }
}
