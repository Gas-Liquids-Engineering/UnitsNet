//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of PressureDeltaPerUnitLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PressureDeltaPerUnitLengthTestsBase : QuantityTestsBase
    {
        protected abstract double DecapascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double DecapascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double GigapascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double GigapascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double HectopascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double HectopascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double KilopascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double KilopascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double MegapascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double MegapascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double MicropascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double MicropascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double MillipascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double MillipascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double PascalsDeltaPerKilometerInOnePascalDeltaPerMeter { get; }
        protected abstract double PascalsDeltaPerMeterInOnePascalDeltaPerMeter { get; }
        protected abstract double PoundsPerSquareInchDeltaPerFootInOnePascalDeltaPerMeter { get; }
        protected abstract double PoundsPerSquareInchDeltaPerHundredFeetInOnePascalDeltaPerMeter { get; }
        protected abstract double PoundsPerSquareInchDeltaPerMileInOnePascalDeltaPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DecapascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PascalsDeltaPerKilometerTolerance { get { return 1e-5; } }
        protected virtual double PascalsDeltaPerMeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerSquareInchDeltaPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerSquareInchDeltaPerHundredFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerSquareInchDeltaPerMileTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureDeltaPerUnitLength((double)0.0, PressureDeltaPerUnitLengthUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new PressureDeltaPerUnitLength();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureDeltaPerUnitLength(double.PositiveInfinity, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter));
            Assert.Throws<ArgumentException>(() => new PressureDeltaPerUnitLength(double.NegativeInfinity, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new PressureDeltaPerUnitLength(double.NaN, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new PressureDeltaPerUnitLength(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new PressureDeltaPerUnitLength(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (PressureDeltaPerUnitLength) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void PressureDeltaPerUnitLength_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);

            QuantityInfo<PressureDeltaPerUnitLengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(PressureDeltaPerUnitLength.Zero, quantityInfo.Zero);
            Assert.Equal("PressureDeltaPerUnitLength", quantityInfo.Name);
            Assert.Equal(QuantityType.PressureDeltaPerUnitLength, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<PressureDeltaPerUnitLengthUnit>().Except(new[] {PressureDeltaPerUnitLengthUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void PascalDeltaPerMeterToPressureDeltaPerUnitLengthUnits()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            AssertEx.EqualTolerance(DecapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.DecapascalsDeltaPerKilometer, DecapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(DecapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.DecapascalsDeltaPerMeter, DecapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(GigapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.GigapascalsDeltaPerKilometer, GigapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(GigapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.GigapascalsDeltaPerMeter, GigapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(HectopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.HectopascalsDeltaPerKilometer, HectopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(HectopascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.HectopascalsDeltaPerMeter, HectopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(KilopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.KilopascalsDeltaPerKilometer, KilopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(KilopascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.KilopascalsDeltaPerMeter, KilopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.MegapascalsDeltaPerKilometer, MegapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MegapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.MegapascalsDeltaPerMeter, MegapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MicropascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.MicropascalsDeltaPerKilometer, MicropascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MicropascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.MicropascalsDeltaPerMeter, MicropascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MillipascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.MillipascalsDeltaPerKilometer, MillipascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MillipascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.MillipascalsDeltaPerMeter, MillipascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(PascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.PascalsDeltaPerKilometer, PascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(PascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerFootInOnePascalDeltaPerMeter, pascaldeltapermeter.PoundsPerSquareInchDeltaPerFoot, PoundsPerSquareInchDeltaPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerHundredFeetInOnePascalDeltaPerMeter, pascaldeltapermeter.PoundsPerSquareInchDeltaPerHundredFeet, PoundsPerSquareInchDeltaPerHundredFeetTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerMileInOnePascalDeltaPerMeter, pascaldeltapermeter.PoundsPerSquareInchDeltaPerMile, PoundsPerSquareInchDeltaPerMileTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity00.DecapascalsDeltaPerKilometer, DecapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer, quantity00.Unit);

            var quantity01 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity01.DecapascalsDeltaPerMeter, DecapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter, quantity01.Unit);

            var quantity02 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity02.GigapascalsDeltaPerKilometer, GigapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer, quantity02.Unit);

            var quantity03 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity03.GigapascalsDeltaPerMeter, GigapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter, quantity03.Unit);

            var quantity04 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity04.HectopascalsDeltaPerKilometer, HectopascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer, quantity04.Unit);

            var quantity05 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity05.HectopascalsDeltaPerMeter, HectopascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter, quantity05.Unit);

            var quantity06 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity06.KilopascalsDeltaPerKilometer, KilopascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer, quantity06.Unit);

            var quantity07 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity07.KilopascalsDeltaPerMeter, KilopascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter, quantity07.Unit);

            var quantity08 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity08.MegapascalsDeltaPerKilometer, MegapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer, quantity08.Unit);

            var quantity09 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity09.MegapascalsDeltaPerMeter, MegapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter, quantity09.Unit);

            var quantity10 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity10.MicropascalsDeltaPerKilometer, MicropascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer, quantity10.Unit);

            var quantity11 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity11.MicropascalsDeltaPerMeter, MicropascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter, quantity11.Unit);

            var quantity12 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity12.MillipascalsDeltaPerKilometer, MillipascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer, quantity12.Unit);

            var quantity13 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity13.MillipascalsDeltaPerMeter, MillipascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter, quantity13.Unit);

            var quantity14 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);
            AssertEx.EqualTolerance(1, quantity14.PascalsDeltaPerKilometer, PascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer, quantity14.Unit);

            var quantity15 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);
            AssertEx.EqualTolerance(1, quantity15.PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter, quantity15.Unit);

            var quantity16 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);
            AssertEx.EqualTolerance(1, quantity16.PoundsPerSquareInchDeltaPerFoot, PoundsPerSquareInchDeltaPerFootTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot, quantity16.Unit);

            var quantity17 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);
            AssertEx.EqualTolerance(1, quantity17.PoundsPerSquareInchDeltaPerHundredFeet, PoundsPerSquareInchDeltaPerHundredFeetTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet, quantity17.Unit);

            var quantity18 = PressureDeltaPerUnitLength.From(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);
            AssertEx.EqualTolerance(1, quantity18.PoundsPerSquareInchDeltaPerMile, PoundsPerSquareInchDeltaPerMileTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile, quantity18.Unit);

        }

        [Fact]
        public void FromPascalsDeltaPerMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromPascalsDeltaPerMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            AssertEx.EqualTolerance(DecapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer), DecapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(DecapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter), DecapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(GigapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer), GigapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(GigapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter), GigapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(HectopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer), HectopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(HectopascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter), HectopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(KilopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer), KilopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(KilopascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter), KilopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer), MegapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MegapascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter), MegapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MicropascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer), MicropascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MicropascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter), MicropascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(MillipascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer), MillipascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(MillipascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter), MillipascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(PascalsDeltaPerKilometerInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer), PascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(PascalsDeltaPerMeterInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter), PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerFootInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot), PoundsPerSquareInchDeltaPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerHundredFeetInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet), PoundsPerSquareInchDeltaPerHundredFeetTolerance);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerMileInOnePascalDeltaPerMeter, pascaldeltapermeter.As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile), PoundsPerSquareInchDeltaPerMileTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new PressureDeltaPerUnitLength(value: 1, unit: PressureDeltaPerUnitLength.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);

            var decapascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(DecapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)decapascaldeltaperkilometerQuantity.Value, DecapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer, decapascaldeltaperkilometerQuantity.Unit);

            var decapascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);
            AssertEx.EqualTolerance(DecapascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)decapascaldeltapermeterQuantity.Value, DecapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter, decapascaldeltapermeterQuantity.Unit);

            var gigapascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(GigapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)gigapascaldeltaperkilometerQuantity.Value, GigapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer, gigapascaldeltaperkilometerQuantity.Unit);

            var gigapascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);
            AssertEx.EqualTolerance(GigapascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)gigapascaldeltapermeterQuantity.Value, GigapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter, gigapascaldeltapermeterQuantity.Unit);

            var hectopascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);
            AssertEx.EqualTolerance(HectopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)hectopascaldeltaperkilometerQuantity.Value, HectopascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer, hectopascaldeltaperkilometerQuantity.Unit);

            var hectopascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);
            AssertEx.EqualTolerance(HectopascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)hectopascaldeltapermeterQuantity.Value, HectopascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter, hectopascaldeltapermeterQuantity.Unit);

            var kilopascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);
            AssertEx.EqualTolerance(KilopascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)kilopascaldeltaperkilometerQuantity.Value, KilopascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer, kilopascaldeltaperkilometerQuantity.Unit);

            var kilopascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);
            AssertEx.EqualTolerance(KilopascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)kilopascaldeltapermeterQuantity.Value, KilopascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter, kilopascaldeltapermeterQuantity.Unit);

            var megapascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);
            AssertEx.EqualTolerance(MegapascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)megapascaldeltaperkilometerQuantity.Value, MegapascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer, megapascaldeltaperkilometerQuantity.Unit);

            var megapascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);
            AssertEx.EqualTolerance(MegapascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)megapascaldeltapermeterQuantity.Value, MegapascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter, megapascaldeltapermeterQuantity.Unit);

            var micropascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);
            AssertEx.EqualTolerance(MicropascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)micropascaldeltaperkilometerQuantity.Value, MicropascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer, micropascaldeltaperkilometerQuantity.Unit);

            var micropascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);
            AssertEx.EqualTolerance(MicropascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)micropascaldeltapermeterQuantity.Value, MicropascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter, micropascaldeltapermeterQuantity.Unit);

            var millipascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);
            AssertEx.EqualTolerance(MillipascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)millipascaldeltaperkilometerQuantity.Value, MillipascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer, millipascaldeltaperkilometerQuantity.Unit);

            var millipascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);
            AssertEx.EqualTolerance(MillipascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)millipascaldeltapermeterQuantity.Value, MillipascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter, millipascaldeltapermeterQuantity.Unit);

            var pascaldeltaperkilometerQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);
            AssertEx.EqualTolerance(PascalsDeltaPerKilometerInOnePascalDeltaPerMeter, (double)pascaldeltaperkilometerQuantity.Value, PascalsDeltaPerKilometerTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer, pascaldeltaperkilometerQuantity.Unit);

            var pascaldeltapermeterQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);
            AssertEx.EqualTolerance(PascalsDeltaPerMeterInOnePascalDeltaPerMeter, (double)pascaldeltapermeterQuantity.Value, PascalsDeltaPerMeterTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter, pascaldeltapermeterQuantity.Unit);

            var poundpersquareinchdeltaperfootQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerFootInOnePascalDeltaPerMeter, (double)poundpersquareinchdeltaperfootQuantity.Value, PoundsPerSquareInchDeltaPerFootTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot, poundpersquareinchdeltaperfootQuantity.Unit);

            var poundpersquareinchdeltaperhundredfeetQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerHundredFeetInOnePascalDeltaPerMeter, (double)poundpersquareinchdeltaperhundredfeetQuantity.Value, PoundsPerSquareInchDeltaPerHundredFeetTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet, poundpersquareinchdeltaperhundredfeetQuantity.Unit);

            var poundpersquareinchdeltapermileQuantity = pascaldeltapermeter.ToUnit(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);
            AssertEx.EqualTolerance(PoundsPerSquareInchDeltaPerMileInOnePascalDeltaPerMeter, (double)poundpersquareinchdeltapermileQuantity.Value, PoundsPerSquareInchDeltaPerMileTolerance);
            Assert.Equal(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile, poundpersquareinchdeltapermileQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1).ToBaseUnit();
            Assert.Equal(PressureDeltaPerUnitLength.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromDecapascalsDeltaPerKilometer(pascaldeltapermeter.DecapascalsDeltaPerKilometer).PascalsDeltaPerMeter, DecapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromDecapascalsDeltaPerMeter(pascaldeltapermeter.DecapascalsDeltaPerMeter).PascalsDeltaPerMeter, DecapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromGigapascalsDeltaPerKilometer(pascaldeltapermeter.GigapascalsDeltaPerKilometer).PascalsDeltaPerMeter, GigapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromGigapascalsDeltaPerMeter(pascaldeltapermeter.GigapascalsDeltaPerMeter).PascalsDeltaPerMeter, GigapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromHectopascalsDeltaPerKilometer(pascaldeltapermeter.HectopascalsDeltaPerKilometer).PascalsDeltaPerMeter, HectopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromHectopascalsDeltaPerMeter(pascaldeltapermeter.HectopascalsDeltaPerMeter).PascalsDeltaPerMeter, HectopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromKilopascalsDeltaPerKilometer(pascaldeltapermeter.KilopascalsDeltaPerKilometer).PascalsDeltaPerMeter, KilopascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromKilopascalsDeltaPerMeter(pascaldeltapermeter.KilopascalsDeltaPerMeter).PascalsDeltaPerMeter, KilopascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMegapascalsDeltaPerKilometer(pascaldeltapermeter.MegapascalsDeltaPerKilometer).PascalsDeltaPerMeter, MegapascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMegapascalsDeltaPerMeter(pascaldeltapermeter.MegapascalsDeltaPerMeter).PascalsDeltaPerMeter, MegapascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMicropascalsDeltaPerKilometer(pascaldeltapermeter.MicropascalsDeltaPerKilometer).PascalsDeltaPerMeter, MicropascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMicropascalsDeltaPerMeter(pascaldeltapermeter.MicropascalsDeltaPerMeter).PascalsDeltaPerMeter, MicropascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMillipascalsDeltaPerKilometer(pascaldeltapermeter.MillipascalsDeltaPerKilometer).PascalsDeltaPerMeter, MillipascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromMillipascalsDeltaPerMeter(pascaldeltapermeter.MillipascalsDeltaPerMeter).PascalsDeltaPerMeter, MillipascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromPascalsDeltaPerKilometer(pascaldeltapermeter.PascalsDeltaPerKilometer).PascalsDeltaPerMeter, PascalsDeltaPerKilometerTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(pascaldeltapermeter.PascalsDeltaPerMeter).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerFoot(pascaldeltapermeter.PoundsPerSquareInchDeltaPerFoot).PascalsDeltaPerMeter, PoundsPerSquareInchDeltaPerFootTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerHundredFeet(pascaldeltapermeter.PoundsPerSquareInchDeltaPerHundredFeet).PascalsDeltaPerMeter, PoundsPerSquareInchDeltaPerHundredFeetTolerance);
            AssertEx.EqualTolerance(1, PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerMile(pascaldeltapermeter.PoundsPerSquareInchDeltaPerMile).PascalsDeltaPerMeter, PoundsPerSquareInchDeltaPerMileTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            PressureDeltaPerUnitLength v = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(2, (PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(3)-v).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(2, (PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(10)/5).PascalsDeltaPerMeter, PascalsDeltaPerMeterTolerance);
            AssertEx.EqualTolerance(2, PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(10)/PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(5), PascalsDeltaPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            PressureDeltaPerUnitLength onePascalDeltaPerMeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            PressureDeltaPerUnitLength twoPascalsDeltaPerMeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(2);

            Assert.True(onePascalDeltaPerMeter < twoPascalsDeltaPerMeter);
            Assert.True(onePascalDeltaPerMeter <= twoPascalsDeltaPerMeter);
            Assert.True(twoPascalsDeltaPerMeter > onePascalDeltaPerMeter);
            Assert.True(twoPascalsDeltaPerMeter >= onePascalDeltaPerMeter);

            Assert.False(onePascalDeltaPerMeter > twoPascalsDeltaPerMeter);
            Assert.False(onePascalDeltaPerMeter >= twoPascalsDeltaPerMeter);
            Assert.False(twoPascalsDeltaPerMeter < onePascalDeltaPerMeter);
            Assert.False(twoPascalsDeltaPerMeter <= onePascalDeltaPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.Equal(0, pascaldeltapermeter.CompareTo(pascaldeltapermeter));
            Assert.True(pascaldeltapermeter.CompareTo(PressureDeltaPerUnitLength.Zero) > 0);
            Assert.True(PressureDeltaPerUnitLength.Zero.CompareTo(pascaldeltapermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.Throws<ArgumentException>(() => pascaldeltapermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => pascaldeltapermeter.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            var b = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            var b = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            object b = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.True(v.Equals(PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1), PascalsDeltaPerMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(PressureDeltaPerUnitLength.Zero, PascalsDeltaPerMeterTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.False(pascaldeltapermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            PressureDeltaPerUnitLength pascaldeltapermeter = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1);
            Assert.False(pascaldeltapermeter.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(PressureDeltaPerUnitLengthUnit.Undefined, PressureDeltaPerUnitLength.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PressureDeltaPerUnitLengthUnit)).Cast<PressureDeltaPerUnitLengthUnit>();
            foreach(var unit in units)
            {
                if(unit == PressureDeltaPerUnitLengthUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(PressureDeltaPerUnitLength.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 daPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer).ToString());
                Assert.Equal("1 daPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter).ToString());
                Assert.Equal("1 GPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer).ToString());
                Assert.Equal("1 GPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter).ToString());
                Assert.Equal("1 hPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer).ToString());
                Assert.Equal("1 hPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter).ToString());
                Assert.Equal("1 kPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer).ToString());
                Assert.Equal("1 kPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter).ToString());
                Assert.Equal("1 MPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer).ToString());
                Assert.Equal("1 MPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter).ToString());
                Assert.Equal("1 µPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer).ToString());
                Assert.Equal("1 µPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter).ToString());
                Assert.Equal("1 mPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer).ToString());
                Assert.Equal("1 mPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter).ToString());
                Assert.Equal("1 Pad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer).ToString());
                Assert.Equal("1 Pad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString());
                Assert.Equal("1 psid/ft", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot).ToString());
                Assert.Equal("1 psid/100ft", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet).ToString());
                Assert.Equal("1 psid/mi", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 daPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 daPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 GPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 GPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 hPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 hPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 kPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 MPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 µPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mPad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 mPad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 Pad/km", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer).ToString(swedishCulture));
            Assert.Equal("1 Pad/m", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString(swedishCulture));
            Assert.Equal("1 psid/ft", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot).ToString(swedishCulture));
            Assert.Equal("1 psid/100ft", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet).ToString(swedishCulture));
            Assert.Equal("1 psid/mi", new PressureDeltaPerUnitLength(1, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s1"));
                Assert.Equal("0.12 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s2"));
                Assert.Equal("0.123 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s3"));
                Assert.Equal("0.1235 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Pad/m", new PressureDeltaPerUnitLength(0.123456, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(PressureDeltaPerUnitLength)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(PressureDeltaPerUnitLengthUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(QuantityType.PressureDeltaPerUnitLength, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(PressureDeltaPerUnitLength.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(PressureDeltaPerUnitLength.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(1.0);
            Assert.Equal(new {PressureDeltaPerUnitLength.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(value);
            Assert.Equal(PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(-value), -quantity);
        }
    }
}
