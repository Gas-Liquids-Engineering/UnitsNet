//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of InverseHeatTransferCoefficient.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class InverseHeatTransferCoefficientTestsBase : QuantityTestsBase
    {
        protected abstract double SquareCentimeterKelvinsPerWattInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareCentimeterSecondKelvinsPerCalorieInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareFootHourFahrenheitsPerBtuInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareMetersCelsiusPerWattInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareMeterHourKelvinsPerKilocalorieInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareMetersKelvinPerKilowattInOneSquareMeterKelvinPerWatt { get; }
        protected abstract double SquareMetersKelvinPerWattInOneSquareMeterKelvinPerWatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double SquareCentimeterKelvinsPerWattTolerance { get { return 1e-5; } }
        protected virtual double SquareCentimeterSecondKelvinsPerCalorieTolerance { get { return 1e-5; } }
        protected virtual double SquareFootHourFahrenheitsPerBtuTolerance { get { return 1e-5; } }
        protected virtual double SquareMetersCelsiusPerWattTolerance { get { return 1e-5; } }
        protected virtual double SquareMeterHourKelvinsPerKilocalorieTolerance { get { return 1e-5; } }
        protected virtual double SquareMetersKelvinPerKilowattTolerance { get { return 1e-5; } }
        protected virtual double SquareMetersKelvinPerWattTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        [Fact]
        public void Ctor_WithUndefinedUnit_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseHeatTransferCoefficient((double)0.0, InverseHeatTransferCoefficientUnit.Undefined));
        }

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new InverseHeatTransferCoefficient();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt, quantity.Unit);
        }


        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseHeatTransferCoefficient(double.PositiveInfinity, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt));
            Assert.Throws<ArgumentException>(() => new InverseHeatTransferCoefficient(double.NegativeInfinity, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new InverseHeatTransferCoefficient(double.NaN, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new InverseHeatTransferCoefficient(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new InverseHeatTransferCoefficient(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (InverseHeatTransferCoefficient) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void InverseHeatTransferCoefficient_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt);

            QuantityInfo<InverseHeatTransferCoefficientUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(InverseHeatTransferCoefficient.Zero, quantityInfo.Zero);
            Assert.Equal("InverseHeatTransferCoefficient", quantityInfo.Name);
            Assert.Equal(QuantityType.InverseHeatTransferCoefficient, quantityInfo.QuantityType);

            var units = EnumUtils.GetEnumValues<InverseHeatTransferCoefficientUnit>().Except(new[] {InverseHeatTransferCoefficientUnit.Undefined}).ToArray();
            var unitNames = units.Select(x => x.ToString());

            // Obsolete members
            Assert.Equal(units, quantityInfo.Units);
            Assert.Equal(unitNames, quantityInfo.UnitNames);
        }

        [Fact]
        public void SquareMeterKelvinPerWattToInverseHeatTransferCoefficientUnits()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            AssertEx.EqualTolerance(SquareCentimeterKelvinsPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareCentimeterKelvinsPerWatt, SquareCentimeterKelvinsPerWattTolerance);
            AssertEx.EqualTolerance(SquareCentimeterSecondKelvinsPerCalorieInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareCentimeterSecondKelvinsPerCalorie, SquareCentimeterSecondKelvinsPerCalorieTolerance);
            AssertEx.EqualTolerance(SquareFootHourFahrenheitsPerBtuInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareFootHourFahrenheitsPerBtu, SquareFootHourFahrenheitsPerBtuTolerance);
            AssertEx.EqualTolerance(SquareMetersCelsiusPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareMetersCelsiusPerWatt, SquareMetersCelsiusPerWattTolerance);
            AssertEx.EqualTolerance(SquareMeterHourKelvinsPerKilocalorieInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareMeterHourKelvinsPerKilocalorie, SquareMeterHourKelvinsPerKilocalorieTolerance);
            AssertEx.EqualTolerance(SquareMetersKelvinPerKilowattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareMetersKelvinPerKilowatt, SquareMetersKelvinPerKilowattTolerance);
            AssertEx.EqualTolerance(SquareMetersKelvinPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt);
            AssertEx.EqualTolerance(1, quantity00.SquareCentimeterKelvinsPerWatt, SquareCentimeterKelvinsPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt, quantity00.Unit);

            var quantity01 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie);
            AssertEx.EqualTolerance(1, quantity01.SquareCentimeterSecondKelvinsPerCalorie, SquareCentimeterSecondKelvinsPerCalorieTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie, quantity01.Unit);

            var quantity02 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu);
            AssertEx.EqualTolerance(1, quantity02.SquareFootHourFahrenheitsPerBtu, SquareFootHourFahrenheitsPerBtuTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu, quantity02.Unit);

            var quantity03 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt);
            AssertEx.EqualTolerance(1, quantity03.SquareMetersCelsiusPerWatt, SquareMetersCelsiusPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt, quantity03.Unit);

            var quantity04 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie);
            AssertEx.EqualTolerance(1, quantity04.SquareMeterHourKelvinsPerKilocalorie, SquareMeterHourKelvinsPerKilocalorieTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie, quantity04.Unit);

            var quantity05 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt);
            AssertEx.EqualTolerance(1, quantity05.SquareMetersKelvinPerKilowatt, SquareMetersKelvinPerKilowattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt, quantity05.Unit);

            var quantity06 = InverseHeatTransferCoefficient.From(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt);
            AssertEx.EqualTolerance(1, quantity06.SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt, quantity06.Unit);

        }

        [Fact]
        public void FromSquareMetersKelvinPerWatt_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(double.NegativeInfinity));
        }

        [Fact]
        public void FromSquareMetersKelvinPerWatt_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(double.NaN));
        }

        [Fact]
        public void As()
        {
            var squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            AssertEx.EqualTolerance(SquareCentimeterKelvinsPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt), SquareCentimeterKelvinsPerWattTolerance);
            AssertEx.EqualTolerance(SquareCentimeterSecondKelvinsPerCalorieInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie), SquareCentimeterSecondKelvinsPerCalorieTolerance);
            AssertEx.EqualTolerance(SquareFootHourFahrenheitsPerBtuInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu), SquareFootHourFahrenheitsPerBtuTolerance);
            AssertEx.EqualTolerance(SquareMetersCelsiusPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt), SquareMetersCelsiusPerWattTolerance);
            AssertEx.EqualTolerance(SquareMeterHourKelvinsPerKilocalorieInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie), SquareMeterHourKelvinsPerKilocalorieTolerance);
            AssertEx.EqualTolerance(SquareMetersKelvinPerKilowattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt), SquareMetersKelvinPerKilowattTolerance);
            AssertEx.EqualTolerance(SquareMetersKelvinPerWattInOneSquareMeterKelvinPerWatt, squaremeterkelvinperwatt.As(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt), SquareMetersKelvinPerWattTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new InverseHeatTransferCoefficient(value: 1, unit: InverseHeatTransferCoefficient.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = (double) AsWithSIUnitSystem();
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void ToUnit()
        {
            var squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);

            var squarecentimeterkelvinperwattQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt);
            AssertEx.EqualTolerance(SquareCentimeterKelvinsPerWattInOneSquareMeterKelvinPerWatt, (double)squarecentimeterkelvinperwattQuantity.Value, SquareCentimeterKelvinsPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt, squarecentimeterkelvinperwattQuantity.Unit);

            var squarecentimetersecondkelvinpercalorieQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie);
            AssertEx.EqualTolerance(SquareCentimeterSecondKelvinsPerCalorieInOneSquareMeterKelvinPerWatt, (double)squarecentimetersecondkelvinpercalorieQuantity.Value, SquareCentimeterSecondKelvinsPerCalorieTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie, squarecentimetersecondkelvinpercalorieQuantity.Unit);

            var squarefoothourfahrenheitperbtuQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu);
            AssertEx.EqualTolerance(SquareFootHourFahrenheitsPerBtuInOneSquareMeterKelvinPerWatt, (double)squarefoothourfahrenheitperbtuQuantity.Value, SquareFootHourFahrenheitsPerBtuTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu, squarefoothourfahrenheitperbtuQuantity.Unit);

            var squaremetercelsiusperwattQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt);
            AssertEx.EqualTolerance(SquareMetersCelsiusPerWattInOneSquareMeterKelvinPerWatt, (double)squaremetercelsiusperwattQuantity.Value, SquareMetersCelsiusPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt, squaremetercelsiusperwattQuantity.Unit);

            var squaremeterhourkelvinperkilocalorieQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie);
            AssertEx.EqualTolerance(SquareMeterHourKelvinsPerKilocalorieInOneSquareMeterKelvinPerWatt, (double)squaremeterhourkelvinperkilocalorieQuantity.Value, SquareMeterHourKelvinsPerKilocalorieTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie, squaremeterhourkelvinperkilocalorieQuantity.Unit);

            var squaremeterkelvinperkilowattQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt);
            AssertEx.EqualTolerance(SquareMetersKelvinPerKilowattInOneSquareMeterKelvinPerWatt, (double)squaremeterkelvinperkilowattQuantity.Value, SquareMetersKelvinPerKilowattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt, squaremeterkelvinperkilowattQuantity.Unit);

            var squaremeterkelvinperwattQuantity = squaremeterkelvinperwatt.ToUnit(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt);
            AssertEx.EqualTolerance(SquareMetersKelvinPerWattInOneSquareMeterKelvinPerWatt, (double)squaremeterkelvinperwattQuantity.Value, SquareMetersKelvinPerWattTolerance);
            Assert.Equal(InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt, squaremeterkelvinperwattQuantity.Unit);
        }

        [Fact]
        public void ToBaseUnit_ReturnsQuantityWithBaseUnit()
        {
            var quantityInBaseUnit = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1).ToBaseUnit();
            Assert.Equal(InverseHeatTransferCoefficient.BaseUnit, quantityInBaseUnit.Unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareCentimeterKelvinsPerWatt(squaremeterkelvinperwatt.SquareCentimeterKelvinsPerWatt).SquareMetersKelvinPerWatt, SquareCentimeterKelvinsPerWattTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareCentimeterSecondKelvinsPerCalorie(squaremeterkelvinperwatt.SquareCentimeterSecondKelvinsPerCalorie).SquareMetersKelvinPerWatt, SquareCentimeterSecondKelvinsPerCalorieTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareFootHourFahrenheitsPerBtu(squaremeterkelvinperwatt.SquareFootHourFahrenheitsPerBtu).SquareMetersKelvinPerWatt, SquareFootHourFahrenheitsPerBtuTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareMetersCelsiusPerWatt(squaremeterkelvinperwatt.SquareMetersCelsiusPerWatt).SquareMetersKelvinPerWatt, SquareMetersCelsiusPerWattTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareMeterHourKelvinsPerKilocalorie(squaremeterkelvinperwatt.SquareMeterHourKelvinsPerKilocalorie).SquareMetersKelvinPerWatt, SquareMeterHourKelvinsPerKilocalorieTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareMetersKelvinPerKilowatt(squaremeterkelvinperwatt.SquareMetersKelvinPerKilowatt).SquareMetersKelvinPerWatt, SquareMetersKelvinPerKilowattTolerance);
            AssertEx.EqualTolerance(1, InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(squaremeterkelvinperwatt.SquareMetersKelvinPerWatt).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            InverseHeatTransferCoefficient v = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            AssertEx.EqualTolerance(-1, -v.SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(2, (InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(3)-v).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(2, (v + v).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(10, (v*10).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(10, (10*v).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(2, (InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(10)/5).SquareMetersKelvinPerWatt, SquareMetersKelvinPerWattTolerance);
            AssertEx.EqualTolerance(2, InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(10)/InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(5), SquareMetersKelvinPerWattTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            InverseHeatTransferCoefficient oneSquareMeterKelvinPerWatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            InverseHeatTransferCoefficient twoSquareMetersKelvinPerWatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(2);

            Assert.True(oneSquareMeterKelvinPerWatt < twoSquareMetersKelvinPerWatt);
            Assert.True(oneSquareMeterKelvinPerWatt <= twoSquareMetersKelvinPerWatt);
            Assert.True(twoSquareMetersKelvinPerWatt > oneSquareMeterKelvinPerWatt);
            Assert.True(twoSquareMetersKelvinPerWatt >= oneSquareMeterKelvinPerWatt);

            Assert.False(oneSquareMeterKelvinPerWatt > twoSquareMetersKelvinPerWatt);
            Assert.False(oneSquareMeterKelvinPerWatt >= twoSquareMetersKelvinPerWatt);
            Assert.False(twoSquareMetersKelvinPerWatt < oneSquareMeterKelvinPerWatt);
            Assert.False(twoSquareMetersKelvinPerWatt <= oneSquareMeterKelvinPerWatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.Equal(0, squaremeterkelvinperwatt.CompareTo(squaremeterkelvinperwatt));
            Assert.True(squaremeterkelvinperwatt.CompareTo(InverseHeatTransferCoefficient.Zero) > 0);
            Assert.True(InverseHeatTransferCoefficient.Zero.CompareTo(squaremeterkelvinperwatt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.Throws<ArgumentException>(() => squaremeterkelvinperwatt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.Throws<ArgumentNullException>(() => squaremeterkelvinperwatt.CompareTo(null));
        }

        [Fact]
        public void EqualityOperators()
        {
            var a = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            var b = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(2);

#pragma warning disable CS8073
// ReSharper disable EqualExpressionComparison

            Assert.True(a == a);
            Assert.False(a != a);

            Assert.True(a != b);
            Assert.False(a == b);

            Assert.False(a == null);
            Assert.False(null == a);

// ReSharper restore EqualExpressionComparison
#pragma warning restore CS8073
        }

        [Fact]
        public void Equals_SameType_IsImplemented()
        {
            var a = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            var b = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
        }

        [Fact]
        public void Equals_QuantityAsObject_IsImplemented()
        {
            object a = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            object b = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(2);

            Assert.True(a.Equals(a));
            Assert.False(a.Equals(b));
            Assert.False(a.Equals((object)null));
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.True(v.Equals(InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1), SquareMetersKelvinPerWattTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(InverseHeatTransferCoefficient.Zero, SquareMetersKelvinPerWattTolerance, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.False(squaremeterkelvinperwatt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            InverseHeatTransferCoefficient squaremeterkelvinperwatt = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1);
            Assert.False(squaremeterkelvinperwatt.Equals(null));
        }

        [Fact]
        public void UnitsDoesNotContainUndefined()
        {
            Assert.DoesNotContain(InverseHeatTransferCoefficientUnit.Undefined, InverseHeatTransferCoefficient.Units);
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(InverseHeatTransferCoefficientUnit)).Cast<InverseHeatTransferCoefficientUnit>();
            foreach(var unit in units)
            {
                if(unit == InverseHeatTransferCoefficientUnit.Undefined)
                    continue;

                var defaultAbbreviation = UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(InverseHeatTransferCoefficient.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            var prevCulture = Thread.CurrentThread.CurrentUICulture;
            Thread.CurrentThread.CurrentUICulture = CultureInfo.GetCultureInfo("en-US");
            try {
                Assert.Equal("1 cm²·K/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt).ToString());
                Assert.Equal("1 cm²·s·K/cal", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie).ToString());
                Assert.Equal("1 ft²·hr·°F/Btu", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu).ToString());
                Assert.Equal("1 m²·°C/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt).ToString());
                Assert.Equal("1 m²·h·K/kcal", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie).ToString());
                Assert.Equal("1 m²·K/kW", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt).ToString());
                Assert.Equal("1 m²·K/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString());
            }
            finally
            {
                Thread.CurrentThread.CurrentUICulture = prevCulture;
            }
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm²·K/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareCentimeterKelvinPerWatt).ToString(swedishCulture));
            Assert.Equal("1 cm²·s·K/cal", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareCentimeterSecondKelvinPerCalorie).ToString(swedishCulture));
            Assert.Equal("1 ft²·hr·°F/Btu", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareFootHourFahrenheitPerBtu).ToString(swedishCulture));
            Assert.Equal("1 m²·°C/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterCelsiusPerWatt).ToString(swedishCulture));
            Assert.Equal("1 m²·h·K/kcal", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterHourKelvinPerKilocalorie).ToString(swedishCulture));
            Assert.Equal("1 m²·K/kW", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerKilowatt).ToString(swedishCulture));
            Assert.Equal("1 m²·K/W", new InverseHeatTransferCoefficient(1, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var oldCulture = CultureInfo.CurrentUICulture;
            try
            {
                CultureInfo.CurrentUICulture = CultureInfo.InvariantCulture;
                Assert.Equal("0.1 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s1"));
                Assert.Equal("0.12 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s2"));
                Assert.Equal("0.123 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s3"));
                Assert.Equal("0.1235 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s4"));
            }
            finally
            {
                CultureInfo.CurrentUICulture = oldCulture;
            }
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s1", culture));
            Assert.Equal("0.12 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s2", culture));
            Assert.Equal("0.123 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s3", culture));
            Assert.Equal("0.1235 m²·K/W", new InverseHeatTransferCoefficient(0.123456, InverseHeatTransferCoefficientUnit.SquareMeterKelvinPerWatt).ToString("s4", culture));
        }


        [Fact]
        public void ToString_NullFormat_ThrowsArgumentNullException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, null, null));
        }

        [Fact]
        public void ToString_NullArgs_ThrowsArgumentNullException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<ArgumentNullException>(() => quantity.ToString(null, "g", null));
        }

        [Fact]
        public void ToString_NullProvider_EqualsCurrentUICulture()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(quantity.ToString(CultureInfo.CurrentUICulture, "g"), quantity.ToString(null, "g"));
        }


        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(InverseHeatTransferCoefficient)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(InverseHeatTransferCoefficientUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityType_EqualsQuantityType()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(QuantityType.InverseHeatTransferCoefficient, Convert.ChangeType(quantity, typeof(QuantityType)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(InverseHeatTransferCoefficient.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(InverseHeatTransferCoefficient.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(1.0);
            Assert.Equal(new {InverseHeatTransferCoefficient.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(value);
            Assert.Equal(InverseHeatTransferCoefficient.FromSquareMetersKelvinPerWatt(-value), -quantity);
        }
    }
}
