//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure delta per unit length is the pressure change(force per unit area) per unit of length.
    /// </summary>
    public struct  PressureDeltaPerUnitLength
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureDeltaPerUnitLengthUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PressureDeltaPerUnitLengthUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public PressureDeltaPerUnitLength(double value, PressureDeltaPerUnitLengthUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static PressureDeltaPerUnitLengthUnit BaseUnit { get; } = PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static PressureDeltaPerUnitLength MaxValue { get; } = new PressureDeltaPerUnitLength(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static PressureDeltaPerUnitLength MinValue { get; } = new PressureDeltaPerUnitLength(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static PressureDeltaPerUnitLength Zero { get; } = new PressureDeltaPerUnitLength(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerKilometer.
        /// </summary>
        public double DecapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerMeter.
        /// </summary>
        public double DecapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerKilometer.
        /// </summary>
        public double GigapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerMeter.
        /// </summary>
        public double GigapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerKilometer.
        /// </summary>
        public double HectopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerMeter.
        /// </summary>
        public double HectopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerKilometer.
        /// </summary>
        public double KilopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerMeter.
        /// </summary>
        public double KilopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerKilometer.
        /// </summary>
        public double MegapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerMeter.
        /// </summary>
        public double MegapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerKilometer.
        /// </summary>
        public double MicropascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerMeter.
        /// </summary>
        public double MicropascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerKilometer.
        /// </summary>
        public double MillipascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerMeter.
        /// </summary>
        public double MillipascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerKilometer.
        /// </summary>
        public double PascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerMeter.
        /// </summary>
        public double PascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerFoot => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerHundredFeet => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerMile => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerKilometer(double decapascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(decapascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerMeter(double decapascalsdeltapermeter) => new PressureDeltaPerUnitLength(decapascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerKilometer(double gigapascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(gigapascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerMeter(double gigapascalsdeltapermeter) => new PressureDeltaPerUnitLength(gigapascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerKilometer(double hectopascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(hectopascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerMeter(double hectopascalsdeltapermeter) => new PressureDeltaPerUnitLength(hectopascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerKilometer(double kilopascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(kilopascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerMeter(double kilopascalsdeltapermeter) => new PressureDeltaPerUnitLength(kilopascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerKilometer(double megapascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(megapascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerMeter(double megapascalsdeltapermeter) => new PressureDeltaPerUnitLength(megapascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerKilometer(double micropascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(micropascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerMeter(double micropascalsdeltapermeter) => new PressureDeltaPerUnitLength(micropascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerKilometer(double millipascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(millipascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerMeter(double millipascalsdeltapermeter) => new PressureDeltaPerUnitLength(millipascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerKilometer(double pascalsdeltaperkilometer) => new PressureDeltaPerUnitLength(pascalsdeltaperkilometer, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerMeter(double pascalsdeltapermeter) => new PressureDeltaPerUnitLength(pascalsdeltapermeter, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerFoot(double poundspersquareinchdeltaperfoot) => new PressureDeltaPerUnitLength(poundspersquareinchdeltaperfoot, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerHundredFeet(double poundspersquareinchdeltaperhundredfeet) => new PressureDeltaPerUnitLength(poundspersquareinchdeltaperhundredfeet, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerMile(double poundspersquareinchdeltapermile) => new PressureDeltaPerUnitLength(poundspersquareinchdeltapermile, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureDeltaPerUnitLengthUnit" /> to <see cref="PressureDeltaPerUnitLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PressureDeltaPerUnitLength unit value.</returns>
        public static PressureDeltaPerUnitLength From(double value, PressureDeltaPerUnitLengthUnit fromUnit)
        {
            return new PressureDeltaPerUnitLength(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureDeltaPerUnitLengthUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public PressureDeltaPerUnitLength ToUnit(PressureDeltaPerUnitLengthUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new PressureDeltaPerUnitLength(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (_value*0.001) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (_value) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (_value*0.001) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (_value) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (_value*0.001) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (_value) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (_value*0.001) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (_value) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (_value*0.001) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (_value) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (_value*0.001) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (_value) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (_value*0.001) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (_value) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return _value*0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return _value;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return _value*6894.757293168*3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return _value*6894.757293168*3.28084/100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return _value*6894.757293168*3.28084/5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(PressureDeltaPerUnitLengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (baseUnitValue) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (baseUnitValue) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (baseUnitValue) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (baseUnitValue) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (baseUnitValue) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (baseUnitValue) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (baseUnitValue) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return baseUnitValue/0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return baseUnitValue;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return baseUnitValue/6894.757293168/3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return baseUnitValue/6894.757293168/3.28084*100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return baseUnitValue/6894.757293168/3.28084*5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

