//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Molar equivalent to VolumeFlow.
    /// </summary>
    public struct  MolarFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MolarFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MolarFlowUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MolarFlow(double value, MolarFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MolarFlowUnit BaseUnit { get; } = MolarFlowUnit.GramMolePerHour;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static MolarFlow MaxValue { get; } = new MolarFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static MolarFlow MinValue { get; } = new MolarFlow(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MolarFlow Zero { get; } = new MolarFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get MolarFlow in GramMolesPerHour.
        /// </summary>
        public double GramMolesPerHour => As(MolarFlowUnit.GramMolePerHour);

        /// <summary>
        ///     Get MolarFlow in GramMolesPerMinute.
        /// </summary>
        public double GramMolesPerMinute => As(MolarFlowUnit.GramMolePerMinute);

        /// <summary>
        ///     Get MolarFlow in GramMolesPerSecond.
        /// </summary>
        public double GramMolesPerSecond => As(MolarFlowUnit.GramMolePerSecond);

        /// <summary>
        ///     Get MolarFlow in KilogramMolesPerHour.
        /// </summary>
        public double KilogramMolesPerHour => As(MolarFlowUnit.KilogramMolePerHour);

        /// <summary>
        ///     Get MolarFlow in KilogramMolesPerMinute.
        /// </summary>
        public double KilogramMolesPerMinute => As(MolarFlowUnit.KilogramMolePerMinute);

        /// <summary>
        ///     Get MolarFlow in KilogramMolesPerSecond.
        /// </summary>
        public double KilogramMolesPerSecond => As(MolarFlowUnit.KilogramMolePerSecond);

        /// <summary>
        ///     Get MolarFlow in PoundMolesPerHour.
        /// </summary>
        public double PoundMolesPerHour => As(MolarFlowUnit.PoundMolePerHour);

        /// <summary>
        ///     Get MolarFlow in PoundMolesPerMinute.
        /// </summary>
        public double PoundMolesPerMinute => As(MolarFlowUnit.PoundMolePerMinute);

        /// <summary>
        ///     Get MolarFlow in PoundMolesPerSecond.
        /// </summary>
        public double PoundMolesPerSecond => As(MolarFlowUnit.PoundMolePerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MolarFlow from GramMolesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromGramMolesPerHour(double grammolesperhour) => new MolarFlow(grammolesperhour, MolarFlowUnit.GramMolePerHour);

        /// <summary>
        ///     Get MolarFlow from GramMolesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromGramMolesPerMinute(double grammolesperminute) => new MolarFlow(grammolesperminute, MolarFlowUnit.GramMolePerMinute);

        /// <summary>
        ///     Get MolarFlow from GramMolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromGramMolesPerSecond(double grammolespersecond) => new MolarFlow(grammolespersecond, MolarFlowUnit.GramMolePerSecond);

        /// <summary>
        ///     Get MolarFlow from KilogramMolesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromKilogramMolesPerHour(double kilogrammolesperhour) => new MolarFlow(kilogrammolesperhour, MolarFlowUnit.KilogramMolePerHour);

        /// <summary>
        ///     Get MolarFlow from KilogramMolesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromKilogramMolesPerMinute(double kilogrammolesperminute) => new MolarFlow(kilogrammolesperminute, MolarFlowUnit.KilogramMolePerMinute);

        /// <summary>
        ///     Get MolarFlow from KilogramMolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromKilogramMolesPerSecond(double kilogrammolespersecond) => new MolarFlow(kilogrammolespersecond, MolarFlowUnit.KilogramMolePerSecond);

        /// <summary>
        ///     Get MolarFlow from PoundMolesPerHour.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromPoundMolesPerHour(double poundmolesperhour) => new MolarFlow(poundmolesperhour, MolarFlowUnit.PoundMolePerHour);

        /// <summary>
        ///     Get MolarFlow from PoundMolesPerMinute.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromPoundMolesPerMinute(double poundmolesperminute) => new MolarFlow(poundmolesperminute, MolarFlowUnit.PoundMolePerMinute);

        /// <summary>
        ///     Get MolarFlow from PoundMolesPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarFlow FromPoundMolesPerSecond(double poundmolespersecond) => new MolarFlow(poundmolespersecond, MolarFlowUnit.PoundMolePerSecond);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarFlowUnit" /> to <see cref="MolarFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarFlow unit value.</returns>
        public static MolarFlow From(double value, MolarFlowUnit fromUnit)
        {
            return new MolarFlow(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MolarFlowUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public MolarFlow ToUnit(MolarFlowUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new MolarFlow(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MolarFlowUnit.GramMolePerHour: return _value;
                case MolarFlowUnit.GramMolePerMinute: return _value*60;
                case MolarFlowUnit.GramMolePerSecond: return _value*3600;
                case MolarFlowUnit.KilogramMolePerHour: return (_value) * 1e3d;
                case MolarFlowUnit.KilogramMolePerMinute: return (_value*60) * 1e3d;
                case MolarFlowUnit.KilogramMolePerSecond: return (_value*3600) * 1e3d;
                case MolarFlowUnit.PoundMolePerHour: return _value*453.69237;
                case MolarFlowUnit.PoundMolePerMinute: return _value*60*453.69237;
                case MolarFlowUnit.PoundMolePerSecond: return _value*3600*453.69237;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(MolarFlowUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MolarFlowUnit.GramMolePerHour: return baseUnitValue;
                case MolarFlowUnit.GramMolePerMinute: return baseUnitValue/60;
                case MolarFlowUnit.GramMolePerSecond: return baseUnitValue/3600;
                case MolarFlowUnit.KilogramMolePerHour: return (baseUnitValue) / 1e3d;
                case MolarFlowUnit.KilogramMolePerMinute: return (baseUnitValue/60) / 1e3d;
                case MolarFlowUnit.KilogramMolePerSecond: return (baseUnitValue/3600) / 1e3d;
                case MolarFlowUnit.PoundMolePerHour: return baseUnitValue/453.69237;
                case MolarFlowUnit.PoundMolePerMinute: return baseUnitValue/60/453.69237;
                case MolarFlowUnit.PoundMolePerSecond: return baseUnitValue/3600/453.69237;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

