//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Specific entropy (molar) is an amount of energy required to raise temperature of a substance by 1 Kelvin per unit molar mass.
    /// </summary>
    public struct  SpecificEntropyMolar
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificEntropyMolarUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public SpecificEntropyMolarUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificEntropyMolar(double value, SpecificEntropyMolarUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static SpecificEntropyMolarUnit BaseUnit { get; } = SpecificEntropyMolarUnit.JoulePerMoleKelvin;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static SpecificEntropyMolar MaxValue { get; } = new SpecificEntropyMolar(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static SpecificEntropyMolar MinValue { get; } = new SpecificEntropyMolar(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static SpecificEntropyMolar Zero { get; } = new SpecificEntropyMolar(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get SpecificEntropyMolar in BTUsPerPoundMoleFahrenheit.
        /// </summary>
        public double BTUsPerPoundMoleFahrenheit => As(SpecificEntropyMolarUnit.BTUPerPoundMoleFahrenheit);

        /// <summary>
        ///     Get SpecificEntropyMolar in CaloriesPerMoleKelvin.
        /// </summary>
        public double CaloriesPerMoleKelvin => As(SpecificEntropyMolarUnit.CaloriePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in JoulesPerKilomoleKelvin.
        /// </summary>
        public double JoulesPerKilomoleKelvin => As(SpecificEntropyMolarUnit.JoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in JoulesPerMoleKelvin.
        /// </summary>
        public double JoulesPerMoleKelvin => As(SpecificEntropyMolarUnit.JoulePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in KilojoulesPerKilomoleKelvin.
        /// </summary>
        public double KilojoulesPerKilomoleKelvin => As(SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in KilojoulesPerMoleKelvin.
        /// </summary>
        public double KilojoulesPerMoleKelvin => As(SpecificEntropyMolarUnit.KilojoulePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in MegajoulesPerKilomoleKelvin.
        /// </summary>
        public double MegajoulesPerKilomoleKelvin => As(SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar in MegajoulesPerMoleKelvin.
        /// </summary>
        public double MegajoulesPerMoleKelvin => As(SpecificEntropyMolarUnit.MegajoulePerMoleKelvin);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificEntropyMolar from BTUsPerPoundMoleFahrenheit.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromBTUsPerPoundMoleFahrenheit(double btusperpoundmolefahrenheit) => new SpecificEntropyMolar(btusperpoundmolefahrenheit, SpecificEntropyMolarUnit.BTUPerPoundMoleFahrenheit);

        /// <summary>
        ///     Get SpecificEntropyMolar from CaloriesPerMoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromCaloriesPerMoleKelvin(double caloriespermolekelvin) => new SpecificEntropyMolar(caloriespermolekelvin, SpecificEntropyMolarUnit.CaloriePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from JoulesPerKilomoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromJoulesPerKilomoleKelvin(double joulesperkilomolekelvin) => new SpecificEntropyMolar(joulesperkilomolekelvin, SpecificEntropyMolarUnit.JoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from JoulesPerMoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromJoulesPerMoleKelvin(double joulespermolekelvin) => new SpecificEntropyMolar(joulespermolekelvin, SpecificEntropyMolarUnit.JoulePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from KilojoulesPerKilomoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromKilojoulesPerKilomoleKelvin(double kilojoulesperkilomolekelvin) => new SpecificEntropyMolar(kilojoulesperkilomolekelvin, SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from KilojoulesPerMoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromKilojoulesPerMoleKelvin(double kilojoulespermolekelvin) => new SpecificEntropyMolar(kilojoulespermolekelvin, SpecificEntropyMolarUnit.KilojoulePerMoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from MegajoulesPerKilomoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromMegajoulesPerKilomoleKelvin(double megajoulesperkilomolekelvin) => new SpecificEntropyMolar(megajoulesperkilomolekelvin, SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin);

        /// <summary>
        ///     Get SpecificEntropyMolar from MegajoulesPerMoleKelvin.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificEntropyMolar FromMegajoulesPerMoleKelvin(double megajoulespermolekelvin) => new SpecificEntropyMolar(megajoulespermolekelvin, SpecificEntropyMolarUnit.MegajoulePerMoleKelvin);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificEntropyMolarUnit" /> to <see cref="SpecificEntropyMolar" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificEntropyMolar unit value.</returns>
        public static SpecificEntropyMolar From(double value, SpecificEntropyMolarUnit fromUnit)
        {
            return new SpecificEntropyMolar(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificEntropyMolarUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public SpecificEntropyMolar ToUnit(SpecificEntropyMolarUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new SpecificEntropyMolar(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificEntropyMolarUnit.BTUPerPoundMoleFahrenheit: return _value*(1/453.59237*1055.05585262*9/5);
                case SpecificEntropyMolarUnit.CaloriePerMoleKelvin: return _value * 4184;
                case SpecificEntropyMolarUnit.JoulePerKilomoleKelvin: return _value*1000;
                case SpecificEntropyMolarUnit.JoulePerMoleKelvin: return _value;
                case SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin: return (_value*1000) * 1e3d;
                case SpecificEntropyMolarUnit.KilojoulePerMoleKelvin: return (_value) * 1e3d;
                case SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin: return (_value*1000) * 1e6d;
                case SpecificEntropyMolarUnit.MegajoulePerMoleKelvin: return (_value) * 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificEntropyMolarUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificEntropyMolarUnit.BTUPerPoundMoleFahrenheit: return baseUnitValue/(1/453.59237*1055.05585262*9/5);
                case SpecificEntropyMolarUnit.CaloriePerMoleKelvin: return baseUnitValue / 4184;
                case SpecificEntropyMolarUnit.JoulePerKilomoleKelvin: return baseUnitValue/1000;
                case SpecificEntropyMolarUnit.JoulePerMoleKelvin: return baseUnitValue;
                case SpecificEntropyMolarUnit.KilojoulePerKilomoleKelvin: return (baseUnitValue/1000) / 1e3d;
                case SpecificEntropyMolarUnit.KilojoulePerMoleKelvin: return (baseUnitValue) / 1e3d;
                case SpecificEntropyMolarUnit.MegajoulePerKilomoleKelvin: return (baseUnitValue/1000) / 1e6d;
                case SpecificEntropyMolarUnit.MegajoulePerMoleKelvin: return (baseUnitValue) / 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

