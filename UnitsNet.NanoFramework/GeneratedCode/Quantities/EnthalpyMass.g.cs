//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Enthalpy is a measure.
    /// </summary>
    public struct  EnthalpyMass
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnthalpyMassUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public EnthalpyMassUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public EnthalpyMass(double value, EnthalpyMassUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static EnthalpyMassUnit BaseUnit { get; } = EnthalpyMassUnit.JoulePerKilogram;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static EnthalpyMass MaxValue { get; } = new EnthalpyMass(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static EnthalpyMass MinValue { get; } = new EnthalpyMass(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static EnthalpyMass Zero { get; } = new EnthalpyMass(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get EnthalpyMass in BTUsPerPound.
        /// </summary>
        public double BTUsPerPound => As(EnthalpyMassUnit.BTUPerPound);

        /// <summary>
        ///     Get EnthalpyMass in CaloriesPerGram.
        /// </summary>
        public double CaloriesPerGram => As(EnthalpyMassUnit.CaloriePerGram);

        /// <summary>
        ///     Get EnthalpyMass in JoulesPerKilogram.
        /// </summary>
        public double JoulesPerKilogram => As(EnthalpyMassUnit.JoulePerKilogram);

        /// <summary>
        ///     Get EnthalpyMass in KilocaloriesPerGram.
        /// </summary>
        public double KilocaloriesPerGram => As(EnthalpyMassUnit.KilocaloriePerGram);

        /// <summary>
        ///     Get EnthalpyMass in KilojoulesPerKilogram.
        /// </summary>
        public double KilojoulesPerKilogram => As(EnthalpyMassUnit.KilojoulePerKilogram);

        /// <summary>
        ///     Get EnthalpyMass in MegajoulesPerKilogram.
        /// </summary>
        public double MegajoulesPerKilogram => As(EnthalpyMassUnit.MegajoulePerKilogram);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get EnthalpyMass from BTUsPerPound.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromBTUsPerPound(double btusperpound) => new EnthalpyMass(btusperpound, EnthalpyMassUnit.BTUPerPound);

        /// <summary>
        ///     Get EnthalpyMass from CaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromCaloriesPerGram(double caloriespergram) => new EnthalpyMass(caloriespergram, EnthalpyMassUnit.CaloriePerGram);

        /// <summary>
        ///     Get EnthalpyMass from JoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromJoulesPerKilogram(double joulesperkilogram) => new EnthalpyMass(joulesperkilogram, EnthalpyMassUnit.JoulePerKilogram);

        /// <summary>
        ///     Get EnthalpyMass from KilocaloriesPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromKilocaloriesPerGram(double kilocaloriespergram) => new EnthalpyMass(kilocaloriespergram, EnthalpyMassUnit.KilocaloriePerGram);

        /// <summary>
        ///     Get EnthalpyMass from KilojoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromKilojoulesPerKilogram(double kilojoulesperkilogram) => new EnthalpyMass(kilojoulesperkilogram, EnthalpyMassUnit.KilojoulePerKilogram);

        /// <summary>
        ///     Get EnthalpyMass from MegajoulesPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnthalpyMass FromMegajoulesPerKilogram(double megajoulesperkilogram) => new EnthalpyMass(megajoulesperkilogram, EnthalpyMassUnit.MegajoulePerKilogram);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnthalpyMassUnit" /> to <see cref="EnthalpyMass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>EnthalpyMass unit value.</returns>
        public static EnthalpyMass From(double value, EnthalpyMassUnit fromUnit)
        {
            return new EnthalpyMass(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnthalpyMassUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public EnthalpyMass ToUnit(EnthalpyMassUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new EnthalpyMass(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case EnthalpyMassUnit.BTUPerPound: return _value*(1055.05585262/0.4535927);
                case EnthalpyMassUnit.CaloriePerGram: return _value*4184;
                case EnthalpyMassUnit.JoulePerKilogram: return _value;
                case EnthalpyMassUnit.KilocaloriePerGram: return (_value*4184) * 1e3d;
                case EnthalpyMassUnit.KilojoulePerKilogram: return (_value) * 1e3d;
                case EnthalpyMassUnit.MegajoulePerKilogram: return (_value) * 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(EnthalpyMassUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case EnthalpyMassUnit.BTUPerPound: return baseUnitValue/(1055.05585262/0.4535927);
                case EnthalpyMassUnit.CaloriePerGram: return baseUnitValue/4184;
                case EnthalpyMassUnit.JoulePerKilogram: return baseUnitValue;
                case EnthalpyMassUnit.KilocaloriePerGram: return (baseUnitValue/4184) / 1e3d;
                case EnthalpyMassUnit.KilojoulePerKilogram: return (baseUnitValue) / 1e3d;
                case EnthalpyMassUnit.MegajoulePerKilogram: return (baseUnitValue) / 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

