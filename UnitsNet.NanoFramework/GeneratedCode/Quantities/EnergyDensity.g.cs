//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Energy density, in physics, is the amount of energy contained per unit of volume of an object.
    /// </summary>
    public struct  EnergyDensity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly EnergyDensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public EnergyDensityUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public EnergyDensity(double value, EnergyDensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static EnergyDensityUnit BaseUnit { get; } = EnergyDensityUnit.JoulePerCubicMeter;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static EnergyDensity MaxValue { get; } = new EnergyDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static EnergyDensity MinValue { get; } = new EnergyDensity(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static EnergyDensity Zero { get; } = new EnergyDensity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get EnergyDensity in BTUsPerCubicFeet.
        /// </summary>
        public double BTUsPerCubicFeet => As(EnergyDensityUnit.BTUPerCubicFoot);

        /// <summary>
        ///     Get EnergyDensity in CaloriesPerCubicMeter.
        /// </summary>
        public double CaloriesPerCubicMeter => As(EnergyDensityUnit.CaloriePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity in JoulesPerCubicMeter.
        /// </summary>
        public double JoulesPerCubicMeter => As(EnergyDensityUnit.JoulePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity in KilocaloriesPerCubicMeter.
        /// </summary>
        public double KilocaloriesPerCubicMeter => As(EnergyDensityUnit.KilocaloriePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity in KilojoulesPerCubicMeter.
        /// </summary>
        public double KilojoulesPerCubicMeter => As(EnergyDensityUnit.KilojoulePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity in MegajoulesPerCubicMeter.
        /// </summary>
        public double MegajoulesPerCubicMeter => As(EnergyDensityUnit.MegajoulePerCubicMeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get EnergyDensity from BTUsPerCubicFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromBTUsPerCubicFeet(double btuspercubicfeet) => new EnergyDensity(btuspercubicfeet, EnergyDensityUnit.BTUPerCubicFoot);

        /// <summary>
        ///     Get EnergyDensity from CaloriesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromCaloriesPerCubicMeter(double caloriespercubicmeter) => new EnergyDensity(caloriespercubicmeter, EnergyDensityUnit.CaloriePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity from JoulesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromJoulesPerCubicMeter(double joulespercubicmeter) => new EnergyDensity(joulespercubicmeter, EnergyDensityUnit.JoulePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity from KilocaloriesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromKilocaloriesPerCubicMeter(double kilocaloriespercubicmeter) => new EnergyDensity(kilocaloriespercubicmeter, EnergyDensityUnit.KilocaloriePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity from KilojoulesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromKilojoulesPerCubicMeter(double kilojoulespercubicmeter) => new EnergyDensity(kilojoulespercubicmeter, EnergyDensityUnit.KilojoulePerCubicMeter);

        /// <summary>
        ///     Get EnergyDensity from MegajoulesPerCubicMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static EnergyDensity FromMegajoulesPerCubicMeter(double megajoulespercubicmeter) => new EnergyDensity(megajoulespercubicmeter, EnergyDensityUnit.MegajoulePerCubicMeter);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="EnergyDensityUnit" /> to <see cref="EnergyDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>EnergyDensity unit value.</returns>
        public static EnergyDensity From(double value, EnergyDensityUnit fromUnit)
        {
            return new EnergyDensity(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(EnergyDensityUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public EnergyDensity ToUnit(EnergyDensityUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new EnergyDensity(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case EnergyDensityUnit.BTUPerCubicFoot: return _value*(1055.05585262*1/0.3048*1/0.3048*1/0.3048);
                case EnergyDensityUnit.CaloriePerCubicMeter: return _value*4.184;
                case EnergyDensityUnit.JoulePerCubicMeter: return _value;
                case EnergyDensityUnit.KilocaloriePerCubicMeter: return (_value*4.184) * 1e3d;
                case EnergyDensityUnit.KilojoulePerCubicMeter: return (_value) * 1e3d;
                case EnergyDensityUnit.MegajoulePerCubicMeter: return (_value) * 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(EnergyDensityUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case EnergyDensityUnit.BTUPerCubicFoot: return baseUnitValue/(1055.05585262*1/0.3048*1/0.3048*1/0.3048);
                case EnergyDensityUnit.CaloriePerCubicMeter: return baseUnitValue/4.184;
                case EnergyDensityUnit.JoulePerCubicMeter: return baseUnitValue;
                case EnergyDensityUnit.KilocaloriePerCubicMeter: return (baseUnitValue/4.184) / 1e3d;
                case EnergyDensityUnit.KilojoulePerCubicMeter: return (baseUnitValue) / 1e3d;
                case EnergyDensityUnit.MegajoulePerCubicMeter: return (baseUnitValue) / 1e6d;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

