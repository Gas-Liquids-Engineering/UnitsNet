//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In thermodynamics, the specific volume of a substance is the ratio of the substance's volume to its mass. It is the reciprocal of density and an intrinsic property of matter as well.
    /// </summary>
    public struct  SpecificVolume
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly SpecificVolumeUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public SpecificVolumeUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public SpecificVolume(double value, SpecificVolumeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static SpecificVolumeUnit BaseUnit { get; } = SpecificVolumeUnit.CubicMeterPerKilogram;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static SpecificVolume MaxValue { get; } = new SpecificVolume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static SpecificVolume MinValue { get; } = new SpecificVolume(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static SpecificVolume Zero { get; } = new SpecificVolume(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get SpecificVolume in CubicFeetPerPound.
        /// </summary>
        public double CubicFeetPerPound => As(SpecificVolumeUnit.CubicFootPerPound);

        /// <summary>
        ///     Get SpecificVolume in CubicMetersPerKilogram.
        /// </summary>
        public double CubicMetersPerKilogram => As(SpecificVolumeUnit.CubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in LitersPerGram.
        /// </summary>
        public double LitersPerGram => As(SpecificVolumeUnit.LiterPerGram);

        /// <summary>
        ///     Get SpecificVolume in MillicubicMetersPerKilogram.
        /// </summary>
        public double MillicubicMetersPerKilogram => As(SpecificVolumeUnit.MillicubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume in MillilitersPerGram.
        /// </summary>
        public double MillilitersPerGram => As(SpecificVolumeUnit.MilliliterPerGram);

        /// <summary>
        ///     Get SpecificVolume in USGallonsPerPound.
        /// </summary>
        public double USGallonsPerPound => As(SpecificVolumeUnit.USGallonPerPound);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get SpecificVolume from CubicFeetPerPound.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromCubicFeetPerPound(double cubicfeetperpound) => new SpecificVolume(cubicfeetperpound, SpecificVolumeUnit.CubicFootPerPound);

        /// <summary>
        ///     Get SpecificVolume from CubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromCubicMetersPerKilogram(double cubicmetersperkilogram) => new SpecificVolume(cubicmetersperkilogram, SpecificVolumeUnit.CubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume from LitersPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromLitersPerGram(double literspergram) => new SpecificVolume(literspergram, SpecificVolumeUnit.LiterPerGram);

        /// <summary>
        ///     Get SpecificVolume from MillicubicMetersPerKilogram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromMillicubicMetersPerKilogram(double millicubicmetersperkilogram) => new SpecificVolume(millicubicmetersperkilogram, SpecificVolumeUnit.MillicubicMeterPerKilogram);

        /// <summary>
        ///     Get SpecificVolume from MillilitersPerGram.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromMillilitersPerGram(double milliliterspergram) => new SpecificVolume(milliliterspergram, SpecificVolumeUnit.MilliliterPerGram);

        /// <summary>
        ///     Get SpecificVolume from USGallonsPerPound.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static SpecificVolume FromUSGallonsPerPound(double usgallonsperpound) => new SpecificVolume(usgallonsperpound, SpecificVolumeUnit.USGallonPerPound);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpecificVolumeUnit" /> to <see cref="SpecificVolume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>SpecificVolume unit value.</returns>
        public static SpecificVolume From(double value, SpecificVolumeUnit fromUnit)
        {
            return new SpecificVolume(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(SpecificVolumeUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public SpecificVolume ToUnit(SpecificVolumeUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new SpecificVolume(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case SpecificVolumeUnit.CubicFootPerPound: return _value*(0.3048*0.3048*0.3048*1/0.45359237);
                case SpecificVolumeUnit.CubicMeterPerKilogram: return _value;
                case SpecificVolumeUnit.LiterPerGram: return _value;
                case SpecificVolumeUnit.MillicubicMeterPerKilogram: return (_value) * 1e-3d;
                case SpecificVolumeUnit.MilliliterPerGram: return (_value) * 1e-3d;
                case SpecificVolumeUnit.USGallonPerPound: return _value*(231*1/0.45359237*0.0254*0.0254*0.0254);
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(SpecificVolumeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case SpecificVolumeUnit.CubicFootPerPound: return baseUnitValue/(0.3048*0.3048*0.3048*1/0.45359237);
                case SpecificVolumeUnit.CubicMeterPerKilogram: return baseUnitValue;
                case SpecificVolumeUnit.LiterPerGram: return baseUnitValue;
                case SpecificVolumeUnit.MillicubicMeterPerKilogram: return (baseUnitValue) / 1e-3d;
                case SpecificVolumeUnit.MilliliterPerGram: return (baseUnitValue) / 1e-3d;
                case SpecificVolumeUnit.USGallonPerPound: return baseUnitValue/(231*1/0.45359237*0.0254*0.0254*0.0254);
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

