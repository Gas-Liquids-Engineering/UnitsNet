//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Time is a measure of the fourth dimension.
    /// </summary>
    public struct  Time
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TimeUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public TimeUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public Time(double value, TimeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static TimeUnit BaseUnit { get; } = TimeUnit.Second;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static Time MaxValue { get; } = new Time(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static Time MinValue { get; } = new Time(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Time Zero { get; } = new Time(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get Time in Centiseconds.
        /// </summary>
        public double Centiseconds => As(TimeUnit.Centisecond);

        /// <summary>
        ///     Get Time in FeetPerSecond.
        /// </summary>
        public double FeetPerSecond => As(TimeUnit.Day);

        /// <summary>
        ///     Get Time in Deciseconds.
        /// </summary>
        public double Deciseconds => As(TimeUnit.Decisecond);

        /// <summary>
        ///     Get Time in Hours.
        /// </summary>
        public double Hours => As(TimeUnit.Hour);

        /// <summary>
        ///     Get Time in Kiloseconds.
        /// </summary>
        public double Kiloseconds => As(TimeUnit.Kilosecond);

        /// <summary>
        ///     Get Time in Microseconds.
        /// </summary>
        public double Microseconds => As(TimeUnit.Microsecond);

        /// <summary>
        ///     Get Time in Milliseconds.
        /// </summary>
        public double Milliseconds => As(TimeUnit.Millisecond);

        /// <summary>
        ///     Get Time in Minutes.
        /// </summary>
        public double Minutes => As(TimeUnit.Minute);

        /// <summary>
        ///     Get Time in Nanoseconds.
        /// </summary>
        public double Nanoseconds => As(TimeUnit.Nanosecond);

        /// <summary>
        ///     Get Time in Seconds.
        /// </summary>
        public double Seconds => As(TimeUnit.Second);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get Time from Centiseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromCentiseconds(double centiseconds) => new Time(centiseconds, TimeUnit.Centisecond);

        /// <summary>
        ///     Get Time from FeetPerSecond.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromFeetPerSecond(double feetpersecond) => new Time(feetpersecond, TimeUnit.Day);

        /// <summary>
        ///     Get Time from Deciseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromDeciseconds(double deciseconds) => new Time(deciseconds, TimeUnit.Decisecond);

        /// <summary>
        ///     Get Time from Hours.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromHours(double hours) => new Time(hours, TimeUnit.Hour);

        /// <summary>
        ///     Get Time from Kiloseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromKiloseconds(double kiloseconds) => new Time(kiloseconds, TimeUnit.Kilosecond);

        /// <summary>
        ///     Get Time from Microseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromMicroseconds(double microseconds) => new Time(microseconds, TimeUnit.Microsecond);

        /// <summary>
        ///     Get Time from Milliseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromMilliseconds(double milliseconds) => new Time(milliseconds, TimeUnit.Millisecond);

        /// <summary>
        ///     Get Time from Minutes.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromMinutes(double minutes) => new Time(minutes, TimeUnit.Minute);

        /// <summary>
        ///     Get Time from Nanoseconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromNanoseconds(double nanoseconds) => new Time(nanoseconds, TimeUnit.Nanosecond);

        /// <summary>
        ///     Get Time from Seconds.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static Time FromSeconds(double seconds) => new Time(seconds, TimeUnit.Second);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TimeUnit" /> to <see cref="Time" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Time unit value.</returns>
        public static Time From(double value, TimeUnit fromUnit)
        {
            return new Time(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(TimeUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public Time ToUnit(TimeUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new Time(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case TimeUnit.Centisecond: return (_value) * 1e-2d;
                case TimeUnit.Day: return _value/86400;
                case TimeUnit.Decisecond: return (_value) * 1e-1d;
                case TimeUnit.Hour: return _value/3600;
                case TimeUnit.Kilosecond: return (_value) * 1e3d;
                case TimeUnit.Microsecond: return (_value) * 1e-6d;
                case TimeUnit.Millisecond: return (_value) * 1e-3d;
                case TimeUnit.Minute: return _value/60;
                case TimeUnit.Nanosecond: return (_value) * 1e-9d;
                case TimeUnit.Second: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(TimeUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case TimeUnit.Centisecond: return (baseUnitValue) / 1e-2d;
                case TimeUnit.Day: return baseUnitValue*86400;
                case TimeUnit.Decisecond: return (baseUnitValue) / 1e-1d;
                case TimeUnit.Hour: return baseUnitValue*3600;
                case TimeUnit.Kilosecond: return (baseUnitValue) / 1e3d;
                case TimeUnit.Microsecond: return (baseUnitValue) / 1e-6d;
                case TimeUnit.Millisecond: return (baseUnitValue) / 1e-3d;
                case TimeUnit.Minute: return baseUnitValue*60;
                case TimeUnit.Nanosecond: return (baseUnitValue) / 1e-9d;
                case TimeUnit.Second: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

