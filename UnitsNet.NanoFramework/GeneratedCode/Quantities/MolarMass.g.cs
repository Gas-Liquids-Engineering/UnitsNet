//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In chemistry, the molar mass M is a physical property defined as the mass of a given substance (chemical element or chemical compound) divided by the amount of substance.
    /// </summary>
    public struct  MolarMass
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MolarMassUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MolarMassUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public MolarMass(double value, MolarMassUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static MolarMassUnit BaseUnit { get; } = MolarMassUnit.KilogramPerMole;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static MolarMass MaxValue { get; } = new MolarMass(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static MolarMass MinValue { get; } = new MolarMass(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MolarMass Zero { get; } = new MolarMass(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get MolarMass in CentigramsPerKilomole.
        /// </summary>
        public double CentigramsPerKilomole => As(MolarMassUnit.CentigramPerKilomole);

        /// <summary>
        ///     Get MolarMass in CentigramsPerMole.
        /// </summary>
        public double CentigramsPerMole => As(MolarMassUnit.CentigramPerMole);

        /// <summary>
        ///     Get MolarMass in DecagramsPerKilomole.
        /// </summary>
        public double DecagramsPerKilomole => As(MolarMassUnit.DecagramPerKilomole);

        /// <summary>
        ///     Get MolarMass in DecagramsPerMole.
        /// </summary>
        public double DecagramsPerMole => As(MolarMassUnit.DecagramPerMole);

        /// <summary>
        ///     Get MolarMass in DecigramsPerKilomole.
        /// </summary>
        public double DecigramsPerKilomole => As(MolarMassUnit.DecigramPerKilomole);

        /// <summary>
        ///     Get MolarMass in DecigramsPerMole.
        /// </summary>
        public double DecigramsPerMole => As(MolarMassUnit.DecigramPerMole);

        /// <summary>
        ///     Get MolarMass in GramsPerKilomole.
        /// </summary>
        public double GramsPerKilomole => As(MolarMassUnit.GramPerKilomole);

        /// <summary>
        ///     Get MolarMass in GramsPerMole.
        /// </summary>
        public double GramsPerMole => As(MolarMassUnit.GramPerMole);

        /// <summary>
        ///     Get MolarMass in GramsPerPoundMole.
        /// </summary>
        public double GramsPerPoundMole => As(MolarMassUnit.GramPerPoundMole);

        /// <summary>
        ///     Get MolarMass in HectogramsPerKilomole.
        /// </summary>
        public double HectogramsPerKilomole => As(MolarMassUnit.HectogramPerKilomole);

        /// <summary>
        ///     Get MolarMass in HectogramsPerMole.
        /// </summary>
        public double HectogramsPerMole => As(MolarMassUnit.HectogramPerMole);

        /// <summary>
        ///     Get MolarMass in KilogramsPerKilomole.
        /// </summary>
        public double KilogramsPerKilomole => As(MolarMassUnit.KilogramPerKilomole);

        /// <summary>
        ///     Get MolarMass in KilogramsPerMole.
        /// </summary>
        public double KilogramsPerMole => As(MolarMassUnit.KilogramPerMole);

        /// <summary>
        ///     Get MolarMass in KilogramsPerPoundMole.
        /// </summary>
        public double KilogramsPerPoundMole => As(MolarMassUnit.KilogramPerPoundMole);

        /// <summary>
        ///     Get MolarMass in KilopoundsPerKilomole.
        /// </summary>
        public double KilopoundsPerKilomole => As(MolarMassUnit.KilopoundPerKilomole);

        /// <summary>
        ///     Get MolarMass in KilopoundsPerMole.
        /// </summary>
        public double KilopoundsPerMole => As(MolarMassUnit.KilopoundPerMole);

        /// <summary>
        ///     Get MolarMass in KilopoundsPerPoundMole.
        /// </summary>
        public double KilopoundsPerPoundMole => As(MolarMassUnit.KilopoundPerPoundMole);

        /// <summary>
        ///     Get MolarMass in MicrogramsPerKilomole.
        /// </summary>
        public double MicrogramsPerKilomole => As(MolarMassUnit.MicrogramPerKilomole);

        /// <summary>
        ///     Get MolarMass in MicrogramsPerMole.
        /// </summary>
        public double MicrogramsPerMole => As(MolarMassUnit.MicrogramPerMole);

        /// <summary>
        ///     Get MolarMass in MilligramsPerKilomole.
        /// </summary>
        public double MilligramsPerKilomole => As(MolarMassUnit.MilligramPerKilomole);

        /// <summary>
        ///     Get MolarMass in MilligramsPerMole.
        /// </summary>
        public double MilligramsPerMole => As(MolarMassUnit.MilligramPerMole);

        /// <summary>
        ///     Get MolarMass in NanogramsPerKilomole.
        /// </summary>
        public double NanogramsPerKilomole => As(MolarMassUnit.NanogramPerKilomole);

        /// <summary>
        ///     Get MolarMass in NanogramsPerMole.
        /// </summary>
        public double NanogramsPerMole => As(MolarMassUnit.NanogramPerMole);

        /// <summary>
        ///     Get MolarMass in PoundsPerKilomole.
        /// </summary>
        public double PoundsPerKilomole => As(MolarMassUnit.PoundPerKilomole);

        /// <summary>
        ///     Get MolarMass in PoundsPerMole.
        /// </summary>
        public double PoundsPerMole => As(MolarMassUnit.PoundPerMole);

        /// <summary>
        ///     Get MolarMass in PoundsPerPoundMole.
        /// </summary>
        public double PoundsPerPoundMole => As(MolarMassUnit.PoundPerPoundMole);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get MolarMass from CentigramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromCentigramsPerKilomole(double centigramsperkilomole) => new MolarMass(centigramsperkilomole, MolarMassUnit.CentigramPerKilomole);

        /// <summary>
        ///     Get MolarMass from CentigramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromCentigramsPerMole(double centigramspermole) => new MolarMass(centigramspermole, MolarMassUnit.CentigramPerMole);

        /// <summary>
        ///     Get MolarMass from DecagramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromDecagramsPerKilomole(double decagramsperkilomole) => new MolarMass(decagramsperkilomole, MolarMassUnit.DecagramPerKilomole);

        /// <summary>
        ///     Get MolarMass from DecagramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromDecagramsPerMole(double decagramspermole) => new MolarMass(decagramspermole, MolarMassUnit.DecagramPerMole);

        /// <summary>
        ///     Get MolarMass from DecigramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromDecigramsPerKilomole(double decigramsperkilomole) => new MolarMass(decigramsperkilomole, MolarMassUnit.DecigramPerKilomole);

        /// <summary>
        ///     Get MolarMass from DecigramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromDecigramsPerMole(double decigramspermole) => new MolarMass(decigramspermole, MolarMassUnit.DecigramPerMole);

        /// <summary>
        ///     Get MolarMass from GramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromGramsPerKilomole(double gramsperkilomole) => new MolarMass(gramsperkilomole, MolarMassUnit.GramPerKilomole);

        /// <summary>
        ///     Get MolarMass from GramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromGramsPerMole(double gramspermole) => new MolarMass(gramspermole, MolarMassUnit.GramPerMole);

        /// <summary>
        ///     Get MolarMass from GramsPerPoundMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromGramsPerPoundMole(double gramsperpoundmole) => new MolarMass(gramsperpoundmole, MolarMassUnit.GramPerPoundMole);

        /// <summary>
        ///     Get MolarMass from HectogramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromHectogramsPerKilomole(double hectogramsperkilomole) => new MolarMass(hectogramsperkilomole, MolarMassUnit.HectogramPerKilomole);

        /// <summary>
        ///     Get MolarMass from HectogramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromHectogramsPerMole(double hectogramspermole) => new MolarMass(hectogramspermole, MolarMassUnit.HectogramPerMole);

        /// <summary>
        ///     Get MolarMass from KilogramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilogramsPerKilomole(double kilogramsperkilomole) => new MolarMass(kilogramsperkilomole, MolarMassUnit.KilogramPerKilomole);

        /// <summary>
        ///     Get MolarMass from KilogramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilogramsPerMole(double kilogramspermole) => new MolarMass(kilogramspermole, MolarMassUnit.KilogramPerMole);

        /// <summary>
        ///     Get MolarMass from KilogramsPerPoundMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilogramsPerPoundMole(double kilogramsperpoundmole) => new MolarMass(kilogramsperpoundmole, MolarMassUnit.KilogramPerPoundMole);

        /// <summary>
        ///     Get MolarMass from KilopoundsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilopoundsPerKilomole(double kilopoundsperkilomole) => new MolarMass(kilopoundsperkilomole, MolarMassUnit.KilopoundPerKilomole);

        /// <summary>
        ///     Get MolarMass from KilopoundsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilopoundsPerMole(double kilopoundspermole) => new MolarMass(kilopoundspermole, MolarMassUnit.KilopoundPerMole);

        /// <summary>
        ///     Get MolarMass from KilopoundsPerPoundMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromKilopoundsPerPoundMole(double kilopoundsperpoundmole) => new MolarMass(kilopoundsperpoundmole, MolarMassUnit.KilopoundPerPoundMole);

        /// <summary>
        ///     Get MolarMass from MicrogramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromMicrogramsPerKilomole(double microgramsperkilomole) => new MolarMass(microgramsperkilomole, MolarMassUnit.MicrogramPerKilomole);

        /// <summary>
        ///     Get MolarMass from MicrogramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromMicrogramsPerMole(double microgramspermole) => new MolarMass(microgramspermole, MolarMassUnit.MicrogramPerMole);

        /// <summary>
        ///     Get MolarMass from MilligramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromMilligramsPerKilomole(double milligramsperkilomole) => new MolarMass(milligramsperkilomole, MolarMassUnit.MilligramPerKilomole);

        /// <summary>
        ///     Get MolarMass from MilligramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromMilligramsPerMole(double milligramspermole) => new MolarMass(milligramspermole, MolarMassUnit.MilligramPerMole);

        /// <summary>
        ///     Get MolarMass from NanogramsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromNanogramsPerKilomole(double nanogramsperkilomole) => new MolarMass(nanogramsperkilomole, MolarMassUnit.NanogramPerKilomole);

        /// <summary>
        ///     Get MolarMass from NanogramsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromNanogramsPerMole(double nanogramspermole) => new MolarMass(nanogramspermole, MolarMassUnit.NanogramPerMole);

        /// <summary>
        ///     Get MolarMass from PoundsPerKilomole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromPoundsPerKilomole(double poundsperkilomole) => new MolarMass(poundsperkilomole, MolarMassUnit.PoundPerKilomole);

        /// <summary>
        ///     Get MolarMass from PoundsPerMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromPoundsPerMole(double poundspermole) => new MolarMass(poundspermole, MolarMassUnit.PoundPerMole);

        /// <summary>
        ///     Get MolarMass from PoundsPerPoundMole.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static MolarMass FromPoundsPerPoundMole(double poundsperpoundmole) => new MolarMass(poundsperpoundmole, MolarMassUnit.PoundPerPoundMole);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarMassUnit" /> to <see cref="MolarMass" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarMass unit value.</returns>
        public static MolarMass From(double value, MolarMassUnit fromUnit)
        {
            return new MolarMass(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(MolarMassUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public MolarMass ToUnit(MolarMassUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new MolarMass(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case MolarMassUnit.CentigramPerKilomole: return (_value*1e-6) * 1e-2d;
                case MolarMassUnit.CentigramPerMole: return (_value*1e-3) * 1e-2d;
                case MolarMassUnit.DecagramPerKilomole: return (_value*1e-6) * 1e1d;
                case MolarMassUnit.DecagramPerMole: return (_value*1e-3) * 1e1d;
                case MolarMassUnit.DecigramPerKilomole: return (_value*1e-6) * 1e-1d;
                case MolarMassUnit.DecigramPerMole: return (_value*1e-3) * 1e-1d;
                case MolarMassUnit.GramPerKilomole: return _value*1e-6;
                case MolarMassUnit.GramPerMole: return _value*1e-3;
                case MolarMassUnit.GramPerPoundMole: return _value*(1/1000.0*1/453.59237);
                case MolarMassUnit.HectogramPerKilomole: return (_value*1e-6) * 1e2d;
                case MolarMassUnit.HectogramPerMole: return (_value*1e-3) * 1e2d;
                case MolarMassUnit.KilogramPerKilomole: return (_value*1e-6) * 1e3d;
                case MolarMassUnit.KilogramPerMole: return (_value*1e-3) * 1e3d;
                case MolarMassUnit.KilogramPerPoundMole: return (_value*(1/1000.0*1/453.59237)) * 1e3d;
                case MolarMassUnit.KilopoundPerKilomole: return (_value*(0.45359237/1e3)) * 1e3d;
                case MolarMassUnit.KilopoundPerMole: return (_value*0.45359237) * 1e3d;
                case MolarMassUnit.KilopoundPerPoundMole: return (_value*1e-3) * 1e3d;
                case MolarMassUnit.MicrogramPerKilomole: return (_value*1e-6) * 1e-6d;
                case MolarMassUnit.MicrogramPerMole: return (_value*1e-3) * 1e-6d;
                case MolarMassUnit.MilligramPerKilomole: return (_value*1e-6) * 1e-3d;
                case MolarMassUnit.MilligramPerMole: return (_value*1e-3) * 1e-3d;
                case MolarMassUnit.NanogramPerKilomole: return (_value*1e-6) * 1e-9d;
                case MolarMassUnit.NanogramPerMole: return (_value*1e-3) * 1e-9d;
                case MolarMassUnit.PoundPerKilomole: return _value*(0.45359237/1e3);
                case MolarMassUnit.PoundPerMole: return _value*0.45359237;
                case MolarMassUnit.PoundPerPoundMole: return _value*1e-3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(MolarMassUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case MolarMassUnit.CentigramPerKilomole: return (baseUnitValue/1e-6) / 1e-2d;
                case MolarMassUnit.CentigramPerMole: return (baseUnitValue/1e-3) / 1e-2d;
                case MolarMassUnit.DecagramPerKilomole: return (baseUnitValue/1e-6) / 1e1d;
                case MolarMassUnit.DecagramPerMole: return (baseUnitValue/1e-3) / 1e1d;
                case MolarMassUnit.DecigramPerKilomole: return (baseUnitValue/1e-6) / 1e-1d;
                case MolarMassUnit.DecigramPerMole: return (baseUnitValue/1e-3) / 1e-1d;
                case MolarMassUnit.GramPerKilomole: return baseUnitValue/1e-6;
                case MolarMassUnit.GramPerMole: return baseUnitValue/1e-3;
                case MolarMassUnit.GramPerPoundMole: return baseUnitValue/(1/1000.0*1/453.59237);
                case MolarMassUnit.HectogramPerKilomole: return (baseUnitValue/1e-6) / 1e2d;
                case MolarMassUnit.HectogramPerMole: return (baseUnitValue/1e-3) / 1e2d;
                case MolarMassUnit.KilogramPerKilomole: return (baseUnitValue/1e-6) / 1e3d;
                case MolarMassUnit.KilogramPerMole: return (baseUnitValue/1e-3) / 1e3d;
                case MolarMassUnit.KilogramPerPoundMole: return (baseUnitValue/(1/1000.0*1/453.59237)) / 1e3d;
                case MolarMassUnit.KilopoundPerKilomole: return (baseUnitValue/(0.45359237/1e3)) / 1e3d;
                case MolarMassUnit.KilopoundPerMole: return (baseUnitValue/0.45359237) / 1e3d;
                case MolarMassUnit.KilopoundPerPoundMole: return (baseUnitValue/1e-3) / 1e3d;
                case MolarMassUnit.MicrogramPerKilomole: return (baseUnitValue/1e-6) / 1e-6d;
                case MolarMassUnit.MicrogramPerMole: return (baseUnitValue/1e-3) / 1e-6d;
                case MolarMassUnit.MilligramPerKilomole: return (baseUnitValue/1e-6) / 1e-3d;
                case MolarMassUnit.MilligramPerMole: return (baseUnitValue/1e-3) / 1e-3d;
                case MolarMassUnit.NanogramPerKilomole: return (baseUnitValue/1e-6) / 1e-9d;
                case MolarMassUnit.NanogramPerMole: return (baseUnitValue/1e-3) / 1e-9d;
                case MolarMassUnit.PoundPerKilomole: return baseUnitValue/(0.45359237/1e3);
                case MolarMassUnit.PoundPerMole: return baseUnitValue/0.45359237;
                case MolarMassUnit.PoundPerPoundMole: return baseUnitValue/1e-3;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

