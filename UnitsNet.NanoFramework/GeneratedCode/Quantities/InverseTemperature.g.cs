//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     An (inverse) temperature is a numerical measure of hot or cold. Its measurement is by detection of heat radiation or particle velocity or kinetic energy, or by the bulk behavior of a thermometric material. It may be calibrated in any of various temperature scales, Celsius, Fahrenheit, Kelvin, etc. The fundamental physical definition of temperature is provided by thermodynamics.
    /// </summary>
    public struct  InverseTemperature
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly InverseTemperatureUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public InverseTemperatureUnit Unit => _unit;
        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public InverseTemperature(double value, InverseTemperatureUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static InverseTemperatureUnit BaseUnit { get; } = InverseTemperatureUnit.InverseKelvin;

        /// <summary>
        /// Represents the largest possible value of Duration
        /// </summary>
        public static InverseTemperature MaxValue { get; } = new InverseTemperature(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration
        /// </summary>
        public static InverseTemperature MinValue { get; } = new InverseTemperature(double.MinValue, BaseUnit);
        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static InverseTemperature Zero { get; } = new InverseTemperature(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Get InverseTemperature in InverseDegreesCelsius.
        /// </summary>
        public double InverseDegreesCelsius => As(InverseTemperatureUnit.InverseDegreeCelsius);

        /// <summary>
        ///     Get InverseTemperature in InverseDegreesFahrenheit.
        /// </summary>
        public double InverseDegreesFahrenheit => As(InverseTemperatureUnit.InverseDegreeFahrenheit);

        /// <summary>
        ///     Get InverseTemperature in InverseDegreesRankine.
        /// </summary>
        public double InverseDegreesRankine => As(InverseTemperatureUnit.InverseDegreeRankine);

        /// <summary>
        ///     Get InverseTemperature in InverseKelvins.
        /// </summary>
        public double InverseKelvins => As(InverseTemperatureUnit.InverseKelvin);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get InverseTemperature from InverseDegreesCelsius.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseTemperature FromInverseDegreesCelsius(double inversedegreescelsius) => new InverseTemperature(inversedegreescelsius, InverseTemperatureUnit.InverseDegreeCelsius);

        /// <summary>
        ///     Get InverseTemperature from InverseDegreesFahrenheit.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseTemperature FromInverseDegreesFahrenheit(double inversedegreesfahrenheit) => new InverseTemperature(inversedegreesfahrenheit, InverseTemperatureUnit.InverseDegreeFahrenheit);

        /// <summary>
        ///     Get InverseTemperature from InverseDegreesRankine.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseTemperature FromInverseDegreesRankine(double inversedegreesrankine) => new InverseTemperature(inversedegreesrankine, InverseTemperatureUnit.InverseDegreeRankine);

        /// <summary>
        ///     Get InverseTemperature from InverseKelvins.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static InverseTemperature FromInverseKelvins(double inversekelvins) => new InverseTemperature(inversekelvins, InverseTemperatureUnit.InverseKelvin);


        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="InverseTemperatureUnit" /> to <see cref="InverseTemperature" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>InverseTemperature unit value.</returns>
        public static InverseTemperature From(double value, InverseTemperatureUnit fromUnit)
        {
            return new InverseTemperature(value, fromUnit);
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(InverseTemperatureUnit unit) => GetValueAs(unit);        

        /// <summary>
        ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A Duration with the specified unit.</returns>
        public InverseTemperature ToUnit(InverseTemperatureUnit unit)
        {
                
            var convertedValue = GetValueAs(unit);
            return new InverseTemperature(convertedValue, unit);
        }


        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case InverseTemperatureUnit.InverseDegreeCelsius: return _value * 5/9;
                case InverseTemperatureUnit.InverseDegreeFahrenheit: return _value * 9/5;
                case InverseTemperatureUnit.InverseDegreeRankine: return _value*9/5;
                case InverseTemperatureUnit.InverseKelvin: return _value;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double GetValueAs(InverseTemperatureUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case InverseTemperatureUnit.InverseDegreeCelsius: return baseUnitValue / 5/9;
                case InverseTemperatureUnit.InverseDegreeFahrenheit: return baseUnitValue / 9/5;
                case InverseTemperatureUnit.InverseDegreeRankine: return baseUnitValue*5/9;
                case InverseTemperatureUnit.InverseKelvin: return baseUnitValue;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

    }
}

