//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.InternalHelpers;
using UnitsNet.Units;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure delta per unit length is the pressure change(force per unit area) per unit of length.
    /// </summary>
    public partial struct PressureDeltaPerUnitLength : IQuantity<PressureDeltaPerUnitLengthUnit>, IEquatable<PressureDeltaPerUnitLength>, IComparable, IComparable<PressureDeltaPerUnitLength>, IConvertible, IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureDeltaPerUnitLengthUnit? _unit;

        static PressureDeltaPerUnitLength()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);

            Info = new QuantityInfo<PressureDeltaPerUnitLengthUnit>("PressureDeltaPerUnitLength",
                new UnitInfo<PressureDeltaPerUnitLengthUnit>[] {
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter, new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second)),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet, BaseUnits.Undefined),
                    new UnitInfo<PressureDeltaPerUnitLengthUnit>(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile, BaseUnits.Undefined),
                },
                BaseUnit, Zero, BaseDimensions, QuantityType.PressureDeltaPerUnitLength);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public PressureDeltaPerUnitLength(double value, PressureDeltaPerUnitLengthUnit unit)
        {
            if(unit == PressureDeltaPerUnitLengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public PressureDeltaPerUnitLength(double value, UnitSystem unitSystem)
        {
            if(unitSystem is null) throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);
            var firstUnitInfo = unitInfos.FirstOrDefault();

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = firstUnitInfo?.Value ?? throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));
        }

        #region Static Properties

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<PressureDeltaPerUnitLengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of PressureDeltaPerUnitLength, which is PascalDeltaPerMeter. All conversions go via this value.
        /// </summary>
        public static PressureDeltaPerUnitLengthUnit BaseUnit { get; } = PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter;

        /// <summary>
        /// Represents the largest possible value of PressureDeltaPerUnitLength
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static PressureDeltaPerUnitLength MaxValue { get; } = new PressureDeltaPerUnitLength(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of PressureDeltaPerUnitLength
        /// </summary>
        [Obsolete("MaxValue and MinValue will be removed. Choose your own value or use nullability for unbounded lower/upper range checks. See discussion in https://github.com/angularsen/UnitsNet/issues/848.")]
        public static PressureDeltaPerUnitLength MinValue { get; } = new PressureDeltaPerUnitLength(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        [Obsolete("QuantityType will be removed in the future. Use Info property instead.")]
        public static QuantityType QuantityType { get; } = QuantityType.PressureDeltaPerUnitLength;

        /// <summary>
        ///     All units of measurement for the PressureDeltaPerUnitLength quantity.
        /// </summary>
        public static PressureDeltaPerUnitLengthUnit[] Units { get; } = Enum.GetValues(typeof(PressureDeltaPerUnitLengthUnit)).Cast<PressureDeltaPerUnitLengthUnit>().Except(new PressureDeltaPerUnitLengthUnit[]{ PressureDeltaPerUnitLengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit PascalDeltaPerMeter.
        /// </summary>
        public static PressureDeltaPerUnitLength Zero { get; } = new PressureDeltaPerUnitLength(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        Enum IQuantity.Unit => Unit;

        /// <inheritdoc />
        public PressureDeltaPerUnitLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<PressureDeltaPerUnitLengthUnit> QuantityInfo => Info;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        QuantityInfo IQuantity.QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => PressureDeltaPerUnitLength.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PressureDeltaPerUnitLength.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerKilometer.
        /// </summary>
        public double DecapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerMeter.
        /// </summary>
        public double DecapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerKilometer.
        /// </summary>
        public double GigapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerMeter.
        /// </summary>
        public double GigapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerKilometer.
        /// </summary>
        public double HectopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerMeter.
        /// </summary>
        public double HectopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerKilometer.
        /// </summary>
        public double KilopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerMeter.
        /// </summary>
        public double KilopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerKilometer.
        /// </summary>
        public double MegapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerMeter.
        /// </summary>
        public double MegapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerKilometer.
        /// </summary>
        public double MicropascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerMeter.
        /// </summary>
        public double MicropascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerKilometer.
        /// </summary>
        public double MillipascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerMeter.
        /// </summary>
        public double MillipascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerKilometer.
        /// </summary>
        public double PascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerMeter.
        /// </summary>
        public double PascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerFoot => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerHundredFeet => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerMile => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureDeltaPerUnitLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static string GetAbbreviation(PressureDeltaPerUnitLengthUnit unit, IFormatProvider? provider)
        {
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerKilometer(QuantityValue decapascalsdeltaperkilometer)
        {
            double value = (double) decapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerMeter(QuantityValue decapascalsdeltapermeter)
        {
            double value = (double) decapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerKilometer(QuantityValue gigapascalsdeltaperkilometer)
        {
            double value = (double) gigapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerMeter(QuantityValue gigapascalsdeltapermeter)
        {
            double value = (double) gigapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerKilometer(QuantityValue hectopascalsdeltaperkilometer)
        {
            double value = (double) hectopascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerMeter(QuantityValue hectopascalsdeltapermeter)
        {
            double value = (double) hectopascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerKilometer(QuantityValue kilopascalsdeltaperkilometer)
        {
            double value = (double) kilopascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerMeter(QuantityValue kilopascalsdeltapermeter)
        {
            double value = (double) kilopascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerKilometer(QuantityValue megapascalsdeltaperkilometer)
        {
            double value = (double) megapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerMeter(QuantityValue megapascalsdeltapermeter)
        {
            double value = (double) megapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerKilometer(QuantityValue micropascalsdeltaperkilometer)
        {
            double value = (double) micropascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerMeter(QuantityValue micropascalsdeltapermeter)
        {
            double value = (double) micropascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerKilometer(QuantityValue millipascalsdeltaperkilometer)
        {
            double value = (double) millipascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerMeter(QuantityValue millipascalsdeltapermeter)
        {
            double value = (double) millipascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerKilometer(QuantityValue pascalsdeltaperkilometer)
        {
            double value = (double) pascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerMeter(QuantityValue pascalsdeltapermeter)
        {
            double value = (double) pascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerFoot(QuantityValue poundspersquareinchdeltaperfoot)
        {
            double value = (double) poundspersquareinchdeltaperfoot;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerHundredFeet(QuantityValue poundspersquareinchdeltaperhundredfeet)
        {
            double value = (double) poundspersquareinchdeltaperhundredfeet;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerMile(QuantityValue poundspersquareinchdeltapermile)
        {
            double value = (double) poundspersquareinchdeltapermile;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureDeltaPerUnitLengthUnit" /> to <see cref="PressureDeltaPerUnitLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PressureDeltaPerUnitLength unit value.</returns>
        public static PressureDeltaPerUnitLength From(QuantityValue value, PressureDeltaPerUnitLengthUnit fromUnit)
        {
            return new PressureDeltaPerUnitLength((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PressureDeltaPerUnitLength Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static PressureDeltaPerUnitLength Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<PressureDeltaPerUnitLength, PressureDeltaPerUnitLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse(string? str, out PressureDeltaPerUnitLength result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParse(string? str, IFormatProvider? provider, out PressureDeltaPerUnitLength result)
        {
            return QuantityParser.Default.TryParse<PressureDeltaPerUnitLength, PressureDeltaPerUnitLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureDeltaPerUnitLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureDeltaPerUnitLengthUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse<PressureDeltaPerUnitLengthUnit>(str, provider);
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider,out UnitsNet.Units.PressureDeltaPerUnitLengthUnit)"/>
        public static bool TryParseUnit(string str, out PressureDeltaPerUnitLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public static bool TryParseUnit(string str, IFormatProvider? provider, out PressureDeltaPerUnitLengthUnit unit)
        {
            return UnitParser.Default.TryParse<PressureDeltaPerUnitLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static PressureDeltaPerUnitLength operator -(PressureDeltaPerUnitLength right)
        {
            return new PressureDeltaPerUnitLength(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="PressureDeltaPerUnitLength"/> from adding two <see cref="PressureDeltaPerUnitLength"/>.</summary>
        public static PressureDeltaPerUnitLength operator +(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return new PressureDeltaPerUnitLength(left.Value + right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="PressureDeltaPerUnitLength"/> from subtracting two <see cref="PressureDeltaPerUnitLength"/>.</summary>
        public static PressureDeltaPerUnitLength operator -(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return new PressureDeltaPerUnitLength(left.Value - right.GetValueAs(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="PressureDeltaPerUnitLength"/> from multiplying value and <see cref="PressureDeltaPerUnitLength"/>.</summary>
        public static PressureDeltaPerUnitLength operator *(double left, PressureDeltaPerUnitLength right)
        {
            return new PressureDeltaPerUnitLength(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="PressureDeltaPerUnitLength"/> from multiplying value and <see cref="PressureDeltaPerUnitLength"/>.</summary>
        public static PressureDeltaPerUnitLength operator *(PressureDeltaPerUnitLength left, double right)
        {
            return new PressureDeltaPerUnitLength(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="PressureDeltaPerUnitLength"/> from dividing <see cref="PressureDeltaPerUnitLength"/> by value.</summary>
        public static PressureDeltaPerUnitLength operator /(PressureDeltaPerUnitLength left, double right)
        {
            return new PressureDeltaPerUnitLength(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="PressureDeltaPerUnitLength"/> by <see cref="PressureDeltaPerUnitLength"/>.</summary>
        public static double operator /(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.PascalsDeltaPerMeter / right.PascalsDeltaPerMeter;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.Value <= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.Value >= right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.Value < right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.Value > right.GetValueAs(left.Unit);
        }

        /// <summary>Returns true if exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(PressureDeltaPerUnitLength, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator ==(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return left.Equals(right);
        }

        /// <summary>Returns true if not exactly equal.</summary>
        /// <remarks>Consider using <see cref="Equals(PressureDeltaPerUnitLength, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public static bool operator !=(PressureDeltaPerUnitLength left, PressureDeltaPerUnitLength right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PressureDeltaPerUnitLength objPressureDeltaPerUnitLength)) throw new ArgumentException("Expected type PressureDeltaPerUnitLength.", nameof(obj));

            return CompareTo(objPressureDeltaPerUnitLength);
        }

        /// <inheritdoc />
        public int CompareTo(PressureDeltaPerUnitLength other)
        {
            return _value.CompareTo(other.GetValueAs(this.Unit));
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(PressureDeltaPerUnitLength, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is PressureDeltaPerUnitLength objPressureDeltaPerUnitLength))
                return false;

            return Equals(objPressureDeltaPerUnitLength);
        }

        /// <inheritdoc />
        /// <remarks>Consider using <see cref="Equals(PressureDeltaPerUnitLength, double, ComparisonType)"/> for safely comparing floating point values.</remarks>
        public bool Equals(PressureDeltaPerUnitLength other)
        {
            return _value.Equals(other.GetValueAs(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PressureDeltaPerUnitLength within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PressureDeltaPerUnitLength other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PressureDeltaPerUnitLength.</returns>
        public override int GetHashCode()
        {
            return new { Info.Name, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureDeltaPerUnitLengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = GetValueAs(unit);
            return Convert.ToDouble(converted);
        }

        /// <inheritdoc cref="IQuantity.As(UnitSystem)"/>
        public double As(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return As(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        double IQuantity.As(Enum unit)
        {
            if(!(unit is PressureDeltaPerUnitLengthUnit unitAsPressureDeltaPerUnitLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureDeltaPerUnitLengthUnit)} is supported.", nameof(unit));

            return As(unitAsPressureDeltaPerUnitLengthUnit);
        }

        /// <summary>
        ///     Converts this PressureDeltaPerUnitLength to another PressureDeltaPerUnitLength with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A PressureDeltaPerUnitLength with the specified unit.</returns>
        public PressureDeltaPerUnitLength ToUnit(PressureDeltaPerUnitLengthUnit unit)
        {
            var convertedValue = GetValueAs(unit);
            return new PressureDeltaPerUnitLength(convertedValue, unit);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(Enum unit)
        {
            if(!(unit is PressureDeltaPerUnitLengthUnit unitAsPressureDeltaPerUnitLengthUnit))
                throw new ArgumentException($"The given unit is of type {unit.GetType()}. Only {typeof(PressureDeltaPerUnitLengthUnit)} is supported.", nameof(unit));

            return ToUnit(unitAsPressureDeltaPerUnitLengthUnit);
        }

        /// <inheritdoc cref="IQuantity.ToUnit(UnitSystem)"/>
        public PressureDeltaPerUnitLength ToUnit(UnitSystem unitSystem)
        {
            if(unitSystem is null)
                throw new ArgumentNullException(nameof(unitSystem));

            var unitInfos = Info.GetUnitInfosFor(unitSystem.BaseUnits);

            var firstUnitInfo = unitInfos.FirstOrDefault();
            if(firstUnitInfo == null)
                throw new ArgumentException("No units were found for the given UnitSystem.", nameof(unitSystem));

            return ToUnit(firstUnitInfo.Value);
        }

        /// <inheritdoc />
        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <inheritdoc />
        IQuantity<PressureDeltaPerUnitLengthUnit> IQuantity<PressureDeltaPerUnitLengthUnit>.ToUnit(PressureDeltaPerUnitLengthUnit unit) => ToUnit(unit);

        /// <inheritdoc />
        IQuantity<PressureDeltaPerUnitLengthUnit> IQuantity<PressureDeltaPerUnitLengthUnit>.ToUnit(UnitSystem unitSystem) => ToUnit(unitSystem);

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double GetValueInBaseUnit()
        {
            switch(Unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (_value*0.001) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (_value) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (_value*0.001) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (_value) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (_value*0.001) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (_value) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (_value*0.001) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (_value) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (_value*0.001) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (_value) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (_value*0.001) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (_value) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (_value*0.001) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (_value) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return _value*0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return _value;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return _value*6894.757293168*3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return _value*6894.757293168*3.28084/100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return _value*6894.757293168*3.28084/5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        internal PressureDeltaPerUnitLength ToBaseUnit()
        {
            var baseUnitValue = GetValueInBaseUnit();
            return new PressureDeltaPerUnitLength(baseUnitValue, BaseUnit);
        }

        private double GetValueAs(PressureDeltaPerUnitLengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = GetValueInBaseUnit();

            switch(unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (baseUnitValue) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (baseUnitValue) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (baseUnitValue) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (baseUnitValue) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (baseUnitValue) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (baseUnitValue) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (baseUnitValue) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return baseUnitValue/0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return baseUnitValue;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return baseUnitValue/6894.757293168/3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return baseUnitValue/6894.757293168/3.28084*100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return baseUnitValue/6894.757293168/3.28084*5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString("g");
        }

        /// <summary>
        ///     Gets the default string representation of value and unit using the given format provider.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        public string ToString(IFormatProvider? provider)
        {
            return ToString("g", provider);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete(@"This method is deprecated and will be removed at a future release. Please use ToString(""s2"") or ToString(""s2"", provider) where 2 is an example of the number passed to significantDigitsAfterRadix.")]
        public string ToString(IFormatProvider? provider, int significantDigitsAfterRadix)
        {
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        [Obsolete("This method is deprecated and will be removed at a future release. Please use string.Format().")]
        public string ToString(IFormatProvider? provider, [NotNull] string format, [NotNull] params object[] args)
        {
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? CultureInfo.CurrentUICulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using <see cref="CultureInfo.CurrentUICulture" />.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format)
        {
            return ToString(format, CultureInfo.CurrentUICulture);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TUnitType}(IQuantity{TUnitType}, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentUICulture" /> if null.
        /// </summary>
        /// <param name="format">The format string.</param>
        /// <param name="provider">Format to use for localization and number formatting. Defaults to <see cref="CultureInfo.CurrentUICulture" /> if null.</param>
        /// <returns>The string representation.</returns>
        public string ToString(string format, IFormatProvider? provider)
        {
            return QuantityFormatter.Format<PressureDeltaPerUnitLengthUnit>(this, format, provider);
        }

        #endregion

        #region IConvertible Methods

        TypeCode IConvertible.GetTypeCode()
        {
            return TypeCode.Object;
        }

        bool IConvertible.ToBoolean(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PressureDeltaPerUnitLength)} to bool is not supported.");
        }

        byte IConvertible.ToByte(IFormatProvider provider)
        {
            return Convert.ToByte(_value);
        }

        char IConvertible.ToChar(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PressureDeltaPerUnitLength)} to char is not supported.");
        }

        DateTime IConvertible.ToDateTime(IFormatProvider provider)
        {
            throw new InvalidCastException($"Converting {typeof(PressureDeltaPerUnitLength)} to DateTime is not supported.");
        }

        decimal IConvertible.ToDecimal(IFormatProvider provider)
        {
            return Convert.ToDecimal(_value);
        }

        double IConvertible.ToDouble(IFormatProvider provider)
        {
            return Convert.ToDouble(_value);
        }

        short IConvertible.ToInt16(IFormatProvider provider)
        {
            return Convert.ToInt16(_value);
        }

        int IConvertible.ToInt32(IFormatProvider provider)
        {
            return Convert.ToInt32(_value);
        }

        long IConvertible.ToInt64(IFormatProvider provider)
        {
            return Convert.ToInt64(_value);
        }

        sbyte IConvertible.ToSByte(IFormatProvider provider)
        {
            return Convert.ToSByte(_value);
        }

        float IConvertible.ToSingle(IFormatProvider provider)
        {
            return Convert.ToSingle(_value);
        }

        string IConvertible.ToString(IFormatProvider provider)
        {
            return ToString("g", provider);
        }

        object IConvertible.ToType(Type conversionType, IFormatProvider provider)
        {
            if(conversionType == typeof(PressureDeltaPerUnitLength))
                return this;
            else if(conversionType == typeof(PressureDeltaPerUnitLengthUnit))
                return Unit;
            else if(conversionType == typeof(QuantityType))
                return PressureDeltaPerUnitLength.QuantityType;
            else if(conversionType == typeof(QuantityInfo))
                return PressureDeltaPerUnitLength.Info;
            else if(conversionType == typeof(BaseDimensions))
                return PressureDeltaPerUnitLength.BaseDimensions;
            else
                throw new InvalidCastException($"Converting {typeof(PressureDeltaPerUnitLength)} to {conversionType} is not supported.");
        }

        ushort IConvertible.ToUInt16(IFormatProvider provider)
        {
            return Convert.ToUInt16(_value);
        }

        uint IConvertible.ToUInt32(IFormatProvider provider)
        {
            return Convert.ToUInt32(_value);
        }

        ulong IConvertible.ToUInt64(IFormatProvider provider)
        {
            return Convert.ToUInt64(_value);
        }

        #endregion
    }
}
