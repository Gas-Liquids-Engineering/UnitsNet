//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Globalization;
using System.Linq;
using JetBrains.Annotations;
using UnitsNet.Units;
using UnitsNet.InternalHelpers;

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <summary>
    ///     Pressure delta per unit length is the pressure change(force per unit area) per unit of length.
    /// </summary>
    // Windows Runtime Component has constraints on public types: https://msdn.microsoft.com/en-us/library/br230301.aspx#Declaring types in Windows Runtime Components
    // Public structures can't have any members other than public fields, and those fields must be value types or strings.
    // Public classes must be sealed (NotInheritable in Visual Basic). If your programming model requires polymorphism, you can create a public interface and implement that interface on the classes that must be polymorphic.
    public sealed partial class PressureDeltaPerUnitLength : IQuantity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureDeltaPerUnitLengthUnit? _unit;

        static PressureDeltaPerUnitLength()
        {
            BaseDimensions = new BaseDimensions(-1, 1, -2, 0, 0, 0, 0);
            Info = new QuantityInfo(QuantityType.PressureDeltaPerUnitLength, Units.Cast<Enum>().ToArray(), BaseUnit, Zero, BaseDimensions);
        }

        /// <summary>
        ///     Creates the quantity with a value of 0 in the base unit PascalDeltaPerMeter.
        /// </summary>
        /// <remarks>
        ///     Windows Runtime Component requires a default constructor.
        /// </remarks>
        public PressureDeltaPerUnitLength()
        {
            _value = 0;
            _unit = BaseUnit;
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        /// <remarks>Value parameter cannot be named 'value' due to constraint when targeting Windows Runtime Component.</remarks>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        private PressureDeltaPerUnitLength(double value, PressureDeltaPerUnitLengthUnit unit)
        {
            if(unit == PressureDeltaPerUnitLengthUnit.Undefined)
              throw new ArgumentException("The quantity can not be created with an undefined unit.", nameof(unit));

            _value = Guard.EnsureValidNumber(value, nameof(value));
            _unit = unit;
        }

        #region Static Properties

        /// <summary>
        ///     Information about the quantity type, such as unit values and names.
        /// </summary>
        internal static QuantityInfo Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions { get; }

        /// <summary>
        ///     The base unit of PressureDeltaPerUnitLength, which is PascalDeltaPerMeter. All conversions go via this value.
        /// </summary>
        public static PressureDeltaPerUnitLengthUnit BaseUnit { get; } = PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter;

        /// <summary>
        /// Represents the largest possible value of PressureDeltaPerUnitLength
        /// </summary>
        public static PressureDeltaPerUnitLength MaxValue { get; } = new PressureDeltaPerUnitLength(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of PressureDeltaPerUnitLength
        /// </summary>
        public static PressureDeltaPerUnitLength MinValue { get; } = new PressureDeltaPerUnitLength(double.MinValue, BaseUnit);

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public static QuantityType QuantityType { get; } = QuantityType.PressureDeltaPerUnitLength;

        /// <summary>
        ///     All units of measurement for the PressureDeltaPerUnitLength quantity.
        /// </summary>
        public static PressureDeltaPerUnitLengthUnit[] Units { get; } = Enum.GetValues(typeof(PressureDeltaPerUnitLengthUnit)).Cast<PressureDeltaPerUnitLengthUnit>().Except(new PressureDeltaPerUnitLengthUnit[]{ PressureDeltaPerUnitLengthUnit.Undefined }).ToArray();

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit PascalDeltaPerMeter.
        /// </summary>
        public static PressureDeltaPerUnitLength Zero { get; } = new PressureDeltaPerUnitLength(0, BaseUnit);

        #endregion

        #region Properties

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => Convert.ToDouble(_value);

        /// <inheritdoc cref="IQuantity.Unit"/>
        object IQuantity.Unit => Unit;

        /// <summary>
        ///     The unit this quantity was constructed with -or- <see cref="BaseUnit" /> if default ctor was used.
        /// </summary>
        public PressureDeltaPerUnitLengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        internal QuantityInfo QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="QuantityType" /> of this quantity.
        /// </summary>
        public QuantityType Type => PressureDeltaPerUnitLength.QuantityType;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => PressureDeltaPerUnitLength.BaseDimensions;

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerKilometer.
        /// </summary>
        public double DecapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in DecapascalsDeltaPerMeter.
        /// </summary>
        public double DecapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerKilometer.
        /// </summary>
        public double GigapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in GigapascalsDeltaPerMeter.
        /// </summary>
        public double GigapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerKilometer.
        /// </summary>
        public double HectopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in HectopascalsDeltaPerMeter.
        /// </summary>
        public double HectopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerKilometer.
        /// </summary>
        public double KilopascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in KilopascalsDeltaPerMeter.
        /// </summary>
        public double KilopascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerKilometer.
        /// </summary>
        public double MegapascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MegapascalsDeltaPerMeter.
        /// </summary>
        public double MegapascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerKilometer.
        /// </summary>
        public double MicropascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MicropascalsDeltaPerMeter.
        /// </summary>
        public double MicropascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerKilometer.
        /// </summary>
        public double MillipascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in MillipascalsDeltaPerMeter.
        /// </summary>
        public double MillipascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerKilometer.
        /// </summary>
        public double PascalsDeltaPerKilometer => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PascalsDeltaPerMeter.
        /// </summary>
        public double PascalsDeltaPerMeter => As(PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerFoot => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerHundredFeet => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);

        /// <summary>
        ///     Get PressureDeltaPerUnitLength in PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        public double PoundsPerSquareInchDeltaPerMile => As(PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PressureDeltaPerUnitLengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static string GetAbbreviation(PressureDeltaPerUnitLengthUnit unit, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitAbbreviationsCache.Default.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerKilometer(double decapascalsdeltaperkilometer)
        {
            double value = (double) decapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from DecapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromDecapascalsDeltaPerMeter(double decapascalsdeltapermeter)
        {
            double value = (double) decapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerKilometer(double gigapascalsdeltaperkilometer)
        {
            double value = (double) gigapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from GigapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromGigapascalsDeltaPerMeter(double gigapascalsdeltapermeter)
        {
            double value = (double) gigapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerKilometer(double hectopascalsdeltaperkilometer)
        {
            double value = (double) hectopascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from HectopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromHectopascalsDeltaPerMeter(double hectopascalsdeltapermeter)
        {
            double value = (double) hectopascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerKilometer(double kilopascalsdeltaperkilometer)
        {
            double value = (double) kilopascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from KilopascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromKilopascalsDeltaPerMeter(double kilopascalsdeltapermeter)
        {
            double value = (double) kilopascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerKilometer(double megapascalsdeltaperkilometer)
        {
            double value = (double) megapascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MegapascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMegapascalsDeltaPerMeter(double megapascalsdeltapermeter)
        {
            double value = (double) megapascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerKilometer(double micropascalsdeltaperkilometer)
        {
            double value = (double) micropascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MicropascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMicropascalsDeltaPerMeter(double micropascalsdeltapermeter)
        {
            double value = (double) micropascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerKilometer(double millipascalsdeltaperkilometer)
        {
            double value = (double) millipascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from MillipascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromMillipascalsDeltaPerMeter(double millipascalsdeltapermeter)
        {
            double value = (double) millipascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerKilometer.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerKilometer(double pascalsdeltaperkilometer)
        {
            double value = (double) pascalsdeltaperkilometer;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PascalsDeltaPerMeter.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromPascalsDeltaPerMeter(double pascalsdeltapermeter)
        {
            double value = (double) pascalsdeltapermeter;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerFoot.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerFoot(double poundspersquareinchdeltaperfoot)
        {
            double value = (double) poundspersquareinchdeltaperfoot;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerHundredFeet.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerHundredFeet(double poundspersquareinchdeltaperhundredfeet)
        {
            double value = (double) poundspersquareinchdeltaperhundredfeet;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet);
        }
        /// <summary>
        ///     Get PressureDeltaPerUnitLength from PoundsPerSquareInchDeltaPerMile.
        /// </summary>
        /// <exception cref="ArgumentException">If value is NaN or Infinity.</exception>
        [Windows.Foundation.Metadata.DefaultOverload]
        public static PressureDeltaPerUnitLength FromPoundsPerSquareInchDeltaPerMile(double poundspersquareinchdeltapermile)
        {
            double value = (double) poundspersquareinchdeltapermile;
            return new PressureDeltaPerUnitLength(value, PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureDeltaPerUnitLengthUnit" /> to <see cref="PressureDeltaPerUnitLength" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>PressureDeltaPerUnitLength unit value.</returns>
        // Fix name conflict with parameter "value"
        [return: System.Runtime.InteropServices.WindowsRuntime.ReturnValueName("returnValue")]
        public static PressureDeltaPerUnitLength From(double value, PressureDeltaPerUnitLengthUnit fromUnit)
        {
            return new PressureDeltaPerUnitLength((double)value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static PressureDeltaPerUnitLength Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureDeltaPerUnitLength Parse(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.Parse<PressureDeltaPerUnitLength, PressureDeltaPerUnitLengthUnit>(
                str,
                provider,
                From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        public static bool TryParse([CanBeNull] string str, out PressureDeltaPerUnitLength result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParse([CanBeNull] string str, [CanBeNull] string cultureName, out PressureDeltaPerUnitLength result)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return QuantityParser.Default.TryParse<PressureDeltaPerUnitLength, PressureDeltaPerUnitLengthUnit>(
                str,
                provider,
                From,
                out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PressureDeltaPerUnitLengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static PressureDeltaPerUnitLengthUnit ParseUnit(string str, [CanBeNull] string cultureName)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.Parse<PressureDeltaPerUnitLengthUnit>(str, provider);
        }

        public static bool TryParseUnit(string str, out PressureDeltaPerUnitLengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", new CultureInfo("en-US"));
        /// </example>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use when parsing number and unit. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public static bool TryParseUnit(string str, [CanBeNull] string cultureName, out PressureDeltaPerUnitLengthUnit unit)
        {
            IFormatProvider provider = GetFormatProviderFromCultureName(cultureName);
            return UnitParser.Default.TryParse<PressureDeltaPerUnitLengthUnit>(str, provider, out unit);
        }

        #endregion

        #region Equality / IComparable

        public int CompareTo(object obj)
        {
            if(obj is null) throw new ArgumentNullException(nameof(obj));
            if(!(obj is PressureDeltaPerUnitLength objPressureDeltaPerUnitLength)) throw new ArgumentException("Expected type PressureDeltaPerUnitLength.", nameof(obj));

            return CompareTo(objPressureDeltaPerUnitLength);
        }

        // Windows Runtime Component does not allow public methods/ctors with same number of parameters: https://msdn.microsoft.com/en-us/library/br230301.aspx#Overloaded methods
        internal int CompareTo(PressureDeltaPerUnitLength other)
        {
            return _value.CompareTo(other.AsBaseNumericType(this.Unit));
        }

        [Windows.Foundation.Metadata.DefaultOverload]
        public override bool Equals(object obj)
        {
            if(obj is null || !(obj is PressureDeltaPerUnitLength objPressureDeltaPerUnitLength))
                return false;

            return Equals(objPressureDeltaPerUnitLength);
        }

        public bool Equals(PressureDeltaPerUnitLength other)
        {
            return _value.Equals(other.AsBaseNumericType(this.Unit));
        }

        /// <summary>
        ///     <para>
        ///     Compare equality to another PressureDeltaPerUnitLength within the given absolute or relative tolerance.
        ///     </para>
        ///     <para>
        ///     Relative tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a percentage of this quantity's value. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison. A relative tolerance of 0.01 means the absolute difference must be within +/- 1% of
        ///     this quantity's value to be considered equal.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within +/- 1% of a (0.02m or 2cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Relative);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Absolute tolerance is defined as the maximum allowable absolute difference between this quantity's value and
        ///     <paramref name="other"/> as a fixed number in this quantity's unit. <paramref name="other"/> will be converted into
        ///     this quantity's unit for comparison.
        ///     <example>
        ///     In this example, the two quantities will be equal if the value of b is within 0.01 of a (0.01m or 1cm).
        ///     <code>
        ///     var a = Length.FromMeters(2.0);
        ///     var b = Length.FromInches(50.0);
        ///     a.Equals(b, 0.01, ComparisonType.Absolute);
        ///     </code>
        ///     </example>
        ///     </para>
        ///     <para>
        ///     Note that it is advised against specifying zero difference, due to the nature
        ///     of floating point operations and using System.Double internally.
        ///     </para>
        /// </summary>
        /// <param name="other">The other quantity to compare to.</param>
        /// <param name="tolerance">The absolute or relative tolerance value. Must be greater than or equal to 0.</param>
        /// <param name="comparisonType">The comparison type: either relative or absolute.</param>
        /// <returns>True if the absolute difference between the two values is not greater than the specified relative or absolute tolerance.</returns>
        public bool Equals(PressureDeltaPerUnitLength other, double tolerance, ComparisonType comparisonType)
        {
            if(tolerance < 0)
                throw new ArgumentOutOfRangeException("tolerance", "Tolerance must be greater than or equal to 0.");

            double thisValue = (double)this.Value;
            double otherValueInThisUnits = other.As(this.Unit);

            return UnitsNet.Comparison.Equals(thisValue, otherValueInThisUnits, tolerance, comparisonType);
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current PressureDeltaPerUnitLength.</returns>
        public override int GetHashCode()
        {
            return new { QuantityType, Value, Unit }.GetHashCode();
        }

        #endregion

        #region Conversion Methods

        double IQuantity.As(object unit) => As((PressureDeltaPerUnitLengthUnit)unit);

        /// <summary>
        ///     Convert to the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>Value converted to the specified unit.</returns>
        public double As(PressureDeltaPerUnitLengthUnit unit)
        {
            if(Unit == unit)
                return Convert.ToDouble(Value);

            var converted = AsBaseNumericType(unit);
            return Convert.ToDouble(converted);
        }

        /// <summary>
        ///     Converts this PressureDeltaPerUnitLength to another PressureDeltaPerUnitLength with the unit representation <paramref name="unit" />.
        /// </summary>
        /// <returns>A PressureDeltaPerUnitLength with the specified unit.</returns>
        public PressureDeltaPerUnitLength ToUnit(PressureDeltaPerUnitLengthUnit unit)
        {
            var convertedValue = AsBaseNumericType(unit);
            return new PressureDeltaPerUnitLength(convertedValue, unit);
        }

        /// <summary>
        ///     Converts the current value + unit to the base unit.
        ///     This is typically the first step in converting from one unit to another.
        /// </summary>
        /// <returns>The value in the base unit representation.</returns>
        private double AsBaseUnit()
        {
            switch(Unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (_value*0.001) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (_value) * 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (_value*0.001) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (_value) * 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (_value*0.001) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (_value) * 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (_value*0.001) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (_value) * 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (_value*0.001) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (_value) * 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (_value*0.001) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (_value) * 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (_value*0.001) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (_value) * 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return _value*0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return _value;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return _value*6894.757293168*3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return _value*6894.757293168*3.28084/100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return _value*6894.757293168*3.28084/5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to base units.");
            }
        }

        private double AsBaseNumericType(PressureDeltaPerUnitLengthUnit unit)
        {
            if(Unit == unit)
                return _value;

            var baseUnitValue = AsBaseUnit();

            switch(unit)
            {
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.DecapascalDeltaPerMeter: return (baseUnitValue) / 1e1d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.GigapascalDeltaPerMeter: return (baseUnitValue) / 1e9d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.HectopascalDeltaPerMeter: return (baseUnitValue) / 1e2d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.KilopascalDeltaPerMeter: return (baseUnitValue) / 1e3d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MegapascalDeltaPerMeter: return (baseUnitValue) / 1e6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MicropascalDeltaPerMeter: return (baseUnitValue) / 1e-6d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerKilometer: return (baseUnitValue/0.001) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.MillipascalDeltaPerMeter: return (baseUnitValue) / 1e-3d;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerKilometer: return baseUnitValue/0.001;
                case PressureDeltaPerUnitLengthUnit.PascalDeltaPerMeter: return baseUnitValue;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerFoot: return baseUnitValue/6894.757293168/3.28084;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerHundredFeet: return baseUnitValue/6894.757293168/3.28084*100;
                case PressureDeltaPerUnitLengthUnit.PoundPerSquareInchDeltaPerMile: return baseUnitValue/6894.757293168/3.28084*5280;
                default:
                    throw new NotImplementedException($"Can not convert {Unit} to {unit}.");
            }
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Get default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null);
        }

        /// <summary>
        ///     Get string representation of value and unit. Using two significant digits after radix.
        /// </summary>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName)
        {
            var provider = cultureName;
            return ToString(provider, 2);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="significantDigitsAfterRadix">The number of significant digits after the radix point.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString(string cultureName, int significantDigitsAfterRadix)
        {
            var provider = cultureName;
            var value = Convert.ToDouble(Value);
            var format = UnitFormatter.GetFormat(value, significantDigitsAfterRadix);
            return ToString(provider, format);
        }

        /// <summary>
        ///     Get string representation of value and unit.
        /// </summary>
        /// <param name="format">String format to use. Default:  "{0:0.##} {1} for value and unit abbreviation respectively."</param>
        /// <param name="args">Arguments for string format. Value and unit are implicitly included as arguments 0 and 1.</param>
        /// <returns>String representation.</returns>
        /// <param name="cultureName">Name of culture (ex: "en-US") to use for localization and number formatting. Defaults to <see cref="GlobalConfiguration.DefaultCulture" /> if null.</param>
        public string ToString([CanBeNull] string cultureName, [NotNull] string format, [NotNull] params object[] args)
        {
            var provider = GetFormatProviderFromCultureName(cultureName);
            if (format == null) throw new ArgumentNullException(nameof(format));
            if (args == null) throw new ArgumentNullException(nameof(args));

            provider = provider ?? GlobalConfiguration.DefaultCulture;

            var value = Convert.ToDouble(Value);
            var formatArgs = UnitFormatter.GetFormatArgs(Unit, value, provider, args);
            return string.Format(provider, format, formatArgs);
        }

        #endregion

        private static IFormatProvider GetFormatProviderFromCultureName([CanBeNull] string cultureName)
        {
            return cultureName != null ? new CultureInfo(cultureName) : (IFormatProvider)null;
        }
    }
}
