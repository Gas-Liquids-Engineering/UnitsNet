//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMolarFlow;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMolarFlowExtensionsTests
    {
        [Fact]
        public void NumberToGramMolesPerHourTest() =>
            Assert.Equal(MolarFlow.FromGramMolesPerHour(2), 2.GramMolesPerHour());

        [Fact]
        public void NumberToGramMolesPerMinuteTest() =>
            Assert.Equal(MolarFlow.FromGramMolesPerMinute(2), 2.GramMolesPerMinute());

        [Fact]
        public void NumberToGramMolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromGramMolesPerSecond(2), 2.GramMolesPerSecond());

        [Fact]
        public void NumberToKilogramMolesPerHourTest() =>
            Assert.Equal(MolarFlow.FromKilogramMolesPerHour(2), 2.KilogramMolesPerHour());

        [Fact]
        public void NumberToKilogramMolesPerMinuteTest() =>
            Assert.Equal(MolarFlow.FromKilogramMolesPerMinute(2), 2.KilogramMolesPerMinute());

        [Fact]
        public void NumberToKilogramMolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromKilogramMolesPerSecond(2), 2.KilogramMolesPerSecond());

        [Fact]
        public void NumberToPoundMolesPerHourTest() =>
            Assert.Equal(MolarFlow.FromPoundMolesPerHour(2), 2.PoundMolesPerHour());

        [Fact]
        public void NumberToPoundMolesPerMinuteTest() =>
            Assert.Equal(MolarFlow.FromPoundMolesPerMinute(2), 2.PoundMolesPerMinute());

        [Fact]
        public void NumberToPoundMolesPerSecondTest() =>
            Assert.Equal(MolarFlow.FromPoundMolesPerSecond(2), 2.PoundMolesPerSecond());

    }
}
