//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMolarEntropy;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMolarEntropyExtensionsTests
    {
        [Fact]
        public void NumberToBtusPerPoundMoleDegreeFahrenheitTest() =>
            Assert.Equal(MolarEntropy.FromBtusPerPoundMoleDegreeFahrenheit(2), 2.BtusPerPoundMoleDegreeFahrenheit());

        [Fact]
        public void NumberToCaloriePerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromCaloriePerMoleKelvin(2), 2.CaloriePerMoleKelvin());

        [Fact]
        public void NumberToJoulesPerKilomoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromJoulesPerKilomoleKelvin(2), 2.JoulesPerKilomoleKelvin());

        [Fact]
        public void NumberToJoulesPerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromJoulesPerMoleKelvin(2), 2.JoulesPerMoleKelvin());

        [Fact]
        public void NumberToKilobtusPerPoundMoleDegreeFahrenheitTest() =>
            Assert.Equal(MolarEntropy.FromKilobtusPerPoundMoleDegreeFahrenheit(2), 2.KilobtusPerPoundMoleDegreeFahrenheit());

        [Fact]
        public void NumberToKilocaloriePerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromKilocaloriePerMoleKelvin(2), 2.KilocaloriePerMoleKelvin());

        [Fact]
        public void NumberToKilojoulesPerKilomoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromKilojoulesPerKilomoleKelvin(2), 2.KilojoulesPerKilomoleKelvin());

        [Fact]
        public void NumberToKilojoulesPerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromKilojoulesPerMoleKelvin(2), 2.KilojoulesPerMoleKelvin());

        [Fact]
        public void NumberToMegabtusPerPoundMoleDegreeFahrenheitTest() =>
            Assert.Equal(MolarEntropy.FromMegabtusPerPoundMoleDegreeFahrenheit(2), 2.MegabtusPerPoundMoleDegreeFahrenheit());

        [Fact]
        public void NumberToMegacaloriePerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromMegacaloriePerMoleKelvin(2), 2.MegacaloriePerMoleKelvin());

        [Fact]
        public void NumberToMegajoulesPerKilomoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromMegajoulesPerKilomoleKelvin(2), 2.MegajoulesPerKilomoleKelvin());

        [Fact]
        public void NumberToMegajoulesPerMoleKelvinTest() =>
            Assert.Equal(MolarEntropy.FromMegajoulesPerMoleKelvin(2), 2.MegajoulesPerMoleKelvin());

    }
}
