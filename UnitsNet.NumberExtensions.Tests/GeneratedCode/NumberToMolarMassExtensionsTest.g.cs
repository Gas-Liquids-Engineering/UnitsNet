//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMolarMass;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMolarMassExtensionsTests
    {
        [Fact]
        public void NumberToCentigramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromCentigramsPerKilomole(2), 2.CentigramsPerKilomole());

        [Fact]
        public void NumberToCentigramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromCentigramsPerMole(2), 2.CentigramsPerMole());

        [Fact]
        public void NumberToDecagramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromDecagramsPerKilomole(2), 2.DecagramsPerKilomole());

        [Fact]
        public void NumberToDecagramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromDecagramsPerMole(2), 2.DecagramsPerMole());

        [Fact]
        public void NumberToDecigramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromDecigramsPerKilomole(2), 2.DecigramsPerKilomole());

        [Fact]
        public void NumberToDecigramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromDecigramsPerMole(2), 2.DecigramsPerMole());

        [Fact]
        public void NumberToGramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromGramsPerKilomole(2), 2.GramsPerKilomole());

        [Fact]
        public void NumberToGramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromGramsPerMole(2), 2.GramsPerMole());

        [Fact]
        public void NumberToGramsPerPoundMoleTest() =>
            Assert.Equal(MolarMass.FromGramsPerPoundMole(2), 2.GramsPerPoundMole());

        [Fact]
        public void NumberToHectogramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromHectogramsPerKilomole(2), 2.HectogramsPerKilomole());

        [Fact]
        public void NumberToHectogramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromHectogramsPerMole(2), 2.HectogramsPerMole());

        [Fact]
        public void NumberToKilogramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromKilogramsPerKilomole(2), 2.KilogramsPerKilomole());

        [Fact]
        public void NumberToKilogramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromKilogramsPerMole(2), 2.KilogramsPerMole());

        [Fact]
        public void NumberToKilogramsPerPoundMoleTest() =>
            Assert.Equal(MolarMass.FromKilogramsPerPoundMole(2), 2.KilogramsPerPoundMole());

        [Fact]
        public void NumberToKilopoundsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromKilopoundsPerKilomole(2), 2.KilopoundsPerKilomole());

        [Fact]
        public void NumberToKilopoundsPerMoleTest() =>
            Assert.Equal(MolarMass.FromKilopoundsPerMole(2), 2.KilopoundsPerMole());

        [Fact]
        public void NumberToKilopoundsPerPoundMoleTest() =>
            Assert.Equal(MolarMass.FromKilopoundsPerPoundMole(2), 2.KilopoundsPerPoundMole());

        [Fact]
        public void NumberToMicrogramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromMicrogramsPerKilomole(2), 2.MicrogramsPerKilomole());

        [Fact]
        public void NumberToMicrogramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromMicrogramsPerMole(2), 2.MicrogramsPerMole());

        [Fact]
        public void NumberToMilligramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromMilligramsPerKilomole(2), 2.MilligramsPerKilomole());

        [Fact]
        public void NumberToMilligramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromMilligramsPerMole(2), 2.MilligramsPerMole());

        [Fact]
        public void NumberToNanogramsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromNanogramsPerKilomole(2), 2.NanogramsPerKilomole());

        [Fact]
        public void NumberToNanogramsPerMoleTest() =>
            Assert.Equal(MolarMass.FromNanogramsPerMole(2), 2.NanogramsPerMole());

        [Fact]
        public void NumberToPoundsPerKilomoleTest() =>
            Assert.Equal(MolarMass.FromPoundsPerKilomole(2), 2.PoundsPerKilomole());

        [Fact]
        public void NumberToPoundsPerMoleTest() =>
            Assert.Equal(MolarMass.FromPoundsPerMole(2), 2.PoundsPerMole());

        [Fact]
        public void NumberToPoundsPerPoundMoleTest() =>
            Assert.Equal(MolarMass.FromPoundsPerPoundMole(2), 2.PoundsPerPoundMole());

    }
}
