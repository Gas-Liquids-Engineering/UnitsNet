//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToTime;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToTimeExtensionsTests
    {
        [Fact]
        public void NumberToCentisecondsTest() =>
            Assert.Equal(Time.FromCentiseconds(2), 2.Centiseconds());

        [Fact]
        public void NumberToFeetPerSecondTest() =>
            Assert.Equal(Time.FromFeetPerSecond(2), 2.FeetPerSecond());

        [Fact]
        public void NumberToDecisecondsTest() =>
            Assert.Equal(Time.FromDeciseconds(2), 2.Deciseconds());

        [Fact]
        public void NumberToHoursTest() =>
            Assert.Equal(Time.FromHours(2), 2.Hours());

        [Fact]
        public void NumberToKilosecondsTest() =>
            Assert.Equal(Time.FromKiloseconds(2), 2.Kiloseconds());

        [Fact]
        public void NumberToMicrosecondsTest() =>
            Assert.Equal(Time.FromMicroseconds(2), 2.Microseconds());

        [Fact]
        public void NumberToMillisecondsTest() =>
            Assert.Equal(Time.FromMilliseconds(2), 2.Milliseconds());

        [Fact]
        public void NumberToMinutesTest() =>
            Assert.Equal(Time.FromMinutes(2), 2.Minutes());

        [Fact]
        public void NumberToNanosecondsTest() =>
            Assert.Equal(Time.FromNanoseconds(2), 2.Nanoseconds());

        [Fact]
        public void NumberToSecondsTest() =>
            Assert.Equal(Time.FromSeconds(2), 2.Seconds());

    }
}
