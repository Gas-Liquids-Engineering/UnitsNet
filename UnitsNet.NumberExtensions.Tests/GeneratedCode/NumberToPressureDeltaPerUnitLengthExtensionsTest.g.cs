//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToPressureDeltaPerUnitLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToPressureDeltaPerUnitLengthExtensionsTests
    {
        [Fact]
        public void NumberToDecapascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromDecapascalsDeltaPerKilometer(2), 2.DecapascalsDeltaPerKilometer());

        [Fact]
        public void NumberToDecapascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromDecapascalsDeltaPerMeter(2), 2.DecapascalsDeltaPerMeter());

        [Fact]
        public void NumberToGigapascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromGigapascalsDeltaPerKilometer(2), 2.GigapascalsDeltaPerKilometer());

        [Fact]
        public void NumberToGigapascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromGigapascalsDeltaPerMeter(2), 2.GigapascalsDeltaPerMeter());

        [Fact]
        public void NumberToHectopascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromHectopascalsDeltaPerKilometer(2), 2.HectopascalsDeltaPerKilometer());

        [Fact]
        public void NumberToHectopascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromHectopascalsDeltaPerMeter(2), 2.HectopascalsDeltaPerMeter());

        [Fact]
        public void NumberToKilopascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromKilopascalsDeltaPerKilometer(2), 2.KilopascalsDeltaPerKilometer());

        [Fact]
        public void NumberToKilopascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromKilopascalsDeltaPerMeter(2), 2.KilopascalsDeltaPerMeter());

        [Fact]
        public void NumberToMegapascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMegapascalsDeltaPerKilometer(2), 2.MegapascalsDeltaPerKilometer());

        [Fact]
        public void NumberToMegapascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMegapascalsDeltaPerMeter(2), 2.MegapascalsDeltaPerMeter());

        [Fact]
        public void NumberToMicropascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMicropascalsDeltaPerKilometer(2), 2.MicropascalsDeltaPerKilometer());

        [Fact]
        public void NumberToMicropascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMicropascalsDeltaPerMeter(2), 2.MicropascalsDeltaPerMeter());

        [Fact]
        public void NumberToMillipascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMillipascalsDeltaPerKilometer(2), 2.MillipascalsDeltaPerKilometer());

        [Fact]
        public void NumberToMillipascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromMillipascalsDeltaPerMeter(2), 2.MillipascalsDeltaPerMeter());

        [Fact]
        public void NumberToPascalsDeltaPerKilometerTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromPascalsDeltaPerKilometer(2), 2.PascalsDeltaPerKilometer());

        [Fact]
        public void NumberToPascalsDeltaPerMeterTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromPascalsDeltaPerMeter(2), 2.PascalsDeltaPerMeter());

        [Fact]
        public void NumberToPoundsPerSquareInchDeltaPerFootTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerFoot(2), 2.PoundsPerSquareInchDeltaPerFoot());

        [Fact]
        public void NumberToPoundsPerSquareInchDeltaPerHundredFeetTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerHundredFeet(2), 2.PoundsPerSquareInchDeltaPerHundredFeet());

        [Fact]
        public void NumberToPoundsPerSquareInchDeltaPerMileTest() =>
            Assert.Equal(PressureDeltaPerUnitLength.FromPoundsPerSquareInchDeltaPerMile(2), 2.PoundsPerSquareInchDeltaPerMile());

    }
}
